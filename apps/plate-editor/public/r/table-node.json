{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table-node",
  "type": "registry:ui",
  "title": "Table Element",
  "description": "A table component with floating toolbar and border customization.",
  "dependencies": [
    "@platejs/table",
    "@radix-ui/react-popover"
  ],
  "registryDependencies": [
    "dropdown-menu",
    "popover",
    "https://platejs.org/r/resize-handle",
    "https://platejs.org/r/block-selection",
    "https://platejs.org/r/toolbar",
    "https://platejs.org/r/tailwind-scrollbar-hide",
    "https://platejs.org/r/font-color-toolbar-button"
  ],
  "files": [
    {
      "path": "src/registry/ui/table-node.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\n\nimport type * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu';\n\nimport { useDraggable, useDropLine } from '@platejs/dnd';\nimport {\n  BlockSelectionPlugin,\n  useBlockSelected,\n} from '@platejs/selection/react';\nimport { setCellBackground } from '@platejs/table';\nimport {\n  TablePlugin,\n  TableProvider,\n  useTableBordersDropdownMenuContentState,\n  useTableCellElement,\n  useTableCellElementResizable,\n  useTableElement,\n  useTableMergeState,\n} from '@platejs/table/react';\nimport { PopoverAnchor } from '@radix-ui/react-popover';\nimport { cva } from 'class-variance-authority';\nimport {\n  ArrowDown,\n  ArrowLeft,\n  ArrowRight,\n  ArrowUp,\n  CombineIcon,\n  EraserIcon,\n  Grid2X2Icon,\n  GripVertical,\n  PaintBucketIcon,\n  SquareSplitHorizontalIcon,\n  Trash2Icon,\n  XIcon,\n} from 'lucide-react';\nimport {\n  type TElement,\n  type TTableCellElement,\n  type TTableElement,\n  type TTableRowElement,\n  KEYS,\n  PathApi,\n} from 'platejs';\nimport {\n  type PlateElementProps,\n  PlateElement,\n  useComposedRef,\n  useEditorPlugin,\n  useEditorRef,\n  useEditorSelector,\n  useElement,\n  useFocusedLast,\n  usePluginOption,\n  useReadOnly,\n  useRemoveNodeButton,\n  useSelected,\n  withHOC,\n} from 'platejs/react';\nimport { useElementSelector } from 'platejs/react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Popover, PopoverContent } from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\n\nimport { blockSelectionVariants } from './block-selection';\nimport {\n  ColorDropdownMenuItems,\n  DEFAULT_COLORS,\n} from './font-color-toolbar-button';\nimport { ResizeHandle } from './resize-handle';\nimport {\n  BorderAllIcon,\n  BorderBottomIcon,\n  BorderLeftIcon,\n  BorderNoneIcon,\n  BorderRightIcon,\n  BorderTopIcon,\n} from './table-icons';\nimport {\n  Toolbar,\n  ToolbarButton,\n  ToolbarGroup,\n  ToolbarMenuGroup,\n} from './toolbar';\nexport const TableElement = withHOC(\n  TableProvider,\n  function TableElement({\n    children,\n    ...props\n  }: PlateElementProps<TTableElement>) {\n    const readOnly = useReadOnly();\n    const isSelectionAreaVisible = usePluginOption(\n      BlockSelectionPlugin,\n      'isSelectionAreaVisible'\n    );\n    const hasControls = !readOnly && !isSelectionAreaVisible;\n    const {\n      isSelectingCell,\n      marginLeft,\n      props: tableProps,\n    } = useTableElement();\n\n    const isSelectingTable = useBlockSelected(props.element.id as string);\n\n    const content = (\n      <PlateElement\n        {...props}\n        className={cn(\n          'overflow-x-auto py-5',\n          hasControls && '-ml-2 *:data-[slot=block-selection]:left-2'\n        )}\n        style={{ paddingLeft: marginLeft }}\n      >\n        <div className=\"group/table relative w-fit\">\n          <table\n            className={cn(\n              'mr-0 ml-px table h-px table-fixed border-collapse',\n              isSelectingCell && 'selection:bg-transparent'\n            )}\n            {...tableProps}\n          >\n            <tbody className=\"min-w-full\">{children}</tbody>\n          </table>\n\n          {isSelectingTable && (\n            <div className={blockSelectionVariants()} contentEditable={false} />\n          )}\n        </div>\n      </PlateElement>\n    );\n\n    if (readOnly) {\n      return content;\n    }\n\n    return <TableFloatingToolbar>{content}</TableFloatingToolbar>;\n  }\n);\n\nfunction TableFloatingToolbar({\n  children,\n  ...props\n}: React.ComponentProps<typeof PopoverContent>) {\n  const { tf } = useEditorPlugin(TablePlugin);\n  const selected = useSelected();\n  const element = useElement<TTableElement>();\n  const { props: buttonProps } = useRemoveNodeButton({ element });\n  const collapsedInside = useEditorSelector(\n    (editor) => selected && editor.api.isCollapsed(),\n    [selected]\n  );\n  const isFocusedLast = useFocusedLast();\n\n  const { canMerge, canSplit } = useTableMergeState();\n\n  return (\n    <Popover\n      open={isFocusedLast && (canMerge || canSplit || collapsedInside)}\n      modal={false}\n    >\n      <PopoverAnchor asChild>{children}</PopoverAnchor>\n      <PopoverContent\n        asChild\n        onOpenAutoFocus={(e) => e.preventDefault()}\n        contentEditable={false}\n        {...props}\n      >\n        <Toolbar\n          className=\"scrollbar-hide flex w-auto max-w-[80vw] flex-row overflow-x-auto rounded-md border bg-popover p-1 shadow-md print:hidden\"\n          contentEditable={false}\n        >\n          <ToolbarGroup>\n            <ColorDropdownMenu tooltip=\"Background color\">\n              <PaintBucketIcon />\n            </ColorDropdownMenu>\n            {canMerge && (\n              <ToolbarButton\n                onClick={() => tf.table.merge()}\n                onMouseDown={(e) => e.preventDefault()}\n                tooltip=\"Merge cells\"\n              >\n                <CombineIcon />\n              </ToolbarButton>\n            )}\n            {canSplit && (\n              <ToolbarButton\n                onClick={() => tf.table.split()}\n                onMouseDown={(e) => e.preventDefault()}\n                tooltip=\"Split cell\"\n              >\n                <SquareSplitHorizontalIcon />\n              </ToolbarButton>\n            )}\n\n            <DropdownMenu modal={false}>\n              <DropdownMenuTrigger asChild>\n                <ToolbarButton tooltip=\"Cell borders\">\n                  <Grid2X2Icon />\n                </ToolbarButton>\n              </DropdownMenuTrigger>\n\n              <DropdownMenuPortal>\n                <TableBordersDropdownMenuContent />\n              </DropdownMenuPortal>\n            </DropdownMenu>\n\n            {collapsedInside && (\n              <ToolbarGroup>\n                <ToolbarButton tooltip=\"Delete table\" {...buttonProps}>\n                  <Trash2Icon />\n                </ToolbarButton>\n              </ToolbarGroup>\n            )}\n          </ToolbarGroup>\n\n          {collapsedInside && (\n            <ToolbarGroup>\n              <ToolbarButton\n                onClick={() => {\n                  tf.insert.tableRow({ before: true });\n                }}\n                onMouseDown={(e) => e.preventDefault()}\n                tooltip=\"Insert row before\"\n              >\n                <ArrowUp />\n              </ToolbarButton>\n              <ToolbarButton\n                onClick={() => {\n                  tf.insert.tableRow();\n                }}\n                onMouseDown={(e) => e.preventDefault()}\n                tooltip=\"Insert row after\"\n              >\n                <ArrowDown />\n              </ToolbarButton>\n              <ToolbarButton\n                onClick={() => {\n                  tf.remove.tableRow();\n                }}\n                onMouseDown={(e) => e.preventDefault()}\n                tooltip=\"Delete row\"\n              >\n                <XIcon />\n              </ToolbarButton>\n            </ToolbarGroup>\n          )}\n\n          {collapsedInside && (\n            <ToolbarGroup>\n              <ToolbarButton\n                onClick={() => {\n                  tf.insert.tableColumn({ before: true });\n                }}\n                onMouseDown={(e) => e.preventDefault()}\n                tooltip=\"Insert column before\"\n              >\n                <ArrowLeft />\n              </ToolbarButton>\n              <ToolbarButton\n                onClick={() => {\n                  tf.insert.tableColumn();\n                }}\n                onMouseDown={(e) => e.preventDefault()}\n                tooltip=\"Insert column after\"\n              >\n                <ArrowRight />\n              </ToolbarButton>\n              <ToolbarButton\n                onClick={() => {\n                  tf.remove.tableColumn();\n                }}\n                onMouseDown={(e) => e.preventDefault()}\n                tooltip=\"Delete column\"\n              >\n                <XIcon />\n              </ToolbarButton>\n            </ToolbarGroup>\n          )}\n        </Toolbar>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\nfunction TableBordersDropdownMenuContent(\n  props: React.ComponentProps<typeof DropdownMenuPrimitive.Content>\n) {\n  const editor = useEditorRef();\n  const {\n    getOnSelectTableBorder,\n    hasBottomBorder,\n    hasLeftBorder,\n    hasNoBorders,\n    hasOuterBorders,\n    hasRightBorder,\n    hasTopBorder,\n  } = useTableBordersDropdownMenuContentState();\n\n  return (\n    <DropdownMenuContent\n      className=\"min-w-[220px]\"\n      onCloseAutoFocus={(e) => {\n        e.preventDefault();\n        editor.tf.focus();\n      }}\n      align=\"start\"\n      side=\"right\"\n      sideOffset={0}\n      {...props}\n    >\n      <DropdownMenuGroup>\n        <DropdownMenuCheckboxItem\n          checked={hasTopBorder}\n          onCheckedChange={getOnSelectTableBorder('top')}\n        >\n          <BorderTopIcon />\n          <div>Top Border</div>\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={hasRightBorder}\n          onCheckedChange={getOnSelectTableBorder('right')}\n        >\n          <BorderRightIcon />\n          <div>Right Border</div>\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={hasBottomBorder}\n          onCheckedChange={getOnSelectTableBorder('bottom')}\n        >\n          <BorderBottomIcon />\n          <div>Bottom Border</div>\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={hasLeftBorder}\n          onCheckedChange={getOnSelectTableBorder('left')}\n        >\n          <BorderLeftIcon />\n          <div>Left Border</div>\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuGroup>\n\n      <DropdownMenuGroup>\n        <DropdownMenuCheckboxItem\n          checked={hasNoBorders}\n          onCheckedChange={getOnSelectTableBorder('none')}\n        >\n          <BorderNoneIcon />\n          <div>No Border</div>\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={hasOuterBorders}\n          onCheckedChange={getOnSelectTableBorder('outer')}\n        >\n          <BorderAllIcon />\n          <div>Outside Borders</div>\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuGroup>\n    </DropdownMenuContent>\n  );\n}\n\nfunction ColorDropdownMenu({\n  children,\n  tooltip,\n}: {\n  children: React.ReactNode;\n  tooltip: string;\n}) {\n  const [open, setOpen] = React.useState(false);\n\n  const editor = useEditorRef();\n  const selectedCells = usePluginOption(TablePlugin, 'selectedCells');\n\n  const onUpdateColor = React.useCallback(\n    (color: string) => {\n      setOpen(false);\n      setCellBackground(editor, { color, selectedCells: selectedCells ?? [] });\n    },\n    [selectedCells, editor]\n  );\n\n  const onClearColor = React.useCallback(() => {\n    setOpen(false);\n    setCellBackground(editor, {\n      color: null,\n      selectedCells: selectedCells ?? [],\n    });\n  }, [selectedCells, editor]);\n\n  return (\n    <DropdownMenu open={open} onOpenChange={setOpen} modal={false}>\n      <DropdownMenuTrigger asChild>\n        <ToolbarButton tooltip={tooltip}>{children}</ToolbarButton>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent align=\"start\">\n        <ToolbarMenuGroup label=\"Colors\">\n          <ColorDropdownMenuItems\n            className=\"px-2\"\n            colors={DEFAULT_COLORS}\n            updateColor={onUpdateColor}\n          />\n        </ToolbarMenuGroup>\n        <DropdownMenuGroup>\n          <DropdownMenuItem className=\"p-2\" onClick={onClearColor}>\n            <EraserIcon />\n            <span>Clear</span>\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nexport function TableRowElement(props: PlateElementProps<TTableRowElement>) {\n  const { element } = props;\n  const readOnly = useReadOnly();\n  const selected = useSelected();\n  const editor = useEditorRef();\n  const isSelectionAreaVisible = usePluginOption(\n    BlockSelectionPlugin,\n    'isSelectionAreaVisible'\n  );\n  const hasControls = !readOnly && !isSelectionAreaVisible;\n\n  const { isDragging, previewRef, handleRef } = useDraggable({\n    element,\n    type: element.type,\n    canDropNode: ({ dragEntry, dropEntry }) =>\n      PathApi.equals(\n        PathApi.parent(dragEntry[1]),\n        PathApi.parent(dropEntry[1])\n      ),\n    onDropHandler: (_, { dragItem }) => {\n      const dragElement = (dragItem as { element: TElement }).element;\n\n      if (dragElement) {\n        editor.tf.select(dragElement);\n      }\n    },\n  });\n\n  return (\n    <PlateElement\n      {...props}\n      ref={useComposedRef(props.ref, previewRef)}\n      as=\"tr\"\n      className={cn('group/row', isDragging && 'opacity-50')}\n      attributes={{\n        ...props.attributes,\n        'data-selected': selected ? 'true' : undefined,\n      }}\n    >\n      {hasControls && (\n        <td className=\"w-2 select-none\" contentEditable={false}>\n          <RowDragHandle dragRef={handleRef} />\n          <RowDropLine />\n        </td>\n      )}\n\n      {props.children}\n    </PlateElement>\n  );\n}\n\nfunction RowDragHandle({ dragRef }: { dragRef: React.Ref<any> }) {\n  const editor = useEditorRef();\n  const element = useElement();\n\n  return (\n    <Button\n      ref={dragRef}\n      variant=\"outline\"\n      className={cn(\n        'absolute top-1/2 left-0 z-51 h-6 w-4 -translate-y-1/2 p-0 focus-visible:ring-0 focus-visible:ring-offset-0',\n        'cursor-grab active:cursor-grabbing',\n        'opacity-0 transition-opacity duration-100 group-hover/row:opacity-100 group-has-data-[resizing=\"true\"]/row:opacity-0'\n      )}\n      onClick={() => {\n        editor.tf.select(element);\n      }}\n    >\n      <GripVertical className=\"text-muted-foreground\" />\n    </Button>\n  );\n}\n\nfunction RowDropLine() {\n  const { dropLine } = useDropLine();\n\n  if (!dropLine) return null;\n\n  return (\n    <div\n      className={cn(\n        'absolute inset-x-0 left-2 z-50 h-0.5 bg-brand/50',\n        dropLine === 'top' ? '-top-px' : '-bottom-px'\n      )}\n    />\n  );\n}\n\nexport function TableCellElement({\n  isHeader,\n  ...props\n}: PlateElementProps<TTableCellElement> & {\n  isHeader?: boolean;\n}) {\n  const { api } = useEditorPlugin(TablePlugin);\n  const readOnly = useReadOnly();\n  const element = props.element;\n\n  const tableId = useElementSelector(([node]) => node.id as string, [], {\n    key: KEYS.table,\n  });\n  const rowId = useElementSelector(([node]) => node.id as string, [], {\n    key: KEYS.tr,\n  });\n  const isSelectingTable = useBlockSelected(tableId);\n  const isSelectingRow = useBlockSelected(rowId) || isSelectingTable;\n  const isSelectionAreaVisible = usePluginOption(\n    BlockSelectionPlugin,\n    'isSelectionAreaVisible'\n  );\n\n  const { borders, colIndex, colSpan, minHeight, rowIndex, selected, width } =\n    useTableCellElement();\n\n  const { bottomProps, hiddenLeft, leftProps, rightProps } =\n    useTableCellElementResizable({\n      colIndex,\n      colSpan,\n      rowIndex,\n    });\n\n  return (\n    <PlateElement\n      {...props}\n      as={isHeader ? 'th' : 'td'}\n      className={cn(\n        'h-full overflow-visible border-none bg-background p-0',\n        element.background ? 'bg-(--cellBackground)' : 'bg-background',\n        isHeader && 'text-left *:m-0',\n        'before:size-full',\n        selected && 'before:z-10 before:bg-brand/5',\n        \"before:absolute before:box-border before:content-[''] before:select-none\",\n        borders.bottom?.size && `before:border-b before:border-b-border`,\n        borders.right?.size && `before:border-r before:border-r-border`,\n        borders.left?.size && `before:border-l before:border-l-border`,\n        borders.top?.size && `before:border-t before:border-t-border`\n      )}\n      style={\n        {\n          '--cellBackground': element.background,\n          maxWidth: width || 240,\n          minWidth: width || 120,\n        } as React.CSSProperties\n      }\n      attributes={{\n        ...props.attributes,\n        colSpan: api.table.getColSpan(element),\n        rowSpan: api.table.getRowSpan(element),\n      }}\n    >\n      <div\n        className=\"relative z-20 box-border h-full px-3 py-2\"\n        style={{ minHeight }}\n      >\n        {props.children}\n      </div>\n\n      {!isSelectionAreaVisible && (\n        <div\n          className=\"group absolute top-0 size-full select-none\"\n          contentEditable={false}\n          suppressContentEditableWarning={true}\n        >\n          {!readOnly && (\n            <>\n              <ResizeHandle\n                {...rightProps}\n                className=\"-top-2 -right-1 h-[calc(100%_+_8px)] w-2\"\n                data-col={colIndex}\n              />\n              <ResizeHandle {...bottomProps} className=\"-bottom-1 h-2\" />\n              {!hiddenLeft && (\n                <ResizeHandle\n                  {...leftProps}\n                  className=\"top-0 -left-1 w-2\"\n                  data-resizer-left={colIndex === 0 ? 'true' : undefined}\n                />\n              )}\n\n              <div\n                className={cn(\n                  'absolute top-0 z-30 hidden h-full w-1 bg-ring',\n                  'right-[-1.5px]',\n                  columnResizeVariants({ colIndex: colIndex as any })\n                )}\n              />\n              {colIndex === 0 && (\n                <div\n                  className={cn(\n                    'absolute top-0 z-30 h-full w-1 bg-ring',\n                    'left-[-1.5px]',\n                    'hidden animate-in fade-in group-has-[[data-resizer-left]:hover]/table:block group-has-[[data-resizer-left][data-resizing=\"true\"]]/table:block'\n                  )}\n                />\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      {isSelectingRow && (\n        <div className={blockSelectionVariants()} contentEditable={false} />\n      )}\n    </PlateElement>\n  );\n}\n\nexport function TableCellHeaderElement(\n  props: React.ComponentProps<typeof TableCellElement>\n) {\n  return <TableCellElement {...props} isHeader />;\n}\n\nconst columnResizeVariants = cva('hidden animate-in fade-in', {\n  variants: {\n    colIndex: {\n      0: 'group-has-[[data-col=\"0\"]:hover]/table:block group-has-[[data-col=\"0\"][data-resizing=\"true\"]]/table:block',\n      1: 'group-has-[[data-col=\"1\"]:hover]/table:block group-has-[[data-col=\"1\"][data-resizing=\"true\"]]/table:block',\n      2: 'group-has-[[data-col=\"2\"]:hover]/table:block group-has-[[data-col=\"2\"][data-resizing=\"true\"]]/table:block',\n      3: 'group-has-[[data-col=\"3\"]:hover]/table:block group-has-[[data-col=\"3\"][data-resizing=\"true\"]]/table:block',\n      4: 'group-has-[[data-col=\"4\"]:hover]/table:block group-has-[[data-col=\"4\"][data-resizing=\"true\"]]/table:block',\n      5: 'group-has-[[data-col=\"5\"]:hover]/table:block group-has-[[data-col=\"5\"][data-resizing=\"true\"]]/table:block',\n      6: 'group-has-[[data-col=\"6\"]:hover]/table:block group-has-[[data-col=\"6\"][data-resizing=\"true\"]]/table:block',\n      7: 'group-has-[[data-col=\"7\"]:hover]/table:block group-has-[[data-col=\"7\"][data-resizing=\"true\"]]/table:block',\n      8: 'group-has-[[data-col=\"8\"]:hover]/table:block group-has-[[data-col=\"8\"][data-resizing=\"true\"]]/table:block',\n      9: 'group-has-[[data-col=\"9\"]:hover]/table:block group-has-[[data-col=\"9\"][data-resizing=\"true\"]]/table:block',\n      10: 'group-has-[[data-col=\"10\"]:hover]/table:block group-has-[[data-col=\"10\"][data-resizing=\"true\"]]/table:block',\n    },\n  },\n});\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/ui/table-icons.tsx",
      "content": "'use client';\n\nimport type { LucideProps } from 'lucide-react';\n\nexport function BorderAllIcon(props: LucideProps) {\n  return (\n    <svg\n      fill=\"none\"\n      height=\"15\"\n      viewBox=\"0 0 15 15\"\n      width=\"15\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        clipRule=\"evenodd\"\n        d=\"M0.25 1C0.25 0.585786 0.585786 0.25 1 0.25H14C14.4142 0.25 14.75 0.585786 14.75 1V14C14.75 14.4142 14.4142 14.75 14 14.75H1C0.585786 14.75 0.25 14.4142 0.25 14V1ZM1.75 1.75V13.25H13.25V1.75H1.75Z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n      ></path>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"7\" y=\"5\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"7\" y=\"3\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"7\" y=\"7\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"5\" y=\"7\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"3\" y=\"7\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"9\" y=\"7\"></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"11\"\n        y=\"7\"\n      ></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"7\" y=\"9\"></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"7\"\n        y=\"11\"\n      ></rect>\n    </svg>\n  );\n}\n\nexport function BorderBottomIcon(props: LucideProps) {\n  return (\n    <svg\n      fill=\"none\"\n      height=\"15\"\n      viewBox=\"0 0 15 15\"\n      width=\"15\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        clipRule=\"evenodd\"\n        d=\"M1 13.25L14 13.25V14.75L1 14.75V13.25Z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n      ></path>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"7\" y=\"5\"></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"5\"\n      ></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"7\" y=\"3\"></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"3\"\n      ></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"7\" y=\"7\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"7\" y=\"1\"></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"7\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"1\"\n      ></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"5\" y=\"7\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"5\" y=\"1\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"3\" y=\"7\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"3\" y=\"1\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"9\" y=\"7\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"9\" y=\"1\"></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"11\"\n        y=\"7\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"11\"\n        y=\"1\"\n      ></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"7\" y=\"9\"></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"9\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"7\"\n        y=\"11\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"11\"\n      ></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"1\" y=\"5\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"1\" y=\"3\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"1\" y=\"7\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"1\" y=\"1\"></rect>\n      <rect fill=\"currentColor\" height=\"1\" rx=\".5\" width=\"1\" x=\"1\" y=\"9\"></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"1\"\n        y=\"11\"\n      ></rect>\n    </svg>\n  );\n}\n\nexport function BorderLeftIcon(props: LucideProps) {\n  return (\n    <svg\n      fill=\"none\"\n      height=\"15\"\n      viewBox=\"0 0 15 15\"\n      width=\"15\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        clipRule=\"evenodd\"\n        d=\"M1.75 1L1.75 14L0.249999 14L0.25 1L1.75 1Z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n      ></path>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 10 7)\"\n        width=\"1\"\n        x=\"10\"\n        y=\"7\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 10 13)\"\n        width=\"1\"\n        x=\"10\"\n        y=\"13\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 12 7)\"\n        width=\"1\"\n        x=\"12\"\n        y=\"7\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 12 13)\"\n        width=\"1\"\n        x=\"12\"\n        y=\"13\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 8 7)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"7\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 14 7)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"7\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 8 13)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"13\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 14 13)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"13\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 8 5)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"5\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 14 5)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"5\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 8 3)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"3\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 14 3)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"3\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 8 9)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"9\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 14 9)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"9\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 8 11)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"11\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 14 11)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"11\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 6 7)\"\n        width=\"1\"\n        x=\"6\"\n        y=\"7\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 6 13)\"\n        width=\"1\"\n        x=\"6\"\n        y=\"13\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 4 7)\"\n        width=\"1\"\n        x=\"4\"\n        y=\"7\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 4 13)\"\n        width=\"1\"\n        x=\"4\"\n        y=\"13\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 10 1)\"\n        width=\"1\"\n        x=\"10\"\n        y=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 12 1)\"\n        width=\"1\"\n        x=\"12\"\n        y=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 8 1)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 14 1)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 6 1)\"\n        width=\"1\"\n        x=\"6\"\n        y=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(90 4 1)\"\n        width=\"1\"\n        x=\"4\"\n        y=\"1\"\n      ></rect>\n    </svg>\n  );\n}\n\nexport function BorderNoneIcon(props: LucideProps) {\n  return (\n    <svg\n      fill=\"none\"\n      height=\"15\"\n      viewBox=\"0 0 15 15\"\n      width=\"15\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"7\"\n        y=\"5.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"5.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"7\"\n        y=\"3.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"3.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"7\"\n        y=\"7.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"7\"\n        y=\"13.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"7\"\n        y=\"1.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"7.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"13.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"1.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"5\"\n        y=\"7.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"5\"\n        y=\"13.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"5\"\n        y=\"1.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"3\"\n        y=\"7.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"3\"\n        y=\"13.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"3\"\n        y=\"1.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"9\"\n        y=\"7.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"9\"\n        y=\"13.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"9\"\n        y=\"1.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"11\"\n        y=\"7.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"11\"\n        y=\"13.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"11\"\n        y=\"1.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"7\"\n        y=\"9.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"9.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"7\"\n        y=\"11.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"13\"\n        y=\"11.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"1\"\n        y=\"5.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"1\"\n        y=\"3.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"1\"\n        y=\"7.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"1\"\n        y=\"13.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"1\"\n        y=\"1.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"1\"\n        y=\"9.025\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        width=\"1\"\n        x=\"1\"\n        y=\"11.025\"\n      ></rect>\n    </svg>\n  );\n}\n\nexport function BorderRightIcon(props: LucideProps) {\n  return (\n    <svg\n      fill=\"none\"\n      height=\"15\"\n      viewBox=\"0 0 15 15\"\n      width=\"15\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        clipRule=\"evenodd\"\n        d=\"M13.25 1L13.25 14L14.75 14L14.75 1L13.25 1Z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n      ></path>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 5 7)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 5 13)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 3 7)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 3 13)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 7 7)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 1 7)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 7 13)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 1 13)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 7 5)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 1 5)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 7 3)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 1 3)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 7 9)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 1 9)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 7 11)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 1 11)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 9 7)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 9 13)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 11 7)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 11 13)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 5 1)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 3 1)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 7 1)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 1 1)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 9 1)\"\n        width=\"1\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"matrix(0 1 1 0 11 1)\"\n        width=\"1\"\n      ></rect>\n    </svg>\n  );\n}\n\nexport function BorderTopIcon(props: LucideProps) {\n  return (\n    <svg\n      fill=\"none\"\n      height=\"15\"\n      viewBox=\"0 0 15 15\"\n      width=\"15\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        clipRule=\"evenodd\"\n        d=\"M14 1.75L1 1.75L1 0.249999L14 0.25L14 1.75Z\"\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n      ></path>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 8 10)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"10\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 2 10)\"\n        width=\"1\"\n        x=\"2\"\n        y=\"10\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 8 12)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"12\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 2 12)\"\n        width=\"1\"\n        x=\"2\"\n        y=\"12\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 8 8)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"8\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 8 14)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"14\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 2 8)\"\n        width=\"1\"\n        x=\"2\"\n        y=\"8\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 2 14)\"\n        width=\"1\"\n        x=\"2\"\n        y=\"14\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 10 8)\"\n        width=\"1\"\n        x=\"10\"\n        y=\"8\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 10 14)\"\n        width=\"1\"\n        x=\"10\"\n        y=\"14\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 12 8)\"\n        width=\"1\"\n        x=\"12\"\n        y=\"8\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 12 14)\"\n        width=\"1\"\n        x=\"12\"\n        y=\"14\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 6 8)\"\n        width=\"1\"\n        x=\"6\"\n        y=\"8\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 6 14)\"\n        width=\"1\"\n        x=\"6\"\n        y=\"14\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 4 8)\"\n        width=\"1\"\n        x=\"4\"\n        y=\"8\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 4 14)\"\n        width=\"1\"\n        x=\"4\"\n        y=\"14\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 8 6)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"6\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 2 6)\"\n        width=\"1\"\n        x=\"2\"\n        y=\"6\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 8 4)\"\n        width=\"1\"\n        x=\"8\"\n        y=\"4\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 2 4)\"\n        width=\"1\"\n        x=\"2\"\n        y=\"4\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 14 10)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"10\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 14 12)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"12\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 14 8)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"8\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 14 14)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"14\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 14 6)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"6\"\n      ></rect>\n      <rect\n        fill=\"currentColor\"\n        height=\"1\"\n        rx=\".5\"\n        transform=\"rotate(-180 14 4)\"\n        width=\"1\"\n        x=\"14\"\n        y=\"4\"\n      ></rect>\n    </svg>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/ui/table-node-static.tsx",
      "content": "import * as React from 'react';\n\nimport type {\n  SlateElementProps,\n  TTableCellElement,\n  TTableElement,\n} from 'platejs';\n\nimport { BaseTablePlugin } from '@platejs/table';\nimport { SlateElement } from 'platejs';\n\nimport { cn } from '@/lib/utils';\n\nexport function TableElementStatic({\n  children,\n  ...props\n}: SlateElementProps<TTableElement>) {\n  const { disableMarginLeft } = props.editor.getOptions(BaseTablePlugin);\n  const marginLeft = disableMarginLeft ? 0 : props.element.marginLeft;\n\n  return (\n    <SlateElement\n      {...props}\n      className=\"overflow-x-auto py-5\"\n      style={{ paddingLeft: marginLeft }}\n    >\n      <div className=\"group/table relative w-fit\">\n        <table className=\"mr-0 ml-px table h-px table-fixed border-collapse\">\n          <tbody className=\"min-w-full\">{children}</tbody>\n        </table>\n      </div>\n    </SlateElement>\n  );\n}\n\nexport function TableRowElementStatic(props: SlateElementProps) {\n  return (\n    <SlateElement {...props} as=\"tr\" className=\"h-full\">\n      {props.children}\n    </SlateElement>\n  );\n}\n\nexport function TableCellElementStatic({\n  isHeader,\n  ...props\n}: SlateElementProps<TTableCellElement> & {\n  isHeader?: boolean;\n}) {\n  const { editor, element } = props;\n  const { api } = editor.getPlugin(BaseTablePlugin);\n\n  const { minHeight, width } = api.table.getCellSize({ element });\n  const borders = api.table.getCellBorders({ element });\n\n  return (\n    <SlateElement\n      {...props}\n      as={isHeader ? 'th' : 'td'}\n      className={cn(\n        'h-full overflow-visible border-none bg-background p-0',\n        element.background ? 'bg-(--cellBackground)' : 'bg-background',\n        isHeader && 'text-left font-normal *:m-0',\n        'before:size-full',\n        \"before:absolute before:box-border before:content-[''] before:select-none\",\n        borders &&\n          cn(\n            borders.bottom?.size && `before:border-b before:border-b-border`,\n            borders.right?.size && `before:border-r before:border-r-border`,\n            borders.left?.size && `before:border-l before:border-l-border`,\n            borders.top?.size && `before:border-t before:border-t-border`\n          )\n      )}\n      style={\n        {\n          '--cellBackground': element.background,\n          maxWidth: width || 240,\n          minWidth: width || 120,\n        } as React.CSSProperties\n      }\n      attributes={{\n        ...props.attributes,\n        colSpan: api.table.getColSpan(element),\n        rowSpan: api.table.getRowSpan(element),\n      }}\n    >\n      <div\n        className=\"relative z-20 box-border h-full px-4 py-2\"\n        style={{ minHeight }}\n      >\n        {props.children}\n      </div>\n    </SlateElement>\n  );\n}\n\nexport function TableCellHeaderElementStatic(\n  props: SlateElementProps<TTableCellElement>\n) {\n  return <TableCellElementStatic {...props} isHeader />;\n}\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "docs": [
      {
        "route": "/docs/table"
      },
      {
        "route": "https://pro.platejs.org/docs/components/table-node"
      }
    ],
    "examples": [
      "table-demo"
    ]
  }
}