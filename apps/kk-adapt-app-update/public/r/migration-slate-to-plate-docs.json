{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "migration-slate-to-plate-docs",
  "type": "registry:file",
  "title": "Migrating from Slate to Plate",
  "description": "Learn how to migrate from Slate to Plate.",
  "files": [
    {
      "path": "../../docs/migration/slate-to-plate.mdx",
      "content": "---\ntitle: Migrating from Slate to Plate\ndescription: Learn how to migrate from Slate to Plate.\n---\n\nPlate is built on top of Slate, so migrating from a pure Slate implementation to Plate is relatively straightforward. This guide will help you transition your Slate-based editor to Plate.\n\n## 1. Install Plate\n\nFirst, install the necessary Plate packages. If you're new to Plate, you might want to start by reading the [Introduction](/docs/installation) to get an overview of the library.\n\n```bash\nnpm install platejs\n```\n\n## 2. Replace Slate Imports\n\nReplace your Slate imports with Plate imports. Plate re-exports most Slate types and functions:\n\n```ts\n// Before\nimport { createEditor } from 'slate';\nimport { Slate, Editable, withReact } from 'slate-react';\n\n// After\nimport { createPlateEditor, Plate, PlateContent } from 'platejs/react';\n```\n\n## 3. Create a Plate Editor\n\nReplace `createEditor`, `withHistory` and `withReact` with `createPlateEditor`:\n\n```ts\n// Before\nconst editor = useMemo(() => withReact(withHistory(createEditor()))), []);\n\n// After\nconst editor = createPlateEditor({\n  value,\n  plugins: [\n    // Additional plugins here\n  ],\n});\n```\n\nFor more details on editor configuration, check out the [Editor Configuration guide](/docs/editor).\n\n## 4. Replace Slate and Editable Components\n\nReplace the `Slate` and `Editable` components with Plate's `Plate` component:\n\n```tsx\n// Before\n<Slate editor={editor} value={value}>\n  <Editable className=\"p-4\" />\n</Slate>\n\n// After\n<Plate editor={editor}>\n  <PlateContent className=\"p-4\" />\n</Plate>\n```\n\n## 5. Convert Custom Elements and Leaves\n\nFor custom elements and leaves, create Plate plugins:\n\n```tsx\n// Before\nconst renderElement = useCallback(({ attributes, children, element }) => {\n  switch (element.type) {\n    case 'paragraph':\n      return <p {...attributes}>{children}</p>;\n    // ... other cases\n  }\n}, []);\n\n// After\nimport { type PlateElement, type PlateElementProps } from 'platejs/react';\nimport { cn } from '@/lib/utils';\n\nexport function ParagraphElement(props: PlateElementProps) {\n  return (\n    <PlateElement {...props} className=\"m-0 px-0 py-1'\">\n      {props.children}\n    </PlateElement>\n  );\n}\n\nconst ParagraphPlugin = createPlatePlugin({\n  key: 'p',\n  node: {\n    isElement: true,\n    type: 'paragraph',\n    component: ParagraphElement,\n  },\n});\n```\n\nLearn more about creating plugins in the [Plugin Configuration guide](/docs/plugin) and [Plugin Components guide](/docs/plugin-components).\n\n## 6. Convert Slate Plugins to Plate Plugins\n\nIf you have custom Slate plugins, convert them to Plate plugins:\n\n```ts\n// Before\nconst withMyPlugin = (editor) => {\n  const { insertText } = editor;\n  editor.insertText = (text) => {\n    // Custom logic\n    insertText(text);\n  };\n  return editor;\n};\n\n// After\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).overrideEditor(({ editor, tf: { insertText } }) => ({\n  transforms: {\n    insertText(text, options) {\n      // Custom logic\n      insertText(text, options);\n    },\n  }\n}));\n\n// For adding new methods:\nconst MyOtherPlugin = createPlatePlugin({\n  key: 'myOtherPlugin',\n}).extendEditorTransforms(({ editor }) => ({\n  newMethod(text) {\n    // Add new functionality\n  }\n}));\n```\n\nFor more information on working with the plugin context, see the [Plugin Context guide](/docs/plugin-context).\n\n## 7. Update Event Handlers\n\nUpdate your event handlers to use Plate's plugin system:\n\n```ts\n// Before\nconst onKeyDown = (event) => {\n  if (event.key === 'Tab') {\n    // Handle tab\n  }\n};\n\n// After\nconst TabPlugin = createPlatePlugin({\n  key: 'tab',\n  handlers: {\n    onKeyDown: ({ editor, event }) => {\n      if (event.key === 'Tab') {\n        // Handle tab\n      }\n    },\n  },\n});\n```\n\nAlternatively, you can use Plate's powerful shortcuts system:\n\n```ts\nconst TabPlugin = createPlatePlugin({\n  key: 'tab',\n  shortcuts: {\n    indent: {\n      handler: ({ editor }) => {\n        // Handle tab\n      },\n      keys: ['Tab'],\n    },\n  },\n});\n```\n\nFor more details on using shortcuts, check out the [Plugin Shortcuts guide](/docs/plugin-shortcuts).\n\n## 8. Adapt to Plate's API\n\nFamiliarize yourself with Plate's API and use its utilities and hooks:\n\n```ts\n// Using Plate's transforms\neditor.tf.toggleMark('bold');\n\n// Using Plate's debug API\neditor.api.debug.log('Hello, Plate!');\n```\n\nFor a comprehensive list of editor methods, see the [Editor Methods guide](/docs/editor-methods).\n\n## 9. Leverage Plate's Built-in Plugins\n\nPlate comes with many built-in plugins that you can see in the sidebar. Use them to quickly add functionality:\n\n```ts\nimport { BoldPlugin, ItalicPlugin, UnderlinePlugin } from 'platejs/react';\n\nconst plugins = [\n  BoldPlugin,\n  ItalicPlugin,\n  UnderlinePlugin,\n  // ... other plugins\n];\n\nconst editor = createPlateEditor({ plugins });\n```\n\n## 10. Testing and Refinement\n\nAfter migrating, thoroughly test your editor to ensure all functionality works as expected. Refine and optimize your implementation using Plate's features and best practices.\n\nFor debugging tips and strategies, check out our [Debugging guide](/docs/debugging).",
      "type": "registry:file",
      "target": "content/docs/plate/migration/slate-to-plate.mdx"
    }
  ]
}