{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "api-core-plate-editor-docs",
  "type": "registry:file",
  "title": "Plate Editor",
  "description": "API reference for Plate editor.",
  "files": [
    {
      "path": "../../docs/api/core/plate-editor.mdx",
      "content": "---\ntitle: Plate Editor\ndescription: API reference for Plate editor.\n---\n\nA custom editor interface that extends the base **`Editor`** interface and includes additional properties and methods specific to the Plate library.\n\n## Core Properties\n\n<API name=\"Properties\">\n<APIAttributes>\n  <APIItem name=\"id\" type=\"any\">\n    A unique identifier for the editor.\n  </APIItem>\n  <APIItem name=\"dom\" type=\"object\">\n    An object containing the DOM state of the editor.\n    <APISubList>\n      <APISubListItem parent=\"dom\" name=\"composing\" type=\"boolean\">\n        Whether the editor is currently composing text (e.g., during IME input).\n      </APISubListItem>\n      <APISubListItem parent=\"dom\" name=\"currentKeyboardEvent\" type=\"KeyboardEventLike | null\">\n        The current keyboard event being processed by the editor, or null if no event is being processed.\n      </APISubListItem>\n      <APISubListItem parent=\"dom\" name=\"focused\" type=\"boolean\">\n        Whether the editor currently has focus.\n      </APISubListItem>\n      <APISubListItem parent=\"dom\" name=\"prevSelection\" type=\"TRange | null\">\n        The previous selection range in the editor.\n      </APISubListItem>\n      <APISubListItem parent=\"dom\" name=\"readOnly\" type=\"boolean\">\n        Whether the editor is in read-only mode.\n      </APISubListItem>\n    </APISubList>\n  </APIItem>\n  <APIItem name=\"plugins\" type=\"Record<string, AnyEditorPlatePlugin>\">\n    A record of plugins indexed by their keys.\n  </APIItem>\n  <APIItem name=\"meta\" type=\"object\">\n    An object containing editor metadata, often derived from plugins or editor configuration.\n    <APISubList>\n      <APISubListItem parent=\"meta\" name=\"components\" type=\"Record<string, React.FC<any>>\">\n        Plugin components indexed by their keys.\n      </APISubListItem>\n      <APISubListItem parent=\"meta\" name=\"node.isContainer\" type=\"string[]\">\n        Plugin keys with `plugin.node.isContainer = true`.\n      </APISubListItem>\n      <APISubListItem parent=\"meta\" name=\"isFallback\" type=\"boolean\">\n        Whether the editor is a fallback editor.\n        \n        - **Default:** `false`\n      </APISubListItem>\n      <APISubListItem parent=\"meta\" name=\"isNormalizing\" type=\"boolean\">\n        Whether the editor is currently normalizing nodes.\n        \n        - **Default:** `false`\n      </APISubListItem>\n      <APISubListItem parent=\"meta\" name=\"key\" type=\"any\">\n        A key that can be used to uniquely identify the editor.\n      </APISubListItem>\n      <APISubListItem parent=\"meta\" name=\"pluginList\" type=\"AnyEditorPlatePlugin[]\">\n        An array of plugins that are currently being used by the editor.\n      </APISubListItem>\n      <APISubListItem parent=\"meta\" name=\"shortcuts\" type=\"Record<string, any>\">\n        Editor shortcuts configuration indexed by shortcut names.\n      </APISubListItem>\n      <APISubListItem parent=\"meta\" name=\"uid\" type=\"any\">\n        A stable unique identifier that remains consistent from RSC to client hydration.\n      </APISubListItem>\n    </APISubList>\n  </APIItem>\n</APIAttributes>\n</API>\n## API Methods\n\n<API name=\"API\">\n<APIMethods>\n  <APIItem name=\"getApi\" type=\"(plugin: PlatePlugin) => EditorApi & PlatePlugin['api']\">\n    Retrieve the typed API for a plugin.\n  </APIItem>\n  <APIItem name=\"getTransforms\" type=\"(plugin: PlatePlugin) => EditorTransforms & PlatePlugin['transforms']\">\n    Get the typed transforms for a plugin.\n  </APIItem>\n  <APIItem name=\"getPlugin\" type=\"(plugin: PlatePlugin) => PlatePlugin\">\n    Retrieve the editor plugin instance by its key or base plugin.\n  </APIItem>\n  <APIItem name=\"getType\" type=\"(plugin: PlatePlugin) => string\">\n    Get the node type associated with a plugin.\n  </APIItem>\n  <APIItem name=\"init\" type=\"(options: InitOptions) => void\">\n    Initialize the editor value, selection, and normalization. Accepts options for auto-select, selection, normalization, value, and an `onReady` callback that provides context on initialization completion.\n  </APIItem>\n</APIMethods>\n</API>\n\n## Option Methods\n\n<API name=\"Options\">\n<APIMethods>\n  <APIItem name=\"getOption\" type=\"(plugin: PlatePlugin, optionKey: string) => any\">\n    Get a specific option value for a plugin.\n  </APIItem>\n  <APIItem name=\"getOptions\" type=\"(plugin: PlatePlugin) => any\">\n    Get all options for a plugin.\n  </APIItem>\n  <APIItem name=\"setOption\" type=\"(plugin: PlatePlugin, optionKey: string, value: any) => void\">\n    Set a specific option value for a plugin.\n  </APIItem>\n  <APIItem name=\"setOptions\" type=\"(plugin: PlatePlugin, options: (draft: object) => void | Partial<object>) => void\">\n    Set multiple options for a plugin.\n  </APIItem>\n  <APIItem name=\"getOptionsStore\" type=\"(plugin: PlatePlugin) => any\">\n    Get the zustand-x options store for a plugin.\n  </APIItem>\n</APIMethods>\n</API>\n\n## Core Plugin APIs\n\n### `DebugPlugin`\n\n<API name=\"DebugPlugin\">\n<APIListAPI>\n  <APIItem name=\"editor.api.debug.log\" type=\"(...args: any[]) => void\">\n    Log a message at the 'log' level.\n  </APIItem>\n  <APIItem name=\"editor.api.debug.info\" type=\"(...args: any[]) => void\">\n    Log a message at the 'info' level.\n  </APIItem>\n  <APIItem name=\"editor.api.debug.warn\" type=\"(...args: any[]) => void\">\n    Log a message at the 'warn' level.\n  </APIItem>\n  <APIItem name=\"editor.api.debug.error\" type=\"(...args: any[]) => void\">\n    Log a message at the 'error' level.\n  </APIItem>\n</APIListAPI>\n</API>\n\n### `HtmlPlugin`\n\n<API name=\"HtmlPlugin\">\n<APIListAPI>\n  <APIItem name=\"editor.api.html.deserialize\" type=\"(options: { element: HTMLElement }) => Descendant[]\">\n    Deserialize HTML content into Plate nodes.\n  </APIItem>\n</APIListAPI>\n</API>\n\n### `ReactPlugin`\n\n<API name=\"ReactPlugin\">\n<APITransforms>\n  <APIItem name=\"editor.tf.reset\" type=\"() => void\">\n    Reset the editor state while maintaining focus if the editor was focused.\n  </APIItem>\n</APITransforms>\n</API>\n\n### `SlateReactExtensionPlugin`\n\n<API name=\"SlateReactExtensionPlugin\">\n<APIListAPI>\n  <APIItem name=\"editor.api.redecorate\" type=\"() => void\">\n    Redecorate the editor.\n  </APIItem>\n</APIListAPI>\n\n<APITransforms>\n  <APIItem name=\"editor.tf.setValue\" type=\"(value: Value) => void\">\n    Replace the editor value. See [Controlled Value](/docs/controlled) for more information.\n  </APIItem>\n</APITransforms>\n\n\n</API>\n",
      "type": "registry:file",
      "target": "content/docs/plate/api/core/plate-editor.mdx"
    }
  ]
}