{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "installation-node-docs",
  "type": "registry:file",
  "title": "Node.js",
  "description": "Install and configure Plate for Node.js",
  "files": [
    {
      "path": "../../docs/installation/node.mdx",
      "content": "---\ntitle: Node.js\ndescription: Install and configure Plate for Node.js\n---\n\nThis guide demonstrates how to use Plate in a Node.js environment. This is useful for backend tasks such as data processing, content migration, validation, or any scenario where you need to interact with Plate editor content without a browser or a full React frontend.\n\n<Callout type=\"warning\" title=\"Key Node.js Constraint\">\n  When using Plate in a Node.js environment, you **must not** import from `/react` subpaths of any `platejs*` package. Always use the base imports (e.g., `@platejs/basic-nodes` instead of `@platejs/basic-nodes/react`).\n\n  This means you cannot use `createPlateEditor` from `platejs/react`. Instead, use `createSlateEditor` from `platejs`.\n</Callout>\n\n<Steps>\n\n### Install Plate\n\nInstall the core Plate package and any specific plugin packages required for your data processing needs.\n\n```bash\nnpm install platejs @platejs/basic-nodes\n```\n\n-   `platejs`: The core Plate editor functionality.\n-   `@platejs/basic-nodes`: Plugin for basic nodes like headings, bold, italic, underline, etc.\n\n### Create an Editor Instance\n\nIn your Node.js script, use `createSlateEditor` from `platejs` to initialize an editor instance. This function is framework-agnostic and doesn't depend on React or browser APIs.\n\n```typescript title=\"scripts/process-content.ts\"\nimport { createSlateEditor } from 'platejs';\nimport {\n  BaseBoldPlugin,\n  BaseItalicPlugin,\n  BaseUnderlinePlugin,\n  BaseH1Plugin,\n  BaseH2Plugin,\n  BaseH3Plugin,\n  BaseBlockquotePlugin,\n} from '@platejs/basic-nodes';\n\nconst initialValue = [\n  {\n    type: 'h3',\n    children: [{ text: 'Document Title' }],\n  },\n  {\n    type: 'blockquote',\n    children: [{ text: 'This is a quote.' }],\n  },\n  {\n    type: 'p',\n    children: [\n      { text: 'With some ' },\n      { text: 'bold', bold: true },\n      { text: ' text for emphasis!' },\n    ],\n  },\n];\n\nconst editor = createSlateEditor({\n  plugins: [\n    BaseBoldPlugin,\n    BaseItalicPlugin,\n    BaseUnderlinePlugin,\n    BaseH1Plugin,\n    BaseH2Plugin,\n    BaseH3Plugin,\n    BaseBlockquotePlugin,\n  ],\n  value: initialValue,\n});\n\n// You can now use editor.children, editor.api, editor.tf, etc.\nconsole.debug('Editor content:', editor.children);\n```\n\n<Callout type=\"info\">\n  `createSlateEditor` creates a raw Plate editor instance suitable for server-side logic, data transformation, or preparing content for static rendering. It provides the same API as the React version but without browser dependencies.\n</Callout>\n\n### Content Manipulation\n\nThe primary use case for Plate in Node.js is programmatic content manipulation:\n\n```typescript title=\"scripts/transform-content.ts\"\nimport { createSlateEditor } from 'platejs';\nimport {\n  BaseBoldPlugin,\n  BaseItalicPlugin,\n  BaseH1Plugin,\n  BaseH2Plugin,\n  BaseH3Plugin,\n  BaseBlockquotePlugin,\n} from '@platejs/basic-nodes';\n\nasync function processDocument(value: any[]) {\n  const editor = createSlateEditor({\n    plugins: [\n      BaseBoldPlugin,\n      BaseItalicPlugin,\n      BaseH1Plugin,\n      BaseH2Plugin,\n      BaseH3Plugin,\n      BaseBlockquotePlugin,\n    ],\n    value,\n  });\n\n  // Extract text content\n  const textContent = editor.api.string([]);\n  console.debug('Extracted Text:', textContent);\n\n  // Transform all H1s to H2s\n  editor.tf.setNodes(\n    { type: 'h2' },\n    { at: [], match: (n) => n.type === 'h1' }\n  );\n\n  // Add a new paragraph at the end\n  editor.tf.insertNodes(\n    [{ type: 'p', children: [{ text: 'Added by Node.js script!' }] }],\n    { at: [editor.children.length] }\n  );\n\n  return {\n    textContent,\n    transformedValue: editor.children,\n  };\n}\n\n// Example usage\nconst mySlateValue = [\n  { type: 'h1', children: [{ text: 'Original Document Title' }] },\n  { type: 'p', children: [{ text: 'Some paragraph content.' }] },\n  {\n    type: 'p',\n    children: [\n      { text: 'Text with ' },\n      { text: 'bold', bold: true },\n      { text: ' formatting.' },\n    ],\n  },\n];\n\nprocessDocument(mySlateValue).then(result => {\n  console.debug('Processing complete:', result);\n});\n```\n\n### Available APIs\n\n-   **[`editor.api`](/docs/api/slate/editor-api)**: Access various utility functions for querying the editor state:\n    -   `editor.api.nodes({ at: [], match })`: Find specific nodes\n    -   `editor.api.string([])`: Extract text content\n    -   [HTML Serialization](/docs/html)\n    -   [Markdown Serialization](/docs/markdown)\n\n-   **[`editor.tf`](/docs/api/slate/editor-transforms)**: Use transform functions to modify the editor content:\n    -   `editor.tf.insertNodes(nodes, opts)`: Insert new nodes\n    -   `editor.tf.removeNodes(opts)`: Delete nodes\n    -   `editor.tf.setNodes(props, opts)`: Update properties of existing nodes\n    -   `editor.tf.normalize({ force: true })`: Normalize the editor\n\n</Steps>\n\n### Next Steps\n\nWith Plate configured in your Node.js environment, you can now:\n\n*   **Build Content Pipelines:** Create scripts for migrating content from other systems into Plate format\n*   **Bulk Operations:** Perform bulk updates or transformations on your existing Plate documents\n*   **Data Extraction:** Validate content structure or extract specific data from your documents\n*   **Backend Integration:** Integrate with other backend services for content processing pipelines\n*   **Static Generation:** Explore [Markdown Serialization](/docs/markdown), [HTML Serialization](/docs/html), and [`PlateStatic`](/docs/plate-static) for generating static content",
      "type": "registry:file",
      "target": "content/docs/plate/installation/node.mdx"
    }
  ]
}