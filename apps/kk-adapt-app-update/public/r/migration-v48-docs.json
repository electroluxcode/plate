{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "migration-v48-docs",
  "type": "registry:file",
  "title": "Major Releases",
  "description": "Documentation for Major Releases",
  "files": [
    {
      "path": "../../docs/migration/v48.mdx",
      "content": "---\ntitle: Major Releases\n---\n\n<Callout type=\"info\">\n  This page covers **major breaking changes** for Plate up to v48. For the latest migration guide, see [Latest Migration](/docs/migration). For patch and minor changes, refer to the individual package `CHANGELOG.md` files or visit the [GitHub Releases](https://github.com/udecode/plate/releases) page.\n</Callout>\n\n# 48.0.0\n\n## @udecode/plate-core@48.0.0\n\n- [#4281](https://github.com/udecode/plate/pull/4281) by [@zbeyens](https://github.com/zbeyens) –\n\n  - `PlateElement`, `PlateLeaf` and `PlateText` HTML attributes are moved from top-level props to `attributes` prop, except `className`, `style` and `as`. Migration:\n\n  ```tsx\n  // From\n  <PlateElement\n    {...props}\n    ref={ref}\n    contentEditable={false}\n  >\n    {children}\n  </PlateElement>\n\n  // To\n  <PlateElement\n    {...props}\n    ref={ref}\n    attributes={{\n      ...props.attributes,\n      contentEditable: false,\n    }}\n  >\n    {children}\n  </PlateElement>\n  ```\n\n  - Remove `nodeProps` prop from `PlateElement`, `PlateLeaf`, `PlateText`. It has been merged into `attributes` prop.\n  - Plugin `node.props` should return the props directly instead of inside `nodeProps` object. Migration:\n\n  ```ts\n  // From\n  node: {\n    props: ({ element }) => ({\n      nodeProps: {\n        colSpan: element?.attributes?.colspan,\n        rowSpan: element?.attributes?.rowspan,\n      },\n    });\n  }\n\n  // To\n  node: {\n    props: ({ element }) => ({\n      colSpan: element?.attributes?.colspan,\n      rowSpan: element?.attributes?.rowspan,\n    });\n  }\n  ```\n\n  - Remove `asChild` prop from `PlateElement`, `PlateLeaf`, `PlateText`. Use `as` prop instead.\n  - Remove `elementToAttributes`, `leafToAttributes`, `textToAttributes` props from `PlateElement`, `PlateLeaf`, `PlateText`.\n  - Remove `DefaultElement`, `DefaultLeaf`, `DefaultText`. Use `PlateElement`, `PlateLeaf`, `PlateText` instead.\n  - Types: remove `PlateRenderElementProps`, `PlateRenderLeafProps`, `PlateRenderTextProps`. Use `PlateElementProps`, `PlateLeafProps`, `PlateTextProps` instead.\n\n## @udecode/plate-utils@48.0.0\n\n- [#4281](https://github.com/udecode/plate/pull/4281) by [@zbeyens](https://github.com/zbeyens) –\n  - Moved `PlateElement`, `PlateLeaf`, `PlateText` to `@udecode/plate-core`. No migration needed if you're importing from `@udecode/plate`.\n\n## @udecode/plate-yjs@48.0.0\n\n- [#4225](https://github.com/udecode/plate/pull/4225) by [@bbyiringiro](<https://github.com/[bbyiringiro](https://github.com/bbyiringiro)>) –\n\n  - Add multi-provider support for improved collaboration: now supports both Hocuspocus and WebRTC simultaneously using a shared Y.Doc.\n    - **Migration**: Replace `hocuspocusProviderOptions` with the new `providers` array. See examples below.\n\n  **Before:**\n\n  ```tsx\n  YjsPlugin.configure({\n    options: {\n      cursorOptions: {\n        /* ... */\n      },\n      hocuspocusProviderOptions: {\n        url: 'wss://hocuspocus.example.com',\n        name: 'document-1',\n        // ... other Hocuspocus options\n      },\n    },\n  });\n  ```\n\n  **After (Hocuspocus only):**\n\n  ```tsx\n  YjsPlugin.configure({\n    options: {\n      cursors: {\n        /* ... */\n      },\n      providers: [\n        {\n          type: 'hocuspocus',\n          options: {\n            url: 'wss://hocuspocus.example.com',\n            name: 'document-1',\n            // ... other Hocuspocus options\n          },\n        },\n      ],\n    },\n  });\n  ```\n\n  **After (Hocuspocus + WebRTC):**\n\n  ```tsx\n  YjsPlugin.configure({\n    options: {\n      cursors: {\n        /* ... */\n      },\n      providers: [\n        {\n          type: 'hocuspocus',\n          options: {\n            url: 'wss://hocuspocus.example.com',\n            name: 'document-1',\n          },\n        },\n        {\n          type: 'webrtc',\n          options: {\n            roomName: 'document-1',\n            // signaling: ['wss://signaling.example.com'], // Optional\n          },\n        },\n      ],\n    },\n  });\n  ```\n\n  - Introduces `UnifiedProvider` interface that enables custom provider implementations (e.g., IndexedDB for offline persistence).\n  - Renamed `cursorOptions` to `cursors`.\n  - Merged `yjsOptions` into `options`.\n    - **Migration**: Move options previously under `yjsOptions` directly into the main `options` object.\n  - Removed `YjsAboveEditable`. You should now call `init` and `destroy` manually:\n\n  ```tsx\n  React.useEffect(() => {\n    if (!mounted) return;\n\n    // Initialize Yjs connection and sync\n    editor.getApi(YjsPlugin).yjs.init({\n      id: roomName, // Or your document identifier\n      value: INITIAL_VALUE, // Your initial editor content\n    });\n\n    // Destroy connection on component unmount\n    return () => {\n      editor.getApi(YjsPlugin).yjs.destroy();\n    };\n  }, [editor, mounted, roomName]); // Add relevant dependencies\n  ```\n\n# 47.0.0\n\n## @udecode/plate-markdown\n\n- [#4174](https://github.com/udecode/plate/pull/4174) by [@felixfeng33](https://github.com/felixfeng33) – #### New Features\n\n  - Added support for math type deserialization\n  - Added default underline mark serialization as `<u>underline</u>`\n  - Improved serialization process:\n    - Now uses a two-step process: `slate nodes => MDAST nodes => markdown string`\n    - Previously: direct conversion from Slate nodes to markdown string\n    - Results in more reliable and robust serialization\n  - New node filtering options:\n    - `allowedNodes`: Whitelist specific nodes\n    - `disallowedNodes`: Blacklist specific nodes\n    - `allowNode`: Custom function to filter nodes\n  - New `rules` option for customizing serialization and deserialization rules, including **custom mdx** support\n  - New `remarkPlugins` option to use [remark plugins](https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins)\n\n  #### Breaking Changes\n\n  **Plugin Options**\n\n  Removed options:\n\n  - `elementRules` use `rules` instead\n  - `textRules` use `rules` instead\n  - `indentList` now automatically detects if the IndentList plugin is used\n  - `splitLineBreaks` deserialize only\n\n  ##### Deserialization\n\n  - Removed `elementRules` and `textRules` options\n    - Use `rules.key.deserialize` instead\n    - See [nodes documentation](https://platejs.org/docs/markdown)\n\n  Example migration:\n\n  ```tsx\n  export const markdownPlugin = MarkdownPlugin.configure({\n    options: {\n      disallowedNodes: [SuggestionPlugin.key],\n      rules: {\n        // For textRules\n        [BoldPlugin.key]: {\n          mark: true,\n          deserialize: (mdastNode) => ({\n            bold: true,\n            text: node.value || '',\n          }),\n        },\n        // For elementRules\n        [EquationPlugin.key]: {\n          deserialize: (mdastNode, options) => ({\n            children: [{ text: '' }],\n            texExpression: node.value,\n            type: EquationPlugin.key,\n          }),\n        },\n      },\n      remarkPlugins: [remarkMath, remarkGfm],\n    },\n  });\n  ```\n\n  - Removed processor in `editor.api.markdown.deserialize`\n    - Use `remarkPlugins` instead\n\n  ##### Serialization\n\n  - Removed `serializeMdNodes`\n    - Use `editor.markdown.serialize({ value: nodes })` instead\n  - Removed `SerializeMdOptions` due to new serialization process\n    - Previous process: `slate nodes => md`\n    - New process: `slate nodes => md-ast => md`\n  - Removed options:\n    - `nodes`\n    - `breakTag`\n    - `customNodes`\n    - `ignoreParagraphNewline`\n    - `listDepth`\n    - `markFormats`\n    - `ulListStyleTypes`\n    - `ignoreSuggestionType`\n\n  Migration example for `SerializeMdOptions.customNodes` and `SerializeMdOptions.nodes`:\n\n  ```tsx\n  export const markdownPlugin = MarkdownPlugin.configure({\n    options: {\n      rules: {\n        // Ignore all `insert` type suggestions\n        [SuggestionPlugin.key]: {\n          mark: true,\n          serialize: (slateNode: TSuggestionText, options): mdast.Text => {\n            const suggestionData = options.editor\n              .getApi(SuggestionPlugin)\n              .suggestion.suggestionData(node);\n\n            return suggestionData?.type === 'insert'\n              ? { type: 'text', value: '' }\n              : { type: 'text', value: node.text };\n          },\n        },\n        // For elementRules\n        [EquationPlugin.key]: {\n          serialize: (slateNode) => ({\n            type: 'math',\n            value: node.texExpression,\n          }),\n        },\n      },\n      remarkPlugins: [remarkMath, remarkGfm],\n    },\n  });\n  ```\n\n# 46.0.0\n\n## @udecode/plate-code-block@46.0.0\n\n- [#4122](https://github.com/udecode/plate/pull/4122) by [@zbeyens](https://github.com/zbeyens) – Migrated from `prismjs` to `highlight.js` + `lowlight` for syntax highlighting.\n\n  - Fix highlighting multi-lines tokens. Before, line tokens were computed line by line. Now, it's computed once for the whole block.\n  - Bundle size much lower.\n  - `CodeBlockPlugin`: remove `prism` option. Use `lowlight` option instead:\n\n  ```tsx\n  import { all, createLowlight } from 'lowlight';\n\n  const lowlight = createLowlight(all);\n\n  CodeBlockPlugin.configure({\n    options: {\n      lowlight,\n    },\n  });\n  ```\n\n  - New option: `defaultLanguage`\n  - Remove `syntax` option. Just omit `lowlight` option to disable syntax highlighting.\n  - Remove `syntaxPopularFirst` option. Control this behavior in your own components.\n  - Fix pasting code inside code blocks.\n  - Remove `useCodeBlockCombobox`, `useCodeBlockElement`, `useCodeSyntaxLeaf`, `useToggleCodeBlockButton`. The logic has been moved to the components.\n\n# 45.0.0\n\n## @udecode/plate-comments@45.0.0\n\n- [#4064](https://github.com/udecode/plate/pull/4064) by [@felixfeng33](https://github.com/felixfeng33) – This is a rewrite of the comments plugin removing UI logic (headless).\n\n  **Plugin Options**\n\n  - Removed configuration options from plugin options in favor of component-level control:\n    - `options.comments`\n    - `options.myUserId`\n    - `options.users`\n\n  **Components**\n\n  - Removed legacy components:\n    - `CommentDeleteButton`\n    - `CommentEditActions`\n    - `CommentEditButton`\n    - `CommentEditCancelButton`\n    - `CommentEditSaveButton`\n    - `CommentEditTextarea`\n    - `CommentNewSubmitButton`\n    - `CommentNewTextarea`\n    - `CommentResolveButton`\n    - `CommentsPositioner`\n    - `CommentUserName`\n\n  **API**\n\n  - Removed functions in favor of new API methods:\n    - `findCommentNode` → `api.comment.node()`\n    - `findCommentNodeById` → `api.comment.node({ id })`\n    - `getCommentNodeEntries` → `api.comment.nodes()`\n    - `getCommentNodesById` → `api.comment.nodes({ id })`\n    - `removeCommentMark` → `tf.comment.remove()`\n    - `unsetCommentNodesById` → `tf.comment.unsetMark({ id })`\n  - Removed unused functions:\n    - `getCommentFragment`\n    - `getCommentUrl`\n    - `getElementAbsolutePosition`\n    - `getCommentPosition`\n  - Updated `getCommentCount` to exclude draft comments\n\n  **State Management**\n\n  - Removed `CommentProvider` - users should implement their own state management – `block-discussion.tsx`\n  - Moved `useHooksComments` to UI registry – `comments-plugin.tsx`\n  - Removed hooks no longer needed with new UI:\n    - `useActiveCommentNode`\n    - `useCommentsResolved`\n    - `useCommentAddButton`\n    - `useCommentItemContent`\n    - `useCommentLeaf`\n    - `useCommentsShowResolvedButton`\n    - `useFloatingCommentsContentState`\n    - `useFloatingCommentsState`\n\n  **Types**\n\n  - Removed `CommentUser`\n  - Moved `TComment` to UI registry – `comment.tsx`\n\n## @udecode/plate-suggestion@45.0.0\n\n- [#4064](https://github.com/udecode/plate/pull/4064) by [@felixfeng33](https://github.com/felixfeng33) – Note: This plugin is currently in an experimental phase and breaking changes may be introduced without a major version bump.\n\n  - Add Suggestion UI\n  - Remove: `findSuggestionNode` use `findSuggestionProps.ts` instead\n  - Remove `addSuggestionMark.ts`\n  - Remove `useHooksSuggestion.ts` as we've updated the activeId logic to no longer depend on useEditorSelector\n\n# 44.0.1\n\n## @udecode/plate-core@44.0.0\n\n- [#4048](https://github.com/udecode/plate/pull/4048) by [@zbeyens](https://github.com/zbeyens) –\n\n  - Support React 19\n  - Upgraded to `zustand-x@6`\n    - `eventEditorSelectors` -> `EventEditorStore.get`\n    - `eventEditorActions` -> `EventEditorStore.set`\n    - `useEventEditorSelectors` -> `useEventEditorValue(key)`\n  - Upgraded to `jotai-x@2`\n    - `usePlateEditorStore` -> `usePlateStore`\n    - `usePlateActions` -> `usePlateSet`\n    - Remove `editor.setPlateState`, use `usePlateSet` instead\n    - `usePlateSelectors` -> `usePlateValue`\n    - `usePlateStates` -> `usePlateState`\n  - Moving plugin options hooks into standalone hooks to be compatible with React Compiler\n    - `editor.useOption`, `ctx.useOption` -> `usePluginOption(plugin, key, ...args)`\n    - `editor.useOptions`, `ctx.useOptions` -> `usePluginOption(plugin, 'state')`\n    - New hook `usePluginOptions(plugin, selector)` to select plugin options (Zustand way).\n  - We were supporting adding selectors to plugins using `extendOptions`. Those were mixed up with the options state, leading to potential conflicts and confusion.\n    - The plugin method is renamed to `extendSelectors`\n    - Selectors are now internally stored in `plugin.selectors` instead of `plugin.options`, but this does not change how you access those: using `editor.getOption(plugin, 'selectorName')`, `ctx.getOption('selectorName')` or above hooks.\n    - Selector types are no longer in the 2nd generic type of `PluginConfig`, we're adding a 5th generic type for it.\n\n  ```ts\n  // Before:\n  export type BlockSelectionConfig = PluginConfig<\n    'blockSelection',\n    { selectedIds?: Set<string>; } & BlockSelectionSelectors,\n  >;\n\n  // After:\n  export type BlockSelectionConfig = PluginConfig<\n    'blockSelection',\n    { selectedIds?: Set<string>; },\n    {}, // API\n    {}, // Transforms\n    BlockSelectionSelectors, // Selectors\n  }>\n  ```\n\n## @udecode/plate-comments@44.0.0\n\n- [#4048](https://github.com/udecode/plate/pull/4048) by [@zbeyens](https://github.com/zbeyens) – Upgrade to `jotai-x@2`. [Migration](https://github.com/udecode/jotai-x/blob/main/packages/jotai-x/CHANGELOG.md#211) needed only if you use `useCommentStore`\n\n## @udecode/plate-media@44.0.0\n\n- [#4048](https://github.com/udecode/plate/pull/4048) by [@zbeyens](https://github.com/zbeyens) – Upgrade to `zustand-x@2`. [Migration](https://github.com/udecode/zustand-x/blob/main/packages/zustand-x/CHANGELOG.md#600) needed only if you use one of these stores:\n\n  - `ImagePreviewStore`\n  - `FloatingMediaStore`\n\n- [#4048](https://github.com/udecode/plate/pull/4048) by [@zbeyens](https://github.com/zbeyens) – Upgrade to `jotai-x@2`. [Migration](https://github.com/udecode/jotai-x/blob/main/packages/jotai-x/CHANGELOG.md#211) needed only if you use `usePlaceholderStore`\n\n## @udecode/plate-resizable@44.0.0\n\n- [#4048](https://github.com/udecode/plate/pull/4048) by [@zbeyens](https://github.com/zbeyens) – Upgrade to `jotai-x@2`. [Migration](https://github.com/udecode/jotai-x/blob/main/packages/jotai-x/CHANGELOG.md#211) needed only if you use `useResizableStore`\n\n## @udecode/plate-table@44.0.0\n\n- [#4048](https://github.com/udecode/plate/pull/4048) by [@zbeyens](https://github.com/zbeyens) – Move store state `selectedCells` and `selectedTables` from `useTableStore` to `TablePlugin` options store. This fixes the issue to get access to those state outside a table element (e.g. the toolbar)\n\n- [#4048](https://github.com/udecode/plate/pull/4048) by [@zbeyens](https://github.com/zbeyens) – Upgrade to `jotai-x@2`. [Migration](https://github.com/udecode/jotai-x/blob/main/packages/jotai-x/CHANGELOG.md#211) needed only if you use `useTableStore`\n\n# 43.0.0\n\nNo breaking changes. Upgraded all dependencies to the latest version.\n\n# 42.0.1\n\n## @udecode/plate-ai@42.0.0\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) – AI plugins are now experimental: pin the dependency to avoid breaking changes. No breaking changes for this release.\n\n## @udecode/plate-common@42.0.0\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) – This package is now deprecated and will be renamed to `@udecode/plate`. Migration:\n\n  - Remove `@udecode/plate-common` and install `@udecode/plate`\n  - Replace all `'@udecode/plate-common'` with `'@udecode/plate'`,\n\n## @udecode/plate-core@42.0.0\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) –\n\n  - **Plugin `normalizeInitialValue`** now returns `void` instead of `Value`. When mutating nodes, keep their references (e.g., use `Object.assign` instead of spread).\n  - **Editor methods have moved** to `editor.tf` and `editor.api`. They still exist at the top level for **slate backward compatibility**, but are no longer redundantly typed. If you truly need the top-level method types, extend your editor type with `LegacyEditorMethods` (e.g. `editor as Editor & LegacyEditorMethods`). Since these methods can be overridden by `extendEditor`, `with...`, or slate plugins, consider migrating to the following approaches:\n\n    ```tsx\n    // For overriding existing methods only:\n    overrideEditor(({ editor, tf: { deleteForward }, api: { isInline } }) => ({\n      transforms: {\n        deleteForward(options) {\n          // ...conditional override\n          deleteForward(options);\n        },\n      },\n      api: {\n        isInline(element) {\n          // ...conditional override\n          return isInline(element);\n        },\n      },\n    }));\n    ```\n\n  This was previously done in `extendEditor` using top-level methods, which still works but now throws a type error due to the move to `editor.tf/editor.api`. A workaround is to extend your editor with `LegacyEditorMethods`.\n\n  **Why?** Having all methods at the top-level (next to `children`, `marks`, etc.) would clutter the editor interface. Slate splits transforms in three places (`editor`, `Editor`, and `Transforms`), which is also confusing. We've reorganized them into `tf` and `api` for better DX, but also to support transform-only middlewares in the future. This also lets us leverage `extendEditorTransforms`, `extendEditorApi`, and `overrideEditor` to modify those methods.\n\n  Migration example:\n\n  ```tsx\n  // From:\n  export const withInlineVoid: ExtendEditor = ({ editor }) => {\n    const { isInline, isSelectable, isVoid, markableVoid } = editor;\n\n    const voidTypes: string[] = [];\n    const inlineTypes: string[] = [];\n\n    editor.pluginList.forEach((plugin) => {\n      if (plugin.node.isInline) {\n        inlineTypes.push(plugin.node.type);\n      }\n      if (plugin.node.isVoid) {\n        voidTypes.push(plugin.node.type);\n      }\n    });\n\n    editor.isInline = (element) => {\n      return inlineTypes.includes(element.type as any)\n        ? true\n        : isInline(element);\n    };\n\n    editor.isVoid = (element) => {\n      return voidTypes.includes(element.type as any) ? true : isVoid(element);\n    };\n\n    return editor;\n  };\n\n  export const InlineVoidPlugin = createSlatePlugin({\n    key: 'inlineVoid',\n    extendEditor: withInlineVoid,\n  });\n\n  // After (using overrideEditor since we're only overriding existing methods):\n  export const withInlineVoid: OverrideEditor = ({\n    api: { isInline, isSelectable, isVoid, markableVoid },\n    editor,\n  }) => {\n    const voidTypes: string[] = [];\n    const inlineTypes: string[] = [];\n\n    editor.pluginList.forEach((plugin) => {\n      if (plugin.node.isInline) {\n        inlineTypes.push(plugin.node.type);\n      }\n      if (plugin.node.isVoid) {\n        voidTypes.push(plugin.node.type);\n      }\n    });\n\n    return {\n      api: {\n        isInline(element) {\n          return inlineTypes.includes(element.type as any)\n            ? true\n            : isInline(element);\n        },\n        isVoid(element) {\n          return voidTypes.includes(element.type as any)\n            ? true\n            : isVoid(element);\n        },\n      },\n    };\n  };\n\n  export const InlineVoidPlugin = createSlatePlugin({\n    key: 'inlineVoid',\n  }).overrideEditor(withInlineVoid);\n  ```\n\n  - Move `editor.redecorate` to `editor.api.redecorate`\n\n  Types:\n\n  - Rename `TRenderElementProps` to `RenderElementProps`\n  - Rename `TRenderLeafProps` to `RenderLeafProps`\n  - Rename `TEditableProps` to `EditableProps`\n\n## @udecode/plate@42.0.0\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) – **This package is now the new common package**, so all plugin packages are being removed. **Migration**:\n\n  - Add the following dependencies:\n\n  ```json\n  \"@udecode/plate-alignment\": \"42.0.0\",\n  \"@udecode/plate-autoformat\": \"42.0.0\",\n  \"@udecode/plate-basic-elements\": \"42.0.0\",\n  \"@udecode/plate-basic-marks\": \"42.0.0\",\n  \"@udecode/plate-block-quote\": \"42.0.0\",\n  \"@udecode/plate-break\": \"42.0.0\",\n  \"@udecode/plate-code-block\": \"42.0.0\",\n  \"@udecode/plate-combobox\": \"42.0.0\",\n  \"@udecode/plate-comments\": \"42.0.0\",\n  \"@udecode/plate-csv\": \"42.0.0\",\n  \"@udecode/plate-diff\": \"42.0.0\",\n  \"@udecode/plate-docx\": \"42.0.0\",\n  \"@udecode/plate-find-replace\": \"42.0.0\",\n  \"@udecode/plate-floating\": \"42.0.0\",\n  \"@udecode/plate-font\": \"42.0.0\",\n  \"@udecode/plate-heading\": \"42.0.0\",\n  \"@udecode/plate-highlight\": \"42.0.0\",\n  \"@udecode/plate-horizontal-rule\": \"42.0.0\",\n  \"@udecode/plate-indent\": \"42.0.0\",\n  \"@udecode/plate-indent-list\": \"42.0.0\",\n  \"@udecode/plate-kbd\": \"42.0.0\",\n  \"@udecode/plate-layout\": \"42.0.0\",\n  \"@udecode/plate-line-height\": \"42.0.0\",\n  \"@udecode/plate-link\": \"42.0.0\",\n  \"@udecode/plate-list\": \"42.0.0\",\n  \"@udecode/plate-markdown\": \"42.0.0\",\n  \"@udecode/plate-media\": \"42.0.0\",\n  \"@udecode/plate-mention\": \"42.0.0\",\n  \"@udecode/plate-node-id\": \"42.0.0\",\n  \"@udecode/plate-normalizers\": \"42.0.0\",\n  \"@udecode/plate-reset-node\": \"42.0.0\",\n  \"@udecode/plate-resizable\": \"42.0.0\",\n  \"@udecode/plate-select\": \"42.0.0\",\n  \"@udecode/plate-selection\": \"42.0.0\",\n  \"@udecode/plate-slash-command\": \"42.0.0\",\n  \"@udecode/plate-suggestion\": \"42.0.0\",\n  \"@udecode/plate-tabbable\": \"42.0.0\",\n  \"@udecode/plate-table\": \"42.0.0\",\n  \"@udecode/plate-toggle\": \"42.0.0\",\n  \"@udecode/plate-trailing-block\": \"42.0.0\"\n  ```\n\n  - Either replace all `@udecode/plate` imports with the individual package imports, or export the following in a new file (e.g. `src/plate.ts`):\n\n  ```ts\n  export * from '@udecode/plate-alignment';\n  export * from '@udecode/plate-autoformat';\n  export * from '@udecode/plate-basic-elements';\n  export * from '@udecode/plate-basic-marks';\n  export * from '@udecode/plate-block-quote';\n  export * from '@udecode/plate-break';\n  export * from '@udecode/plate-code-block';\n  export * from '@udecode/plate-combobox';\n  export * from '@udecode/plate-comments';\n  export * from '@udecode/plate-diff';\n  export * from '@udecode/plate-find-replace';\n  export * from '@udecode/plate-font';\n  export * from '@udecode/plate-heading';\n  export * from '@udecode/plate-highlight';\n  export * from '@udecode/plate-horizontal-rule';\n  export * from '@udecode/plate-indent';\n  export * from '@udecode/plate-indent-list';\n  export * from '@udecode/plate-kbd';\n  export * from '@udecode/plate-layout';\n  export * from '@udecode/plate-line-height';\n  export * from '@udecode/plate-link';\n  export * from '@udecode/plate-list';\n  export * from '@udecode/plate-media';\n  export * from '@udecode/plate-mention';\n  export * from '@udecode/plate-node-id';\n  export * from '@udecode/plate-normalizers';\n  export * from '@udecode/plate-reset-node';\n  export * from '@udecode/plate-select';\n  export * from '@udecode/plate-csv';\n  export * from '@udecode/plate-docx';\n  export * from '@udecode/plate-markdown';\n  export * from '@udecode/plate-slash-command';\n  export * from '@udecode/plate-suggestion';\n  export * from '@udecode/plate-tabbable';\n  export * from '@udecode/plate-table';\n  export * from '@udecode/plate-toggle';\n  export * from '@udecode/plate-trailing-block';\n  export * from '@udecode/plate-alignment/react';\n  export * from '@udecode/plate-autoformat/react';\n  export * from '@udecode/plate-basic-elements/react';\n  export * from '@udecode/plate-basic-marks/react';\n  export * from '@udecode/plate-block-quote/react';\n  export * from '@udecode/plate-break/react';\n  export * from '@udecode/plate-code-block/react';\n  export * from '@udecode/plate-combobox/react';\n  export * from '@udecode/plate-comments/react';\n  export * from '@udecode/plate-floating';\n  export * from '@udecode/plate-font/react';\n  export * from '@udecode/plate-heading/react';\n  export * from '@udecode/plate-highlight/react';\n  export * from '@udecode/plate-layout/react';\n  export * from '@udecode/plate-slash-command/react';\n  export * from '@udecode/plate-indent/react';\n  export * from '@udecode/plate-indent-list/react';\n  export * from '@udecode/plate-kbd/react';\n  export * from '@udecode/plate-line-height/react';\n  export * from '@udecode/plate-link/react';\n  export * from '@udecode/plate-list/react';\n  export * from '@udecode/plate-media/react';\n  export * from '@udecode/plate-reset-node/react';\n  export * from '@udecode/plate-selection';\n  export * from '@udecode/plate-suggestion/react';\n  export * from '@udecode/plate-tabbable/react';\n  export * from '@udecode/plate-table/react';\n  export * from '@udecode/plate-toggle/react';\n  export * from '@udecode/plate-resizable';\n  ```\n\n  - Replace all `'@udecode/plate'` and `'@udecode/plate/react'` with `'@/plate'` in your codebase.\n\n## @udecode/plate-utils@42.0.0\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) –\n  - Removed unused `moveSelectionByOffset`, `getLastBlockDOMNode`, `useLastBlock`, `useLastBlockDOMNode`\n\n## @udecode/plate-selection@42.0.0\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) – Remove first parameter of editor.api.blockSelection.duplicate\n\n## @udecode/slate@42.0.0\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) –\n\n  - Remove `slate`, `slate-dom`, `slate-react`, `slate-history` and `slate-hyperscript` from your dependencies. It's now part of this package and `@udecode/plate`. All exports remain the same or have equivalents (see below).\n  - Renamed `createTEditor` to `createEditor`.\n  - `createEditor` now returns an editor (`Editor`) with all queries under `editor.api` and transforms under `editor.tf`. You can see or override them at a glance. For example, we now use `editor.tf.setNodes` instead of importing `setNodes`. This marks the completion of generic typing and the removal of error throws from `slate`, `slate-dom`, and `slate-history` queries/transforms, without forking implementations. We’ve also reduced the number of queries/transforms by merging a bunch of them.\n\n  The following interfaces from `slate` and `slate-dom` are now part of `Editor`:\n\n  - `Editor`, `EditorInterface`\n\n  - `Transforms`\n\n  - `HistoryEditor` (noop, unchanged), `HistoryEditorInterface`\n\n  - `DOMEditor` (noop, unchanged), `DOMEditorInterface`\n\n  - `editor.findPath` now returns `DOMEditor.findPath` (memo) and falls back to `findNodePath` (traversal, less performant) if not found.\n\n  - Removed the first parameter (`editor`) from:\n\n    - `editor.hasEditableTarget`\n    - `editor.hasSelectableTarget`\n    - `editor.isTargetInsideNonReadonlyVoid`\n    - `editor.hasRange`\n    - `editor.hasTarget`\n\n  - `editor.api.node(options)` (previously `findNode`) `at` option is now `at ?? editor.selection` instead of `at ?? editor.selection ?? []`. That means if you want to lookup the entire document, you need to pass `[]` explicitly.\n\n  - Removed `setNode` in favor of `setNodes` (you can now pass a `TNode` to `at` directly).\n\n  - Removed `setElements` in favor of `setNodes`.\n\n  - Removed unused `isWordAfterTrigger`, `setBlockAboveNode`, `setBlockAboveTexts`, `setBlockNodes`, `getPointNextToVoid`.\n\n  - Replaced `Path` from slate with `Path` (type) and `PathApi` (static methods).\n\n  - Replaced `Operation` from slate with `Operation` (type) and `OperationApi` (static methods).\n\n  - Replaced `Point` from slate with `Point` (type) and `PointApi` (static methods).\n\n  - Replaced `Text` from slate with `TText` (type) and `TextApi` (static methods). We also export `Text` type like `slate` but we don't recommend it as it's conflicting with the DOM type.\n\n  - Replaced `Range` from slate with `TRange` (type) and `RangeApi` (static methods). We also export `Range` type like `slate` but we don't recommend it as it's conflicting with the DOM type.\n\n  - Replaced `Location` from slate with `TLocation` (type) and `LocationApi` (static methods). We also export `Location` type like `slate` but we don't recommend it as it's conflicting with the DOM type.\n\n  - Replaced `Span` from slate with `Span` (type) and `SpanApi` (static methods).\n\n  - Replaced `Node` from slate with `TNode` (type) and `NodeApi` (static methods). We also export `Node` type like `slate` but we don't recommend it as it's conflicting with the DOM type.\n\n  - Replaced `Element` from slate with `TElement` (type) and `ElementApi` (static methods). We also export `Element` type like `slate` but we don't recommend it as it's conflicting with the DOM type.\n\n  - Signature change:\n\n    - `editor.tf.toggle.block({ type, ...options })` -> `editor.tf.toggleBlock(type, options)`\n    - `editor.tf.toggle.mark({ key, clear })` -> `editor.tf.toggleMark(key, { remove: clear })`\n\n  - Moved editor functions:\n\n    - `addMark` -> `editor.tf.addMark`\n    - `addRangeMarks` -> `editor.tf.setNodes(props, { at, marks: true })`\n    - `blurEditor` -> `editor.tf.blur`\n    - `collapseSelection` -> `editor.tf.collapse`\n    - `createDocumentNode` -> `editor.api.create.value` (core)\n    - `createNode` -> `editor.api.create.block`\n    - `createPathRef` -> `editor.api.pathRef`\n    - `createPointRef` -> `editor.api.pointRef`\n    - `createRangeRef` -> `editor.api.rangeRef`\n    - `deleteBackward({ unit })` -> `editor.tf.deleteBackward(unit)`\n    - `deleteForward({ unit })` -> `editor.tf.deleteForward(unit)`\n    - `deleteFragment` -> `editor.tf.deleteFragment`\n    - `deleteText` -> `editor.tf.delete`\n    - `deselect` -> `editor.tf.deselect`\n    - `deselectEditor` -> `editor.tf.deselectDOM`\n    - `duplicateBlocks` -> `editor.tf.duplicateNodes({ nodes })`\n    - `findDescendant` -> `editor.api.descendant`\n    - `findEditorDocumentOrShadowRoot` -> `editor.api.findDocumentOrShadowRoot`\n    - `findEventRange` -> `editor.api.findEventRange`\n    - `findNode(options)` -> `editor.api.node(options)`\n    - `findNodeKey` -> `editor.api.findKey`\n    - `findNodePath` -> `editor.api.findPath`\n    - `findPath` -> `editor.api.findPath`\n    - `focusEditor` -> `editor.tf.focus({ at })`\n    - `focusEditorEdge` -> `editor.tf.focus({ at, edge: 'startEditor' | 'endEditor' })`\n    - `getAboveNode` -> `editor.api.above`\n    - `getAncestorNode` -> `editor.api.block({ highest: true })`\n    - `getBlockAbove` -> `editor.api.block({ at, above: true })` or `editor.api.block()` if `at` is not a path\n    - `getBlocks` -> `editor.api.blocks`\n    - `getEdgeBlocksAbove` -> `editor.api.edgeBlocks`\n    - `getEdgePoints` -> `editor.api.edges`\n    - `getEditorString` -> `editor.api.string`\n    - `getEditorWindow` -> `editor.api.getWindow`\n    - `getEndPoint` -> `editor.api.end`\n    - `getFirstNode` -> `editor.api.first`\n    - `getFragment` -> `editor.api.fragment`\n    - `getFragmentProp(fragment, options)` -> `editor.api.prop({ nodes, ...options})`\n    - `getLastNode` -> `editor.api.last`\n    - `getLastNodeByLevel(level)` -> `editor.api.last([], { level })`\n    - `getLeafNode` -> `editor.api.leaf`\n    - `getLevels` -> `editor.api.levels`\n    - `getMark` -> `editor.api.mark`\n    - `getMarks` -> `editor.api.marks`\n    - `getNextNode` -> `editor.api.next`\n    - `getNextNodeStartPoint` -> `editor.api.start(at, { next: true })`\n    - `getNodeEntries` -> `editor.api.nodes`\n    - `getNodeEntry` -> `editor.api.node(at, options)`\n    - `getNodesRange` -> `editor.api.nodesRange`\n    - `getParentNode` -> `editor.api.parent`\n    - `getPath` -> `editor.api.path`\n    - `getPathRefs` -> `editor.api.pathRefs`\n    - `getPoint` -> `editor.api.point`\n    - `getPointAfter` -> `editor.api.after`\n    - `getPointBefore` -> `editor.api.before`\n    - `getPointBeforeLocation` -> `editor.api.before`\n    - `getPointRefs` -> `editor.api.pointRefs`\n    - `getPositions` -> `editor.api.positions`\n    - `getPreviousBlockById` -> `editor.api.previous({ id, block: true })`\n    - `getPreviousNode` -> `editor.api.previous`\n    - `getPreviousNodeEndPoint` -> `editor.api.end({ previous: true })`\n    - `getPreviousSiblingNode` -> `editor.api.previous({ at, sibling: true })`\n    - `getRange` -> `editor.api.range`\n    - `getRangeBefore` -> `editor.api.range('before', to, { before })`\n    - `getRangeFromBlockStart` -> `editor.api.range('start', to)`\n    - `getRangeRefs` -> `editor.api.rangeRefs`\n    - `getSelectionFragment` -> `editor.api.fragment(editor.selection, { structuralTypes })`\n    - `getSelectionText` -> `editor.api.string()`\n    - `getStartPoint` -> `editor.api.start`\n    - `getVoidNode` -> `editor.api.void`\n    - `hasBlocks` -> `editor.api.hasBlocks`\n    - `hasEditorDOMNode` -> `editor.api.hasDOMNode`\n    - `hasEditorEditableTarget` -> `editor.api.hasEditableTarget`\n    - `hasEditorSelectableTarget` -> `editor.api.hasSelectableTarget`\n    - `hasEditorTarget` -> `editor.api.hasTarget`\n    - `hasInlines` -> `editor.api.hasInlines`\n    - `hasTexts` -> `editor.api.hasTexts`\n    - `insertBreak` -> `editor.tf.insertBreak`\n    - `insertData` -> `editor.tf.insertData`\n    - `insertElements` -> `editor.tf.insertNodes<TElement>`\n    - `insertEmptyElement` -> `editor.tf.insertNodes(editor.api.create.block({ type }))`\n    - `insertFragment` -> `editor.tf.insertFragment`\n    - `insertNode` -> `editor.tf.insertNode`\n    - `insertNodes` -> `editor.tf.insertNodes`\n    - `insertText` -> `editor.tf.insertText({ at })` or `editor.tf.insertText({ marks: false })` without `at`\n    - `isAncestorEmpty` -> `editor.api.isEmpty`\n    - `isBlock` -> `editor.api.isBlock`\n    - `isBlockAboveEmpty` -> `editor.api.isEmpty(editor.selection, { block: true })`\n    - `isBlockTextEmptyAfterSelection` -> `editor.api.isEmpty(editor.selection, { after: true })`\n    - `isCollapsed(editor.selection)` -> `editor.api.isCollapsed()`\n    - `isComposing` -> `editor.api.isComposing`\n    - `isDocumentEnd` -> `editor.api.isEditorEnd`\n    - `isEdgePoint` -> `editor.api.isEdge`\n    - `isEditorEmpty` -> `editor.api.isEmpty()`\n    - `isEditorFocused` -> `editor.api.isFocused`\n    - `isEditorNormalizing` -> `editor.api.isNormalizing`\n    - `isEditorReadOnly` -> `editor.api.isReadOnly`\n    - `isElementEmpty` -> `editor.api.isEmpty`\n    - `isElementReadOnly` -> `editor.api.elementReadOnly`\n    - `isEndPoint` -> `editor.api.isEnd`\n    - `isExpanded(editor.selection)` -> `editor.api.isCollapsed()`\n    - `isInline` -> `editor.api.isInline`\n    - `isMarkableVoid` -> `editor.api.markableVoid`\n    - `isMarkActive` -> `editor.api.hasMark(key)`\n    - `isPointAtWordEnd` -> `editor.api.isAt({ at, word: true, end: true })`\n    - `isRangeAcrossBlocks` -> `editor.api.isAt({ at, blocks: true })`\n    - `isRangeInSameBlock` -> `editor.api.isAt({ at, block: true })`\n    - `isRangeInSingleText` -> `editor.api.isAt({ at, text: true })`\n    - `isSelectionAtBlockEnd` -> `editor.api.isAt({ end: true })`\n    - `isSelectionAtBlockStart` -> `editor.api.isAt({ start: true })`\n    - `isSelectionCoverBlock` -> `editor.api.isAt({ block: true, start: true, end: true })`\n    - `isSelectionExpanded` -> `editor.api.isExpanded()`\n    - `isStartPoint` -> `editor.api.isStart`\n    - `isTargetinsideNonReadonlyVoidEditor` -> `editor.api.isTargetInsideNonReadonlyVoid`\n    - `isTextByPath` -> `editor.api.isText(at)`\n    - `isVoid` -> `editor.api.isVoid`\n    - `liftNodes` -> `editor.tf.liftNodes`\n    - `mergeNodes` -> `editor.tf.mergeNodes`\n    - `moveChildren` -> `editor.tf.moveNodes({ at, to, children: true, fromIndex, match: (node, path) => boolean })`\n    - `moveNodes` -> `editor.tf.moveNodes`\n    - `moveSelection` -> `editor.tf.move`\n    - `normalizeEditor` -> `editor.tf.normalize`\n    - `removeEditorMark` -> `editor.tf.removeMark`\n    - `removeEditorText` -> `editor.tf.removeNodes({ text: true, empty: false })`\n    - `removeEmptyPreviousBlock` -> `editor.tf.removeNodes({ previousEmptyBlock: true })`\n    - `removeMark(options)` -> `editor.tf.removeMarks(keys, options)`\n    - `removeNodeChildren` -> `editor.tf.removeNodes({ at, children: true })`\n    - `removeNodes` -> `editor.tf.removeNodes`\n    - `removeSelectionMark` -> `editor.tf.removeMarks()`\n    - `replaceNode(editor, { nodes, insertOptions, removeOptions })` -> `editor.tf.replaceNodes(nodes, { removeNodes, ...insertOptions })`\n    - `select` -> `editor.tf.select`\n    - `selectEndOfBlockAboveSelection` -> `editor.tf.select(editor.selection, { edge: 'end' })`\n    - `selectNodes` -> `editor.tf.select(editor.api.nodesRange(nodes))`\n    - `setFragmentData` -> `editor.tf.setFragmentData`\n    - `setMarks(marks, clear)` -> `editor.tf.addMarks(marks, { remove: string | string[] })`\n    - `setNodes` -> `editor.tf.setNodes`\n    - `setPoint` -> `editor.tf.setPoint`\n    - `setSelection` -> `editor.tf.setSelection`\n    - `someNode` -> `editor.api.some(options)`\n    - `splitNodes` -> `editor.tf.splitNodes`\n    - `toDOMNode` -> `editor.api.toDOMNode`\n    - `toDOMPoint` -> `editor.api.toDOMPoint`\n    - `toDOMRange` -> `editor.api.toDOMRange`\n    - `toggleWrapNodes` -> `editor.tf.toggleBlock(type, { wrap: true })`\n    - `toSlateNode` -> `editor.api.toSlateNode`\n    - `toSlatePoint` -> `editor.api.toSlatePoint`\n    - `toSlateRange` -> `editor.api.toSlateRange`\n    - `unhangCharacterRange` -> `editor.api.unhangRange(range, { character: true })`\n    - `unhangRange` -> `editor.api.unhangRange`\n    - `unsetNodes` -> `editor.tf.unsetNodes`\n    - `unwrapNodes` -> `editor.tf.unwrapNodes`\n    - `withoutNormalizing` -> `editor.tf.withoutNormalizing`\n    - `wrapNodeChildren` -> `editor.tf.wrapNodes(element, { children: true })`\n    - `wrapNodes` -> `editor.tf.wrapNodes`\n    - `replaceNodeChildren` -> `editor.tf.replaceNodes({ at, children: true })`\n    - `resetEditor` -> `editor.tf.reset`\n    - `resetEditorChildren` -> `editor.tf.reset({ children: true })`\n    - `selectEditor` -> `editor.tf.select([], { focus, edge })`\n    - `selectSiblingNodePoint` -> `editor.tf.select(at, { next, previous })`\n\n  - Moved to `NodeApi.`:\n\n    - `getNextSiblingNodes(parentEntry, path)` -> `NodeApi.children(editor, path, { from: path.at(-1) + 1 })`\n    - `getFirstNodeText` -> `NodeApi.firstText`\n    - `getFirstChild([node, path])` -> `NodeApi.firstChild(editor, path)`\n    - `getLastChild([node, path])` -> `NodeApi.lastChild(editor, path)`\n    - `getLastChildPath([node, path])` -> `NodeApi.lastChild(editor, path)`\n    - `isLastChild([node, path], childPath)` -> `NodeApi.isLastChild(editor, childPath)`\n    - `getChildren([node, path])` -> `Array.from(NodeApi.children(editor, path))`\n    - `getCommonNode` -> `NodeApi.common`\n    - `getNode` -> `NodeApi.get`\n    - `getNodeAncestor` -> `NodeApi.ancestor`\n    - `getNodeAncestors` -> `NodeApi.ancestors`\n    - `getNodeChild` -> `NodeApi.child`\n    - `getNodeChildren` -> `NodeApi.children`\n    - `getNodeDescendant` -> `NodeApi.descendant`\n    - `getNodeDescendants` -> `NodeApi.descendants`\n    - `getNodeElements` -> `NodeApi.elements`\n    - `getNodeFirstNode` -> `NodeApi.first`\n    - `getNodeFragment` -> `NodeApi.fragment`\n    - `getNodeLastNode` -> `NodeApi.last`\n    - `getNodeLeaf` -> `NodeApi.leaf`\n    - `getNodeLevels` -> `NodeApi.levels`\n    - `getNodeParent` -> `NodeApi.parent`\n    - `getNodeProps` -> `NodeApi.extractProps`\n    - `getNodes` -> `NodeApi.nodes`\n    - `getNodeString` -> `NodeApi.string`\n    - `getNodeTexts` -> `NodeApi.texts`\n    - `hasNode` -> `NodeApi.has`\n    - `hasSingleChild` -> `NodeApi.hasSingleChild`\n    - `isAncestor` -> `NodeApi.isAncestor`\n    - `isDescendant` -> `NodeApi.isDescendant`\n    - `isEditor` -> `NodeApi.isEditor`\n    - `isNode` -> `NodeApi.isNode`\n    - `isNodeList` -> `NodeApi.isNodeList`\n    - `nodeMatches` -> `NodeApi.matches`\n\n  - Moved to `ElementApi.`:\n\n    - `elementMatches` -> `ElementApi.matches`\n    - `isElement` -> `ElementApi.isElement`\n    - `isElementList` -> `ElementApi.isElementList`\n\n  - Moved to `TextApi.`:\n\n    - `isText` -> `TextApi.isText(at)`\n\n  - Moved to `RangeApi.`:\n\n    - `isCollapsed` -> `RangeApi.isCollapsed`\n    - `isExpanded` -> `RangeApi.isExpanded`\n\n  - Moved to `PathApi.`:\n\n    - `isFirstChild` -> `!PathApi.hasPrevious`\n    - `getPreviousPath` -> `PathApi.previous`\n\n  - Moved to `PointApi.`:\n\n    - `getPointFromLocation({ at, focus })` -> `PointApi.get(at, { focus })`\n\n  - Moved from `@udecode/plate/react` to `@udecode/plate`:\n\n    - `Hotkeys`\n\n  - Upgraded to `zustand@5` and `zustand-x@5`:\n    - Replace `createZustandStore('name')(initialState)` with `createZustandStore(initialState, { mutative: true, name: 'name' })`\n    - All plugin stores now use [zustand-mutative](https://github.com/mutativejs/zustand-mutative) for immutable state updates, which is faster than `immer`.\n\n  Types:\n\n  - Rename the following types:\n    - `TEditor` -> `Editor`\n    - `TOperation` -> `Operation`\n    - `TPath` -> `Path`\n    - `TNodeProps` -> `NodeProps`\n    - `TNodeChildEntry` -> `NodeChildEntry`\n    - `TNodeEntry` -> `NodeEntry`\n    - `TDescendant` -> `Descendant`\n    - `TDescendantEntry` -> `DescendantEntry`\n    - `TAncestor` -> `Ancestor`\n    - `TAncestorEntry` -> `AncestorEntry`\n    - `TElementEntry` -> `ElementEntry`\n    - `TTextEntry` -> `TextEntry`\n  - Query/transform options now use generic `V extends Value` instead of `E extends Editor`.\n  - `getEndPoint`, `getEdgePoints`, `getFirstNode`, `getFragment`, `getLastNode`, `getLeafNode`, `getPath`, `getPoint`, `getStartPoint` can return `undefined` if not found (suppressing error throws).\n  - `NodeApi.ancestor`, `NodeApi.child`, `NodeApi.common`, `NodeApi.descendant`, `NodeApi.first`, `NodeApi.get`, `NodeApi.last`, `NodeApi.leaf`, `NodeApi.parent`, `NodeApi.getIf`, `PathApi.previous` return `undefined` if not found instead of throwing\n  - Replace `NodeOf` type with `DescendantOf` in `editor.tf.setNodes` `editor.tf.unsetNodes`, `editor.api.previous`, `editor.api.node`, `editor.api.nodes`, `editor.api.last`\n  - Enhanced `editor.tf.setNodes`:\n    - Added `marks` option to handle mark-specific operations\n    - When `marks: true`:\n      - Only applies to text nodes in non-void nodes or markable void nodes\n      - Automatically sets `split: true` and `voids: true`\n      - Handles both expanded ranges and collapsed selections in markable voids\n    - Replaces `addRangeMarks` functionality\n\n## @udecode/slate-utils@42.0.0\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) – This package is now deprecated. Use `@udecode/slate` or `@udecode/plate` instead.\n\n## @udecode/slate-react@42.0.0\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) – This package is now deprecated. Use `@udecode/slate` or `@udecode/plate` instead.\n\n## @udecode/plate-table@42.0.0\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) – **Major performance improvement**: all table cells were re-rendering when a single cell changed. This is now fixed.\n\n  - `TablePlugin` now depends on `NodeIdPlugin`.\n  - Table merging is now enabled by default:\n    - Renamed `enableMerging` to `disableMerge`.\n    - **Migration**:\n      - `enableMerging: true` → remove the option.\n      - otherwise → `TablePlugin.configure({ options: { disableMerge: true } })`\n  - Renamed `unmergeTableCells` to `splitTableCell`.\n  - Renamed `editor.api.create.cell` to `editor.api.create.tableCell`.\n  - In `useTableMergeState`, renamed `canUnmerge` to `canSplit`.\n  - `insertTableRow` and `insertTableColumn`: removed `disableSelect` in favor of `select`. **Migration**: replace it with the opposite boolean.\n  - `getTableCellBorders`: params `(element, options)` → `(editor, options)`; removed `isFirstCell` and `isFirstRow`.\n  - Merged `useTableCellElementState` into `useTableCellElement`:\n    - Removed its parameter.\n    - Removed `hovered` and `hoveredLeft` returns (use CSS instead).\n    - Renamed `rowSize` to `minHeight`.\n    - Computes column sizes and returns `width`.\n  - Merged `useTableCellElementResizableState` into `useTableCellElementResizable`:\n    - Removed `onHover` and `onHoverEnd` props (use CSS instead).\n  - Merged `useTableElementState` into `useTableElement`:\n    - Removed its parameter.\n    - No longer computes and returns `colSizes`, `minColumnWidth`, and `colGroupProps`.\n\n# 41.0.2\n\n## @udecode/slate-react@41.0.0\n\n- [#3830](https://github.com/udecode/plate/pull/3830) by [@felixfeng33](https://github.com/felixfeng33) – Rename `findNodePath` to `findPath` since the addition of `findNodePath` in the headless lib.\n\n  We recommend using `findPath` mostly when subscribing to its value (e.g. in a React component) as it has O(path.length) complexity, compared to O(n) for the traversal-based `findNodePath`. This optimization is particularly important in:\n\n  - Render functions of Plate components where using `findNodePath` would increase the initial render time by O(n²)\n  - Key press handlers where using `findNodePath` would increase the handling time by O(n)\n\n  where n is the number of nodes in the editor.\n\n## @udecode/plate-dnd@41.0.2\n\n- [#3861](https://github.com/udecode/plate/pull/3861) by [@zbeyens](https://github.com/zbeyens) –\n\n  - Removed `useDndBlock`, `useDragBlock`, and `useDropBlock` hooks in favor of `useDndNode`, `useDragNode`, and `useDropNode`.\n  - Removed `DndProvider` and `useDraggableStore`. Drop line state is now managed by `DndPlugin` as a single state object `dropTarget` containing both `id` and `line`.\n  - `useDropNode`: removed `onChangeDropLine` and `dropLine` options\n\n  Migration steps:\n\n  - Remove `DndProvider` from your draggable component (e.g. `draggable.tsx`)\n  - Replace `useDraggableStore` with `useEditorPlugin(DndPlugin).useOption`\n  - Remove `useDraggableState`. Use `const { isDragging, previewRef, handleRef } = useDraggable`\n  - Remove `useDraggableGutter`. Set `contentEditable={false}` to your gutter element\n  - Remove `props` from `useDropLine`. Set `contentEditable={false}` to your drop line element\n  - Remove `withDraggable`, `useWithDraggable`. Use [`DraggableAboveNodes`](https://github.com/udecode/plate/pull/3878/files#diff-493c12ebed9c3ef9fd8c3a723909b18ad439a448c0132d2d93e5341ee0888ad2) instead\n\n## @udecode/plate-indent-list@41.0.0\n\n- [#3830](https://github.com/udecode/plate/pull/3830) by [@felixfeng33](https://github.com/felixfeng33) –\n  - Move `render.belowNodes` from `IndentListPlugin` to `BaseIndentListPlugin`. Props type for `listStyleTypes.liComponent` and `listStyleTypes.markerComponent` options is now `SlateRenderElementProps` instead of `PlateRenderElementProps`\n  - Move `someIndentList`, `someIndentTodo` from `@udecode/plate-indent-list/react` to `@udecode/plate-indent-list`\n\n## @udecode/plate-layout@41.0.2\n\n- [#3878](https://github.com/udecode/plate/pull/3878) by [@zbeyens](https://github.com/zbeyens) –\n\n  - `insertColumnGroup`: rename `layout` to `columns`\n  - Remove `setColumnWidth`, `useColumnState`. Use `setColumns` instead\n\n## @udecode/plate-table@41.0.0\n\n- [#3830](https://github.com/udecode/plate/pull/3830) by [@felixfeng33](https://github.com/felixfeng33) – Move from `@udecode/plate-table/react` to `@udecode/plate-table`:\n\n  - `deleteColumn`\n  - `deleteColumnWhenExpanded`\n  - `deleteRow`\n  - `deleteRowWhenExpanded`\n  - `getTableColumn`\n  - `getTableGridAbove`\n  - `getTableGridByRange`\n  - `getTableRow`\n  - `insertTable`\n  - `mergeTableCells`\n  - `moveSelectionFromCell`\n  - `overrideSelectionFromCell`\n  - `unmergeTableCells`\n  - `withDeleteTable`\n  - `withGetFragmentlable`\n  - `withInsertFragmentTable`\n  - `withInsertTextTable`\n  - `withMarkTable`\n  - `withSelectionTable`\n  - `withSetFragmentDataTable`\n  - `withTable`\n\n# 40.0.0\n\n## @udecode/slate-react@40.0.0\n\n- [#3744](https://github.com/udecode/plate/pull/3744) by [@zbeyens](https://github.com/zbeyens) –\n  - Add `slate-dom` as a peer dependency.\n  - Update `slate-react` peer dependency to `>=0.111.0`\n\n## @udecode/plate-ai@40.0.0\n\n- [#3744](https://github.com/udecode/plate/pull/3744) by [@zbeyens](https://github.com/zbeyens) –\n  - Remove `scrollContainerSelector` option in favor of `useEditorContainerRef`\n\n## @udecode/plate-heading@40.0.0\n\n- [#3744](https://github.com/udecode/plate/pull/3744) by [@zbeyens](https://github.com/zbeyens) –\n  - Remove `scrollContainerSelector` option in favor of `useEditorContainerRef`\n\n## @udecode/plate-layout@40.0.0\n\n- [#3744](https://github.com/udecode/plate/pull/3744) by [@zbeyens](https://github.com/zbeyens) –\n  - Remove `toggleColumns` in favor of `toggleColumnGroup`\n  - Remove `insertEmptyColumn` in favor of `insertColumn`\n\n# 39.0.0\n\n## @udecode/plate-dnd@39.0.0\n\n- [#3597](https://github.com/udecode/plate/pull/3597) by [@zbeyens](https://github.com/zbeyens) – The following changes were made to improve performance:\n\n  - Refactored `useDraggable` hook to focus on core dragging functionality:\n    - Removed `dropLine`. Use `useDropLine().dropLine` instead.\n    - Removed `groupProps` from the returned object – `isHovered`, and `setIsHovered` from the returned state. Use CSS instead.\n    - Removed `droplineProps`, and `gutterLeftProps` from the returned object. Use `useDropLine().props`, `useDraggableGutter().props` instead.\n\n## @udecode/plate-selection@39.0.0\n\n- [#3597](https://github.com/udecode/plate/pull/3597) by [@zbeyens](https://github.com/zbeyens) – The following changes were made to improve performance:\n\n  - Removed `useHooksBlockSelection` in favor of `BlockSelectionAfterEditable`\n  - Removed `slate-selected` class from `BlockSelectable`. You can do it on your components using `useBlockSelected()` instead, or by using our new `block-selection.tsx` component.\n  - Introduced `useBlockSelectableStore` for managing selectable state.\n\n# 38.0.1\n\n## @udecode/plate-core@38.0.1\n\n- [#3506](https://github.com/udecode/plate/pull/3506) by [@zbeyens](https://github.com/zbeyens) –\n\n  - Change `plugin.options` merging behavior from deep merge to shallow merge.\n  - This affects `.extend()`, `.configure()`, and other methods that modify plugin options.\n  - This update addresses a **performance regression** introduced in v37 that affected editor creation.\n\n  Before:\n\n  ```ts\n  const plugin = createSlatePlugin({\n    key: 'test',\n    options: { nested: { a: 1 } },\n  }).extend({\n    options: { nested: { b: 1 } },\n  });\n\n  // Result: { nested: { a: 1, b: 1 } }\n  ```\n\n  After:\n\n  ```ts\n  const plugin = createSlatePlugin({\n    key: 'test',\n    options: { nested: { a: 1 } },\n  }).extend(({ getOptions }) => ({\n    options: {\n      ...getOptions(),\n      nested: { ...getOptions().nested, b: 1 },\n    },\n  }));\n\n  // Result: { nested: { a: 1, b: 1 } }\n  ```\n\n  Migration:\n\n  - If you're using nested options and want to preserve the previous behavior, you need to manually spread both the top-level options and the nested objects.\n  - If you're not using nested options, no changes are required.\n\n- Rename all base plugins that have a React plugin counterpart to be prefixed with `Base`. This change improves clarity and distinguishes base implementations from potential React extensions. Use base plugins only for server-side environments or to extend your own DOM layer.\n- Import the following plugins from `/react` entry: `AlignPlugin`, `CalloutPlugin`, `EquationPlugin`, `FontBackgroundColorPlugin`, `FontColorPlugin`, `FontFamilyPlugin`, `FontSizePlugin`, `FontWeightPlugin`, `InlineEquationPlugin`, `LineHeightPlugin`, `TextIndentPlugin`, `TocPlugin`\n\n# 37.0.0\n\nMigration example: https://github.com/udecode/plate/pull/3480\n\nWe recommend to upgrade to `@udecode/plate-core@38.1.0` in one-go.\n\n## @udecode/plate-alignment@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createAlignPlugin` -> `AlignPlugin`\n  - `setAlign`: remove `key` option\n\n## @udecode/plate-autoformat@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createAutoformatPlugin` -> `AutoformatPlugin`\n\n## @udecode/plate-basic-elements@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createBasicElementPlugins` -> `BasicElementsPlugin`\n  - `createBlockquotePlugin` -> `BlockquotePlugin`\n  - `createCodeBlockPlugin` -> `CodeBlockPlugin`\n  - `createHeadingPlugin` -> `HeadingPlugin`\n  - Move paragraph plugin to `@udecode/plate-core`\n\n## @udecode/plate-basic-marks@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createBasicMarksPlugins` -> `BasicMarksPlugin`\n  - `createBoldPlugin` -> `BoldPlugin`\n  - `createCodePlugin` -> `CodePlugin`\n  - `createItalicPlugin` -> `ItalicPlugin`\n  - `createStrikethroughPlugin` -> `StrikethroughPlugin`\n  - `createSubscriptPlugin` -> `SubscriptPlugin`\n  - `createSuperscriptPlugin` -> `SuperscriptPlugin`\n  - `createUnderlinePlugin` -> `UnderlinePlugin`\n  - All mark plugins removed `hotkey` option. Use `plugin.shortcuts` instead (see plate-core)\n\n## @udecode/plate-block-quote@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createBlockquotePlugin` -> `BlockquotePlugin`\n\n## @udecode/plate-break@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createSoftBreakPlugin` -> `SoftBreakPlugin`\n  - `createExitBreakPlugin` -> `ExitBreakPlugin`\n  - `createSingleLinePlugin` -> `SingleLinePlugin`\n\n## @udecode/plate-caption@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createCaptionPlugin` -> `CaptionPlugin`\n  - `CaptionPlugin` options:\n    - Rename `pluginKeys` to `plugins`\n    - Rename `focusEndCaptionPath` to `focusEndPath`\n    - Rename `focusStartCaptionPath` to `focusStartPath`\n    - Rename `showCaptionId` to `visibleId`\n    - Rename `isShow` to `isVisible`\n  - Move `captionGlobalStore` to `CaptionPlugin`\n\n## @udecode/plate-cloud@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createCloudPlugin` -> `CloudPlugin`\n\n## @udecode/plate-code-block@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createCodeBlockPlugin` -> `CodeBlockPlugin`\n  - NEW `CodeLinePlugin`\n  - NEW `CodeSyntaxPlugin`\n  - Remove `getCodeLineType`, use `editor.getType(CodeLinePlugin)` instead\n\n## @udecode/plate-combobox@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - Split build into `@udecode/plate-combobox` and `@udecode/plate-combobox/react`.\n\n## @udecode/plate-comments@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createCommentsPlugin` -> `CommentsPlugin`\n  - Move `commentsStore` to `CommentsPlugin`\n  - Remove `CommentsProvider` and its hooks\n  - Remove `useCommentsStates` (replaced by direct option access)\n  - Remove `useCommentsSelectors` (replaced by option selectors)\n  - Remove `useCommentsActions` (replaced by api methods)\n  - Replace `useUpdateComment` with `api.comment.updateComment`\n  - Replace `useAddRawComment` with `api.comment.addRawComment`\n  - Replace `useAddComment` with `api.comment.addComment`\n  - Replace `useRemoveComment` with `api.comment.removeComment`\n  - Replace `useResetNewCommentValue` with `api.comment.resetNewCommentValue`\n  - Replace `useNewCommentText` with `options.newText`\n  - Replace `useMyUser` with `options.myUser`\n  - Replace `useUserById` with `options.userById`\n  - Replace `useCommentById` with `options.commentById`\n  - Replace `useActiveComment` with `options.activeComment`\n  - Replace `useAddCommentMark` with `insert.comment`\n\n## @udecode/plate-common@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - Split build into `@udecode/plate-common` and `@udecode/plate-common/react`.\n  - NEW `/react` exports `@udecode/react-hotkeys`\n\n## @udecode/plate-core@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) – **Plugin System**:\n\n  Decoupling React in all packages:\n\n  - Split build into `@udecode/plate-core` and `@udecode/plate-core/react`\n  - NEW `SlatePlugin` as the foundation for all plugins\n  - `PlatePlugin` extends `SlatePlugin` with React-specific plugin features\n\n  **Plugin Creation**:\n\n  - Remove `createPluginFactory`\n  - NEW `createSlatePlugin`: vanilla\n  - NEW `createTSlatePlugin`: vanilla explicitly typed\n  - NEW `createPlatePlugin`: React\n  - NEW `createTPlatePlugin`: React explicitly typed\n  - NEW `toPlatePlugin`: extend a vanilla plugin into a React plugin\n  - NEW `toTPlatePlugin`: extend a vanilla plugin into a React plugin explicitly typed\n  - Rename all plugins starting with `createNamePlugin()` to `NamePlugin`\n\n  Before:\n\n  ```typescript\n  const MyPluginFactory = createPluginFactory({\n    key: 'myPlugin',\n    isElement: true,\n    component: MyComponent,\n  });\n  const plugin = MyPluginFactory();\n  ```\n\n  After:\n\n  ```typescript\n  const plugin = createSlatePlugin({\n    key: 'myPlugin',\n    node: {\n      isElement: true,\n      component: MyComponent,\n    },\n  });\n  const reactPlugin = toPlatePlugin(plugin);\n  ```\n\n  **Plugin Configuration**:\n\n  - Remove all `NamePlugin` option types, use `NameConfig` instead.\n  - `NameConfig` as the new naming convention for plugin configurations.\n\n  Before:\n\n  ```typescript\n  createPluginFactory<HotkeyPlugin>({\n    handlers: {\n      onKeyDown: onKeyDownToggleElement,\n    },\n    options: {\n      hotkey: ['mod+opt+0', 'mod+shift+0'],\n    },\n  });\n  ```\n\n  After:\n\n  ```typescript\n  export const ParagraphPlugin = createPlatePlugin({\n    key: 'p',\n    node: { isElement: true },\n  }).extend({ editor, type }) => ({\n    shortcuts: {\n      toggleParagraph: {\n        handler: () => {\n          editor.tf.toggle.block({ type });\n        },\n        keys: [\n          [Key.Mod, Key.Alt, '0'],\n          [Key.Mod, Key.Shift, '0'],\n        ],\n        preventDefault: true,\n      },\n    },\n  })\n  ```\n\n  - `toggleParagraph` is now a shortcut for `editor.tf.toggle.block({ type: 'p' })` for the given keys\n  - Multiple shortcuts can be defined per plugin, and any shortcut can be disabled by setting `shortcuts.toggleParagraph = null`\n  - Note the typing support using `Key`\n\n  **Plugin Properties**:\n\n  Rename `SlatePlugin` / `PlatePlugin` properties:\n\n  - `type` -> `node.type`\n  - `isElement` -> `node.isElement`\n  - `isLeaf` -> `node.isLeaf`\n  - `isInline` -> `node.isInline`\n  - `isMarkableVoid` -> `node.isMarkableVoid`\n  - `isVoid` -> `node.isVoid`\n  - `component` -> `node.component` or `render.node`\n  - `props` -> `node.props`\n  - `overrideByKey` -> `override.plugins`\n  - `renderAboveEditable` -> `render.aboveEditable`\n  - `renderAboveSlate` -> `render.aboveSlate`\n  - `renderAfterEditable` -> `render.afterEditable`\n  - `renderBeforeEditable` -> `render.beforeEditable`\n  - `inject.props` -> `inject.nodeProps`\n  - `inject.props.validTypes` -> `inject.targetPlugins`\n  - `inject.aboveComponent` -> `render.aboveNodes`\n  - `inject.belowComponent` -> `render.belowNodes`\n  - `inject.pluginsByKey` -> `inject.plugins`\n  - `editor.insertData` -> `parser`\n    - NEW `parser.format` now supports `string[]`\n    - NEW `parser.mimeTypes: string[]`\n  - `deserializeHtml` -> `parsers.html.deserializer`\n  - `deserializeHtml.getNode` -> `parsers.html.deserializer.parse`\n  - `serializeHtml` -> `parsers.htmlReact.serializer`\n  - `withOverride` -> `extendEditor`\n  - All methods now have a single parameter: `SlatePluginContext<C>` or `PlatePluginContext<C>`, in addition to the method specific options. Some of the affected methods are:\n    - `decorate`\n    - `handlers`, including `onChange`. Returns `({ event, ...ctx }) => void` instead of `(editor, plugin) => (event) => void`\n    - `handlers.onChange`: `({ value, ...ctx }) => void` instead of `(editor, plugin) => (value) => void`\n    - `normalizeInitialValue`\n    - `editor.insertData.preInsert`\n    - `editor.insertData.transformData`\n    - `editor.insertData.transformFragment`\n    - `deserializeHtml.getNode`\n    - `deserializeHtml.query`\n    - `inject.props.query`\n    - `inject.props.transformProps`\n    - `useHooks`\n    - `withOverrides`\n\n  NEW `SlatePlugin` properties:\n\n  - `api`: API methods provided by this plugin\n  - `dependencies`: An array of plugin keys that this plugin depends on\n  - `node`: Node-specific configuration for this plugin\n  - `parsers`: Now accept `string` keys to add custom parsers\n  - `priority`: Plugin priority for registration and execution order\n  - `shortcuts`: Plugin-specific hotkeys\n  - `inject.targetPluginToInject`: Function to inject plugin config into other plugins specified by `inject.targetPlugins`\n\n  Before:\n\n  ```typescript\n  export const createAlignPlugin = createPluginFactory({\n    key: KEY_ALIGN,\n    inject: {\n      props: {\n        defaultNodeValue: 'start',\n        nodeKey: KEY_ALIGN,\n        styleKey: 'textAlign',\n        validNodeValues: ['start', 'left', 'center', 'right', 'end', 'justify'],\n        validTypes: ['p'],\n      },\n    },\n    then: (_, plugin) =>\n      mapInjectPropsToPlugin(editor, plugin, {\n        deserializeHtml: {\n          getNode: (el, node) => {\n            if (el.style.textAlign) {\n              node[plugin.key] = el.style.textAlign;\n            }\n          },\n        },\n      }),\n  });\n  ```\n\n  After:\n\n  ```typescript\n  export const AlignPlugin = createSlatePlugin({\n    inject: {\n      nodeProps: {\n        defaultNodeValue: 'start',\n        nodeKey: 'align',\n        styleKey: 'textAlign',\n        validNodeValues: ['start', 'left', 'center', 'right', 'end', 'justify'],\n      },\n      targetPluginToInject: ({ editor, plugin }) => ({\n        parsers: {\n          html: {\n            deserializer: {\n              parse: ({ element, node }) => {\n                if (element.style.textAlign) {\n                  node[editor.getType(plugin)] = element.style.textAlign;\n                }\n              },\n            },\n          },\n        },\n      }),\n      targetPlugins: [ParagraphPlugin.key],\n    },\n    key: 'align',\n  });\n  ```\n\n  **Plugin Shortcuts**:\n\n  - NEW `shortcuts` to add custom hotkeys to a plugin.\n  - Remove `hotkey` option from all plugins\n\n  Before:\n\n  ```typescript\n  type LinkPlugin = {\n    hotkey?: string;\n  };\n  ```\n\n  After:\n\n  ```typescript\n  type LinkConfig = PluginConfig<\n    // key\n    'p',\n    // options\n    { defaultLinkAttributes?: any },\n    // api\n    { link: { getAttributes: (editor: PlateEditor) => LinkAttributes } },\n    // transforms\n    { floatingLink: { hide: () => void } }\n  >;\n  ```\n\n  Shortcuts API:\n\n  - `handler` is called with the editor, event, and event details.\n  - `keys` is an array of keys to trigger the shortcut.\n  - `priority` is the priority of the shortcut over other shortcuts.\n  - `...HotkeysOptions` from `@udecode/react-hotkeys`\n\n  **Plugin Types**:\n\n  - Update `SlatePlugin`, `PlatePlugin` generics. `P, V, E` -> `C extends AnyPluginConfig = PluginConfig`\n  - Remove `PluginOptions`\n  - Remove `PlatePluginKey`\n  - Remove `HotkeyPlugin`, `ToggleMarkPlugin` in favor of `plugin.shortcuts`\n  - `WithPlatePlugin` -> `EditorPlugin`, `EditorPlatePlugin`\n  - `PlatePluginComponent` -> `NodeComponent`\n  - `InjectComponent*` -> `NodeWrapperComponent*`\n  - `PlatePluginInsertData` -> `Parser`\n  - `PlatePluginProps` -> `NodeProps`\n  - `RenderAfterEditable` -> `EditableSiblingComponent`\n  - `WithOverride` -> `ExtendEditor`\n  - `SerializeHtml` -> `HtmlReactSerializer`\n\n  **Plugin Store**:\n\n  - NEW each plugin has its own store, accessible via `plugin.optionsStore` and `plugin.useOptionsStore`\n  - `editor` has many methods to get, set and subscribe to plugin options\n\n  **Plugin Methods**:\n\n  - All plugin methods return a new plugin instance with the extended types.\n  - Remove `then`, use `extend` instead\n  - NEW `extend` method to deep merge a plugin configuration\n    - If you pass an object, it will be directly merged with the plugin config.\n    - If you pass a function, it will be called with the plugin config once the editor is resolved and should return the new plugin config.\n    - Object extensions always have the priority over function extensions.\n    - Extend multiple times to derive from the result of the previous extension.\n  - NEW `configure` method to configure the properties of existing plugins. The difference with `extend` is that `configure` with not add new properties to the plugin, it will only modify existing ones.\n  - NEW `extendPlugin` method to extend a nested plugin configuration.\n  - NEW `configurePlugin` method to configure the properties of a nested plugin.\n  - NEW `extendApi` method to extend the plugin API. The API is then merged into `editor.api[plugin.key]`.\n  - NEW `extendTransforms` method to extend the plugin transforms. The transforms is then merged into `editor.transforms[plugin.key]`.\n  - NEW `extendEditorApi` method to extend the editor API. The API is then merged into `editor.api`. Use this to add or override top-level methods to the editor.\n  - NEW `extendEditorTransforms` method to extend the editor transforms. The transforms is then merged into `editor.transforms`.\n  - NEW `extendOptions` method to extend the plugin options with selectors. Use `editor.useOption(plugin, 'optionKey')` to subscribe to an (extended) option.\n  - NEW `withComponent` to replace `plugin.node.component`\n\n  **Plugin Context**\n\n  Each plugin method now receive the plugin context created with `getEditorPlugin(editor, plugin)` as parameter:\n\n  - `api`\n  - `editor`\n  - `getOption`\n  - `getOptions`\n  - `plugin`\n  - `setOption`\n  - `setOptions`\n  - `tf`\n  - `type`\n  - `useOption`\n\n  **Core Plugins**:\n\n  - NEW `ParagraphPlugin` is now part of `core`\n  - NEW `DebugPlugin` is now part of `core`\n    - NEW `api.debug.log`, `api.debug.info`, `api.debug.warn`, `api.debug.error` methods\n    - `options.isProduction` to control logging in production environments\n    - `options.logLevel` to set the minimum log level\n    - `options.logger` to customize logging behavior\n    - `options.throwErrors` to control error throwing behavior, by default a `PlateError` will be thrown on `api.debug.error`\n  - NEW - You can now override a core plugin by adding it to `editor.plugins`. Last plugin wins.\n  - `createDeserializeHtmlPlugin` -> `HtmlPlugin`\n    - NEW `api.html.deserialize`\n  - `createEventEditorPlugin` -> `EventEditorPlugin`\n    - `eventEditorStore` -> `EventEditorStore`\n  - `createDeserializeAstPlugin` -> `AstPlugin`\n  - `createEditorProtocolPlugin` -> `SlateNextPlugin`\n    - NEW `editor.tf.toggle.block`\n    - NEW `editor.tf.toggle.mark`\n    - Remove `createNodeFactoryPlugin`, included in `SlateNextPlugin`.\n    - Remove `createPrevSelectionPlugin`, included in `SlateNextPlugin`.\n  - `createHistoryPlugin` -> `HistoryPlugin`\n  - `createInlineVoidPlugin` -> `InlineVoidPlugin`\n  - `createInsertDataPlugin` -> `ParserPlugin`\n  - `createLengthPlugin` -> `LengthPlugin`\n  - `createReactPlugin` -> `ReactPlugin`\n\n  **Editor Creation**:\n\n  NEW `withSlate`:\n\n  - Extends an editor into a vanilla Plate editor\n  - NEW `rootPlugin` option for configuring the root plugin\n\n  NEW `withPlate`:\n\n  - Extends an editor into a React Plate editor\n  - Now extends `withSlate` with React-specific enhancements\n  - NEW `useOptions` and `useOption` methods to the editor\n\n  NEW `createSlateEditor`:\n\n  - Create a vanilla Plate editor with server-side support\n\n  `createPlateEditor`:\n\n  - Plugin replacement mechanism: using `plugins`, any plugin with the same key that a previous plugin will **replace** it. That means you can now override core plugins that way, like `ReactPlugin`\n  - `root` plugin is now created from `createPlateEditor` option as a quicker way to configure the editor than passing `plugins`. Since plugins can have nested plugins (think as a recursive tree), `plugins` option will be passed to `root` plugin `plugins` option.\n  - Centralized editor resolution. Before, both `createPlateEditor` and `Plate` component were resolving the editor. Now, only `createPlateEditor` takes care of that. That means `id`, `value`, and other options are now controlled by `createPlateEditor`.\n  - Remove `createPlugins`, pass plugins directly:\n\n    - `components` -> `override.components`\n    - `overrideByKey` -> `override.plugins`\n\n  `createPlateEditor` options:\n\n  - Rename `normalizeInitialValue` option to `shouldNormalizeEditor`\n  - Move `components` to `override.components` to override components by key\n  - Move `overrideByKey` to `override.plugins` to override plugins by key\n  - Remove `disableCorePlugins`, use `override.enabled` instead\n  - NEW `value` to set the initial value of the editor.\n  - NEW `autoSelect?: 'end' | 'start' | boolean` to auto select the start of end of the editor. This is decoupled from `autoFocus`.\n  - NEW `selection` to control the initial selection.\n  - NEW `override.enabled` to disable plugins by key\n  - NEW `rootPlugin?: (plugin: AnyPlatePlugin) => AnyPlatePlugin` to configure the root plugin. From here, you can for example call `configurePlugin` to configure any plugin.\n  - NEW `api`, `decorate`, `extendEditor`, `handlers`, `inject`, `normalizeInitialValue`, `options`, `override`, `priority`, `render`, `shortcuts`, `transforms`, `useHooks`. These options will be passed to the very first `rootPlugin`.\n\n  NEW `usePlateEditor()` hook to create a `PlateEditor` in a React component:\n\n  - Uses `createPlateEditor` and `useMemo` to avoid re-creating the editor on every render.\n  - Dependencies can be added to the hook to re-create the editor on demand. `id` option is always used as dependency.\n\n  **Editor Methods**:\n\n  `editor: PlateEditor`:\n\n  - Move `redecorate` to `editor.api.redecorate`\n  - Move `reset` to `editor.tf.reset`\n  - Move `plate.set` to `editor.setPlateState`\n  - Move `blockFactory` to `editor.api.create.block`\n  - Move `childrenFactory` to `editor.api.create.value`\n  - Rename `plugins` to `pluginList`\n  - Rename `pluginsByKey` to `plugins`\n  - NEW `getApi()` to get the editor API\n  - NEW `getTransforms()` to get the editor transforms\n  - Remove `getPlugin(editor, key)`, use `editor.getPlugin(plugin) or editor.getPlugin({ key })`\n  - Remove `getPluginType`, use `editor.getType(plugin)` to get node type\n  - Remove `getPluginInjectProps(editor, key)`, use `editor.getPlugin(plugin).inject.props`\n  - NEW `getOptionsStore()` to get a plugin options store\n  - Remove `getPluginOptions`, use `getOptions()`\n  - NEW `getOption()` to get a plugin option\n  - NEW `setOption()` to set a plugin option\n  - NEW `setOptions()` to set multiple plugin options. Pass a function to use Immer. Pass an object to merge the options.\n  - NEW `useOption` to subscribe to a plugin option in a React component\n  - NEW `useOptions` to subscribe to a plugin options store in a React component\n  - Remove `getPlugins`, use `editor.pluginList`\n  - Remove `getPluginsByKey`, use `editor.plugins`\n  - Remove `mapInjectPropsToPlugin`\n\n  **Editor Types**:\n\n  The new generic types are:\n\n  - `V extends Value = Value`, `P extends AnyPluginConfig = PlateCorePlugin`\n  - That means this function will **infer all plugin configurations** from the options passed to it:\n    - `key`\n    - `options`\n    - `api`\n    - `transforms`\n  - Can't infer for some reason? Use `createTPlateEditor` for explicit typing.\n\n  ```ts\n  const editor = createPlateEditor({ plugins: [TablePlugin] });\n  editor.api.htmlReact.serialize(); // core plugin is automatically inferred\n  editor.tf.insert.tableRow(); // table plugin is automatically inferred\n  ```\n\n  **Plate Component**\n\n  `PlateProps`:\n\n  - `editor` is now required. If `null`, `Plate` will not render anything. As before, `Plate` remounts on `id` change.\n  - Remove `id`, `plugins`, `maxLength`, pass these to `createPlateEditor` instead\n  - Remove `initialValue`, `value`, pass `value` to `createPlateEditor` instead\n  - Remove `editorRef`\n  - Remove `disableCorePlugins`, override `plugins` in `createPlateEditor` instead\n\n  Utils:\n\n  - Remove `useReplaceEditor` since `editor` is now always controlled\n  - NEW `useEditorPlugin` to get the editor and the plugin context.\n\n  Types:\n\n  - `PlateRenderElementProps`, `PlateRenderLeafProps` generics: `V, N` -> `N, C`\n\n  **Plate Store**:\n\n  - Remove `plugins` and `rawPlugins`, use `useEditorRef().plugins` instead, or listen to plugin changes with `editor.useOption(plugin, <optionKey>)`\n  - Remove `value`, use `useEditorValue()` instead\n  - Remove `editorRef`, use `useEditorRef()` instead\n\n  **Miscellaneous Changes**\n\n  - `slate >=0.103.0` peer dependency\n  - `slate-react >=0.108.0` peer dependency\n  - New dependency `@udecode/react-hotkeys`\n  - Remove `ELEMENT_`, `MARK_` and `KEY_` constants. Use `NamePlugin.key` instead.\n  - Replace `ELEMENT_DEFAULT` with `ParagraphPlugin.key`.\n  - Remove `getTEditor`\n  - Rename `withTReact` to `withPlateReact`\n  - Rename `withTHistory` to `withPlateHistory`\n  - Rename `usePlateId` to `useEditorId`\n  - Remove `usePlateSelectors().id()`, `usePlateSelectors().value()`, `usePlateSelectors().plugins()`, use instead `useEditorRef().<key>`\n  - Rename `toggleNodeType` to `toggleBlock`\n  - `toggleBlock` options:\n    - Rename `activeType` to `type`\n    - Rename `inactiveType` to `defaultType`\n  - Remove `react-hotkeys-hook` re-exports. Use `@udecode/react-hotkeys` instead.\n\n  Types:\n\n  - Move `TEditableProps`, `TRenderElementProps` to `@udecode/slate-react`\n  - Remove `<V extends Value>` generic in all functions where not used\n  - Remove `PlatePluginKey`\n  - Remove `OverrideByKey`\n  - Remove `PlateId`\n\n## @udecode/plate-csv@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createDeserializeCsvPlugin` -> `CsvPlugin`\n\n## @udecode/plate-cursor@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createCursorPlugin` -> `CursorPlugin`\n\n## @udecode/plate-date@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createDatePlugin` -> `DatePlugin`\n\n## @udecode/plate-diff@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createDiffPlugin` -> `DiffPlugin`\n\n## @udecode/plate-dnd@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createDndPlugin` -> `DndPlugin`\n  - Remove `editor.isDragging`, use `editor.getOptions(DndPlugin).isDragging` instead\n  - Move `dndStore` to `DndPlugin`\n\n## @udecode/plate-docx@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createDeserializeDocxPlugin` -> `DocxPlugin`\n\n## @udecode/plate-emoji@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createEmojiPlugin` -> `EmojiPlugin`\n  - NEW `EmojiInputPlugin`\n\n## @udecode/plate-excalidraw@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createExcalidrawPlugin` -> `ExcalidrawPlugin`\n  - `insertExcalidraw` remove `key` option\n\n## @udecode/plate-find-replace@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createFindReplacePlugin` -> `FindReplacePlugin`\n\n## @udecode/plate-floating@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - Remove unused generics\n\n## @udecode/plate-font@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createFontBackgroundColorPlugin` -> `FontBackgroundColorPlugin`\n  - `createFontColorPlugin` -> `FontColorPlugin`\n  - `createFontSizePlugin` -> `FontSizePlugin`\n  - `createFontFamilyPlugin` -> `FontFamilyPlugin`\n  - `createFontWeightPlugin` -> `FontWeightPlugin`\n\n## @udecode/plate-heading@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createHeadingPlugin` -> `HeadingPlugin`\n  - Replace `ELEMENT_H1` with `HEADING_KEYS.H1`\n  - Replace `KEYS_HEADING` with `HEADING_LEVELS`\n\n## @udecode/plate-highlight@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createHighlightPlugin` -> `HighlightPlugin`\n\n## @udecode/plate-horizontal-rule@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createHorizontalRulePlugin` -> `HorizontalRulePlugin`\n\n## @udecode/plate-html@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createDeserializeHtmlPlugin` -> `HtmlPlugin`\n  - Rename `deserializeHtml` plugin to `html`\n  - Rename `deserializeHtml.getNode` to `parse`\n\n## @udecode/plate-indent@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createIndentPlugin` -> `IndentPlugin`\n\n## @udecode/plate-indent-list@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createIndentListPlugin` -> `IndentListPlugin`\n  - Rename `injectIndentListComponent` to `renderIndentListBelowNodes`\n  - Replace `normalizeIndentList` with `withNormalizeIndentList`\n  - Replace `deleteBackwardIndentList` with `withDeleteBackwardIndentList`\n  - Replace `insertBreakIndentList` with `withInsertBreakIndentList`\n  - Remove types: `LiFC` (use `PlateRenderElementProps`), `MarkerFC` (use `Omit<PlateRenderElementProps, 'children'>`)\n\n## @udecode/plate-juice@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createJuicePlugin` -> `JuicePlugin`\n\n## @udecode/plate-kbd@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createKbdPlugin` -> `KbdPlugin`\n\n## @udecode/plate-layout@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createColumnPlugin` -> `ColumnPlugin`\n  - NEW `ColumnItemPlugin`\n\n## @udecode/plate-line-height@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createLineHeightPlugin` -> `LineHeightPlugin`\n\n## @udecode/plate-link@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createLinkPlugin` -> `LinkPlugin`\n  - Move `floatingLinkStore` to `LinkPlugin`\n\n## @udecode/plate-list@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createListPlugin` -> `ListPlugin`\n  - NEW `BulletedListPlugin`\n  - NEW `NumberedListPlugin`\n  - NEW `ListItemPlugin`\n  - NEW `ListItemContentPlugin`\n  - NEW list transforms: `toggle.list`, `toggle.bulletedList`, `toggle.numberedList`\n  - Remove type utils: `getListItemType`, `getUnorderedListType`, `getOrderedListType`, `getListItemContentType`\n  - Replace `insertBreakList(editor)` with `withInsertBreakList(ctx)`\n  - Replace `insertFragmentList(editor)` with `withInsertFragmentList(ctx)`\n  - Replace `insertBreakTodoList(editor)` with `withInsertBreakTodoList(ctx)`\n  - Replace `deleteForwardList(editor)` with `withdeleteForwardList(ctx)`\n  - Replace `deleteBackwardList(editor)` with `withdeleteBackwardList(ctx)`\n  - Move list options from `ul` and `ol` to `list` plugin\n  - `toggleList` options are now `{ type: string }`\n\n## @udecode/plate-markdown@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createDeserializeMdPlugin` -> `MarkdownPlugin`\n\n## @udecode/plate-math@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createMathPlugin` -> `MathPlugin`\n\n## @udecode/plate-media@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createMediaPlugin` -> `MediaPlugin`\n  - `FloatingMediaUrlInput`, `submitFloatingMedia` rename option `pluginKey` -> `plugin`\n  - `insertMediaEmbed` remove `key` option\n\n## @udecode/plate-mention@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createMentionPlugin` -> `MentionPlugin`\n  - NEW `MentionInputPlugin`\n  - Remove `createMentionNode` option, override `api.insert.mention` instead\n\n## @udecode/plate-node-id@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createNodeIdPlugin` -> `NodeIdPlugin`\n\n## @udecode/plate-normalizers@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createNormalizersPlugin` -> `NormalizersPlugin`\n\n## @udecode/plate@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - NEW `@udecode/plate-layout`\n  - NEW `/react` exports `@udecode/react-hotkeys`\n  - Split build into `@udecode/plate` and `@udecode/plate/react`.\n  - Remove `@udecode/plate-paragraph`\n  - All stores now start with a capital letter\n\n## @udecode/plate-utils@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - Remove `onKeyDownToggleElement`, use shortcuts instead.\n  - Remove `onKeyDownToggleMark`, use shortcuts instead.\n\n## @udecode/plate-playwright@37.0.0\n\n- [#3473](https://github.com/udecode/plate/pull/3473) by [@12joan](https://github.com/12joan) – New package for integrating Plate with Playwright tests\n\n## @udecode/plate-reset-node@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createResetNodePlugin` -> `ResetNodePlugin`\n\n## @udecode/plate-resizable@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - Peer dependencies updated\n\n## @udecode/plate-select@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createSelectOnBackspacePlugin` -> `SelectOnBackspacePlugin`\n  - `createDeletePlugin` -> `DeletePlugin`\n\n## @udecode/plate-selection@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - Rename `createSelectionPlugin` to `BlockSelectionPlugin`\n  - Remove `isNodeBlockSelected`, `isBlockSelected`, `hasBlockSelected`, `useBlockSelected` functions\n    - Use `editor.getOptions(BlockSelectionPlugin)` or `editor.useOptions(BlockSelectionPlugin)` instead\n  - Remove `addSelectedRow` function\n    - Use `editor.api.blockSelection.addSelectedRow` instead\n  - Remove `withSelection` HOC\n  - Rename `onCloseBlockSelection` to `onChangeBlockSelection`\n  - Moved `blockSelectionStore` to `BlockSelectionPlugin`\n  - Moved `blockContextMenuStore` to `BlockContextMenuPlugin`\n  - Remove `BlockStartArea` and `BlockSelectionArea` components\n    - Use `areaOptions` in `BlockSelectionPlugin` for configuration instead\n  - Remove dependency on `@viselect/vanilla` package\n    - Forked and integrated selection functionality locally\n  - Add `BlockContextMenuPlugin`, which is now used by `BlockSelectionPlugin`\n    - No need to add it manually\n  - Fix scroll-related bugs in the selection functionality\n  - Improve performance and reliability of block selection\n\n## @udecode/plate-slash-command@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createSlashPlugin` -> `SlashPlugin`\n  - NEW `SlashInputPlugin`\n\n## @udecode/slate@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) – `createTEditor`:\n\n  - Implement default methods for `slate-react` and `slate-history` in `createTEditor`\n  - Add `noop` function to provide default implementations for unimplemented editor methods\n\n  Types:\n\n  - Merge `ReactEditor` and `HistoryEditor` interfaces into `TEditor`, removing `TReactEditor` and `THistoryEditor`\n  - Remove `Value` generic type parameter from function signatures and type definitions\n  - Replace `V extends Value` with `E extends TEditor` for improved type inference\n  - Simplify `TEditor<V>` to `TEditor` in many places\n  - Refactor element-related types, where `E extends TEditor` in all cases:\n    - `EElement<V>` to `ElementOf<E>`\n    - `EText<V>` to `TextOf<E>`\n    - `ENode<V>` to `NodeOf<E>`\n    - `EDescendant<V>` to `DescendantOf<E>`\n    - `EAncestor<V>` to `AncestorOf<E>`\n    - `EElementOrText<V>` to `ElementOrTextOf<E>`\n  - Update `TNodeEntry` related types:\n    - `ENodeEntry<V>` to `NodeEntryOf<E>`\n    - `EElementEntry<V>` to `ElementEntryOf<E>`\n    - `ETextEntry<V>` to `TextEntryOf<E>`\n    - `EAncestorEntry<V>` to `AncestorEntryOf<E>`\n    - `EDescendantEntry<V>` to `DescendantEntryOf<E>`\n  - Remove unused types:\n    - `EElementEntry<V>`\n    - `ETextEntry<V>`\n    - `EDescendantEntry<V>`\n\n## @udecode/slate-react@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) – Types:\n\n  - Remove `TReactEditor` type, as it's now integrated into the main `TEditor` type in `@udecode/slate`. Use `TEditor` instead.\n  - Replace `V extends Value` with `E extends TEditor` for improved type inference\n  - NEW `TEditableProps`, `TRenderElementProps`\n\n## @udecode/slate-utils@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) – Types:\n\n  - Replace `V extends Value` with `E extends TEditor` for improved type inference\n\n## @udecode/plate-suggestion@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createSuggestionPlugin` -> `SuggestionPlugin`\n  - Move `suggestionStore` to `SuggestionPlugin`\n  - Remove `SuggestionProvider` and its hooks\n  - Remove `useSuggestionStates` (replaced by direct option access)\n  - Remove `useSuggestionSelectors` (replaced by option selectors)\n  - Remove `useSuggestionActions` (replaced by api methods)\n  - Replace `useUpdateSuggestion` with `api.suggestion.updateSuggestion`\n  - Replace `useAddSuggestion` with `api.suggestion.addSuggestion`\n  - Replace `useRemoveSuggestion` with `api.suggestion.removeSuggestion`\n  - Replace `useSuggestionById` with `options.suggestionById`\n  - Replace `useSuggestionUserById` with `options.suggestionUserById`\n  - Replace `useCurrentSuggestionUser` with `options.currentSuggestionUser`\n  - Remove `editor.activeSuggestionId`, use plugin option\n  - Remove `useSetIsSuggesting`, use `editor.setOption`\n  - Remove `useSetActiveSuggestionId`, use `editor.setOption`\n  - Remove `editor.isSuggesting`, use plugin option\n  - Remove `SuggestionEditorProps` type\n\n## @udecode/plate-tabbable@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createTabbablePlugin` -> `TabbablePlugin`\n  - `TabbablePlugin` option `isTabbable`: remove first `editor` parameter\n\n## @udecode/plate-table@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createTablePlugin` -> `TablePlugin`\n  - NEW `TableRowPlugin`, `TableCellPlugin`, `TableCellHeaderPlugin`\n  - Replace `insertTableColumn` with `editor.insert.tableColumn`\n  - Replace `insertTableRow` with `editor.insert.tableRow`\n  - Move `cellFactory` option to `create.cell` api\n  - Move `getCellChildren` option to `table.getCellChildren` api\n\n## @udecode/plate-toggle@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createTogglePlugin` -> `TogglePlugin`\n  - Move `toggleControllerStore` to `TogglePlugin`\n  - Remove `setOpenIds` option\n  - Replace `isToggleOpen` with option `isOpen`\n  - Rename `injectToggle` to `renderToggleAboveNodes`\n\n## @udecode/plate-trailing-block@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createTrailingBlockPlugin` -> `TrailingBlockPlugin`\n\n## @udecode/plate-yjs@37.0.0\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createYjsPlugin` -> `YjsPlugin`\n  - Move `yjsStore` to `YjsPlugin`\n  - Move `editor.yjs.provider` to `options.provider`\n  - Rename `RenderAboveEditableYjs` to `YjsAboveEditable`\n\n# 36.0.0\n\nNo breaking changes\n\n# 35.0.0\n\n## @udecode/plate-code-block@35.0.0\n\n- [#3282](https://github.com/udecode/plate/pull/3282) by [@12joan](https://github.com/12joan) – Make the dependency on prismjs optional\n\n  New usage:\n\n  ```ts\n  // Import Prism with your supported languages\n  import Prism from 'prismjs';\n\n  import 'prismjs/components/prism-antlr4.js';\n  import 'prismjs/components/prism-bash.js';\n  import 'prismjs/components/prism-c.js';\n  // ...\n\n  const plugins = createPlugins([\n    createCodeBlockPlugin({\n      options: {\n        prism: Prism,\n      },\n    }),\n  ]);\n  ```\n\n# 34.0.0\n\n## @udecode/plate-selection@34.0.0\n\n- Breaking Change: The `selectedColor` option for `BlockSelectable` has been deprecated. Please use `useBlockSelected` to customize the style of each node component.\n\n- [#3241](https://github.com/udecode/plate/pull/3241) by [@felixfeng33](https://github.com/felixfeng33) – Add logic for the `block-context-menu` and improved the user experience for `block-selection`, such as interactions related to keyboard shortcuts, bug fixes.\n- Starting from this version, a single Cmd+A will no longer select the entire document but will select the entire block instead. Double Cmd+A will use the blockSelection plugin to select all blocks. To disable this behavior, pass handlers: `{ onKeyDown: null }`.\n\n# 33.0.0\n\n## @udecode/plate-serializer-md@33.0.0\n\n- [#3125](https://github.com/udecode/plate/pull/3125) by [@zbeyens](https://github.com/zbeyens) –\n  - `serializeMd`: remove `nodes` option. `editor.children` is now serialized\n\n# 32.0.0\n\nNone (CI release issue)\n\n# 31.0.0\n\nNone (CI release issue)\n\n# 30.0.0\n\n## @udecode/plate-table@30.0.0\n\n- [#2867](https://github.com/udecode/plate/pull/2867) by [@12joan](https://github.com/12joan) – Fix: in v28, `TableProvider` was incorrectly shared by all tables in the editor. `TableProvider` must now be rendered as part of `TableElement`.\n\n# 29.0.0\n\n## @udecode/plate-utils@29.0.0\n\n- [#2829](https://github.com/udecode/plate/pull/2829) by [@zbeyens](https://github.com/zbeyens) –\n  - Moved `withProps` to `@udecode/cn`\n  - Moved `PortalBody`, `Text`, `Box`, `createPrimitiveComponent`, `createSlotComponent`, `withProviders` to `@udecode/react-utils`\n  - Removed `getRootProps` (unused)\n\n# 28.0.0\n\n## @udecode/plate-core@28.0.0\n\n- [`822f6f56b`](https://github.com/udecode/plate/commit/822f6f56be526a6e26f904b9e767c0bc09f1e28b) by [@12joan](https://github.com/12joan) –\n  - Remove `{ fn: ... }` workaround for jotai stores that contain functions\n  - Breaking change: `usePlateSelectors`, `usePlateActions` and `usePlateStates` no longer accept generic type arguments. If custom types are required, cast the resulting values at the point of use, or use hooks like `useEditorRef` that still provide generics.\n\n# 27.0.0\n\n## @udecode/plate-comments@27.0.0\n\n- [#2763](https://github.com/udecode/plate/pull/2763) by [@12joan](https://github.com/12joan) –\n  - Migrate store to `jotai@2`\n  - Revert the breaking changes to `@udecode/plate-comments` made in 26.0.0\n\n## @udecode/plate-core@27.0.0\n\n- [#2763](https://github.com/udecode/plate/pull/2763) by [@12joan](https://github.com/12joan) –\n  - Migrate store from `jotai@1` to `jotai@2`\n    - New dependency: `jotai-x`. See https://github.com/udecode/jotai-x\n    - Accessing a store without an explicit provider component is no longer supported. Attempting to do so will result in a warning in the console: `Tried to access jotai store '${storeName}' outside of a matching provider.`\n  - Upgraded from `zustand@3` to `zustand@4`\n    - See https://github.com/udecode/zustand-x\n  - Rename `zustand-x` exports\n    - `StateActions` -> `ZustandStateActions`\n    - `StoreApi` -> `ZustandStoreApi`\n    - `createStore` -> `createZustandStore`\n    - Note that these exports are deprecated and should not be used in new code. They may be removed in a future version of Plate.\n\n## @udecode/plate-resizable@27.0.0\n\n- [#2763](https://github.com/udecode/plate/pull/2763) by [@12joan](https://github.com/12joan) –\n  - Migrate store to `jotai@2`\n  - Resizable components must now be wrapped inside a `ResizableProvider`\n\n# 26.0.0\n\n## @udecode/plate-comments@26.0.0\n\n- [#2760](https://github.com/udecode/plate/pull/2760) by [@12joan](https://github.com/12joan) –\n  - Renamed the `comments` prop on CommentsProvider to `initialComments` to reflect the fact that updating its value after the initial render has no effect\n  - Removed the following props from CommentsProvider, since they represent the internal state of the comments plugin and should not be controlled externally:\n    - `activeCommentId`\n    - `addingCommentId`\n    - `newValue`\n    - `focusTextarea`\n  - The following props on CommentsProvider can now be updated after the initial render (whereas prior to this version, doing so had no effect):\n    - `myUserId`\n    - `users`\n    - `onCommentAdd`\n    - `onCommentUpdate`\n    - `onCommentDelete`\n\n## @udecode/plate-serializer-html@26.0.0\n\n- [#2733](https://github.com/udecode/plate/pull/2733) by [@dimaanj](https://github.com/dimaanj) –\n  - [Breaking] `serializeHtml`: replaced option `slateProps` by `plateProps`.\n\n# 25.0.1\n\n## @udecode/plate-core@25.0.1\n\n- [#2729](https://github.com/udecode/plate/pull/2729) by [@12joan](https://github.com/12joan) – **This is a breaking change meant to be part of v25, hence the patch.**\n  On `deserializeHtml`, replace `stripWhitespace` with `collapseWhiteSpace`, defaulting to true. The `collapseWhiteSpace` option aims to parse white space in HTML according to the HTML specification, ensuring greater accuracy when pasting HTML from browsers.\n\n## @udecode/plate-comments@25.0.0\n\n- [#2725](https://github.com/udecode/plate/pull/2725) by [@EandrewJones](https://github.com/EandrewJones) – Remove `useCommentValue`, which was redundant with the hooks applied automatically in `CommentEditTextarea.tsx`.\n\n# 24.0.0\n\n## @udecode/plate-core@24.0.0\n\n- [#2629](https://github.com/udecode/plate/pull/2629) by [@zbeyens](https://github.com/zbeyens) –\n\n  - [**Breaking**] Rename `Plate` to `PlateContent`.\n  - [**Breaking**] Rename `PlateProvider` to `Plate`.\n  - [**Breaking**] Rendering `PlateContent` is now required in `Plate`. This allows you to choose where to render the editor next to other components like toolbar. Example:\n\n  ```tsx\n  // Before\n  <Plate />\n  // or\n  <PlateProvider>\n    <Plate />\n  </PlateProvider>\n\n  // After\n  <Plate>\n    <PlateContent />\n  </Plate>\n  ```\n\n  - [**Breaking**] Remove provider props such as `plugins` from `PlateContent`. These props should be passed to `Plate`.\n  - [**Breaking**] Remove `editableProps` prop from `PlateContent`. Move these as`PlateContent` props.\n  - [**Breaking**] Remove `children` prop from `PlateContent`. Render instead these components after `PlateContent`.\n  - [**Breaking**] Remove `firstChildren` prop from `PlateContent`. Render instead these components before `PlateContent`.\n  - [**Breaking**] Remove `editableRef` prop from `PlateContent`. Use `ref` instead.\n  - [**Breaking**] Remove `withPlateProvider`.\n  - [**Breaking**] Rename `usePlateEditorRef` to `useEditorRef`.\n  - [**Breaking**] Rename `usePlateEditorState` to `useEditorState`.\n  - [**Breaking**] Rename `usePlateReadOnly` to `useEditorReadOnly`. This hook can be used below `Plate` while `useReadOnly` can only be used in node components.\n  - [**Breaking**] Rename `usePlateSelection` to `useEditorSelection`.\n  - [**Breaking**] Rename store attributes `keyDecorate`, `keyEditor` and `keySelection` to `versionDecorate`, `versionEditor` and `versionSelection`. These are now numbers incremented on each change.\n  - [**Breaking**] Rename store attribute `isRendered` to `isMounted`.\n\n# 23.0.0\n\n## @udecode/plate-media@23.0.0\n\n- [#2537](https://github.com/udecode/plate/pull/2537) by [@haydencarlson](https://github.com/haydencarlson) – `MediaEmbedElement` is now more headless with a smaller bundle size.\n  Update the following components:\n\n  - `npx shadcn@canary add media-embed-element`\n    - now uses `react-lite-youtube-embed` for YouTube videos.\n    - now uses `react-tweet` for Twitter tweets.\n  - `npx shadcn@canary add image-element`\n\n  Breaking changes:\n\n  - Moved `Resizable` to `@udecode/plate-resizable`\n  - Moved `Caption`, `CaptionTextarea` to `@udecode/plate-caption`\n  - Removed `useMediaEmbed`, `MediaEmbedVideo`, `MediaEmbedTweet`, `Tweet`, `parseMediaUrl`, `mediaStore`\n  - Removed `@udecode/resizable`, `scriptjs`, `react-textarea-autosize` dependencies\n  - `MediaPlugin`\n    - removed `rules`. Use `parsers` option instead.\n    - removed `disableCaption`. Use `createCaptionPlugin` instead.\n  - Caption is now a separate plugin. Install `@udecode/plate-caption` and add it to your plugins:\n\n  ```ts\n  import { ELEMENT_IMAGE, ELEMENT_MEDIA_EMBED } from '@udecode/plate-media';\n\n  createCaptionPlugin({\n    options: { pluginKeys: [ELEMENT_IMAGE, ELEMENT_MEDIA_EMBED] },\n  });\n  ```\n\n## @udecode/plate-resizable@23.0.0\n\n- [#2541](https://github.com/udecode/plate/pull/2541) by [@zbeyens](https://github.com/zbeyens) –\n  - Package renamed to `@udecode/plate-resizable`.\n  - `ResizeHandle` is now fully headless: no style is applied by default. Add your own `Resizable`, `ResizeHandle` components:\n    - `npx shadcn@canary add resizable`\n\n## @udecode/plate-table@23.0\n\n- Removed `TableCellElementResizable`. Use `useTableCellElementResizableState` and `useTableCellElementResizable` instead.\n\n# 22.0.0\n\nHeadless UI.\n\n## @udecode/plate-ui@22.0.0\n\n- [#2471](https://github.com/udecode/plate/pull/2471) by [@zbeyens](https://github.com/zbeyens) – This package is now a CLI to generate components. Install it as a dev dependency. See https://platejs.org/docs/components/cli.\n\nMigration:\n\n- [Manual installation](https://platejs.org/docs/components/installation/manual).\n- For each unresolved import not listed in the following major changes (components from `@udecode/plate-ui-x`), generate the component using the [CLI](https://platejs.org/docs/components/cli).\n\n## @udecode/plate-comments@22.0.0\n\n- [#2471](https://github.com/udecode/plate/pull/2471) by [@zbeyens](https://github.com/zbeyens) – Removed:\n  - `AccountCircleIcon`\n  - `CheckIcon`\n  - `MoreVertIcon`\n  - `RefreshIcon`\n  - `AvatarImage`\n  - `CommentLinkButton`\n  - `CommentLinkDialog`\n  - `CommentLinkDialogCloseButton`\n  - `CommentLinkDialogCopyLink`\n  - `CommentLinkDialogInput`\n  - `PlateCommentLeaf` for `useCommentLeafState`\n\n## @udecode/plate-dnd@22.0.0\n\n- [#2471](https://github.com/udecode/plate/pull/2471) by [@zbeyens](https://github.com/zbeyens) – Removed:\n  - `Draggable`\n  - `DraggableBlock`\n  - `DraggableBlockToolbar`\n  - `DraggableBlockToolbarWrapper`\n  - `DraggableDropline`\n  - `DraggableGutterLeftProps`\n  - `DraggableRoot`\n  - `DragHandle`\n\n## @udecode/plate-link@22.0.0\n\n- [#2471](https://github.com/udecode/plate/pull/2471) by [@zbeyens](https://github.com/zbeyens) – Removed:\n  - `FloatingLink`\n  - `FloatingLinkEditButton`\n  - `FloatingLinkTextInput`\n  - `UnlinkButton`\n  - `LaunchIcon`\n  - `Link`\n  - `LinkIcon`\n  - `LinkOffIcon`\n  - `ShortTextIcon`\n\n## @udecode/plate-media@22.0.0\n\n- [#2471](https://github.com/udecode/plate/pull/2471) by [@zbeyens](https://github.com/zbeyens) – Removed:\n  - `MediaEmbed`\n\n## @udecode/plate@22.0.0\n\n- [#2471](https://github.com/udecode/plate/pull/2471) by [@zbeyens](https://github.com/zbeyens) – Plate 2.0 – Headless UI.\n  Read the docs about the new UI pattern: https://platejs.org/docs/components.\n\n  - Removed `@udecode/plate-ui` dependency.\n  - Removed `@udecode/plate-emoji` dependency. You can install it separately.\n  - Removed `styled-components` peerDependency.\n\n  Replaced `@udecode/plate-headless` dependency (deprecated) by:\n\n  - `@udecode/plate-alignment`\n  - `@udecode/plate-autoformat`\n  - `@udecode/plate-basic-elements`\n  - `@udecode/plate-basic-marks`\n  - `@udecode/plate-block-quote`\n  - `@udecode/plate-break`\n  - `@udecode/plate-code-block`\n  - `@udecode/plate-combobox`\n  - `@udecode/plate-comments`\n  - `@udecode/plate-common`\n  - `@udecode/plate-find-replace`\n  - `@udecode/plate-floating`\n  - `@udecode/plate-font`\n  - `@udecode/plate-heading`\n  - `@udecode/plate-highlight`\n  - `@udecode/plate-horizontal-rule`\n  - `@udecode/plate-indent`\n  - `@udecode/plate-indent-list`\n  - `@udecode/plate-kbd`\n  - `@udecode/plate-line-height`\n  - `@udecode/plate-link`\n  - `@udecode/plate-list`\n  - `@udecode/plate-media`\n  - `@udecode/plate-mention`\n  - `@udecode/plate-node-id`\n  - `@udecode/plate-normalizers`\n  - `@udecode/plate-paragraph`\n  - `@udecode/plate-reset-node`\n  - `@udecode/plate-select`\n  - `@udecode/plate-serializer-csv`\n  - `@udecode/plate-serializer-docx`\n  - `@udecode/plate-serializer-html`\n  - `@udecode/plate-serializer-md`\n  - `@udecode/plate-suggestion`\n  - `@udecode/plate-tabbable`\n  - `@udecode/plate-table`\n  - `@udecode/plate-trailing-block`\n  - `@udecode/resizable`\n\n## @udecode/plate-utils@22.0.0\n\n- [#2471](https://github.com/udecode/plate/pull/2471) by [@zbeyens](https://github.com/zbeyens) – Upgraded peer dependencies:\n  - `slate-react: >=0.95.0`\n    Removed:\n  - `useElementPrpos`\n  - `useWrapElement`\n  - `createComponentAs`\n  - `createElementAs`\n\n## @udecode/plate-table@22.0.0\n\n- [#2471](https://github.com/udecode/plate/pull/2471) by [@zbeyens](https://github.com/zbeyens) – Removed:\n  - `TableCellElement`\n  - `TableCellElementResizableWrapper`\n  - `TableCellElementRoot`\n  - `TableElement`\n  - `TableElementCol`\n  - `TableElementColGroup`\n  - `TableElementRoot`\n  - `TableElementTBody`\n  - `TableRowElement`\n  - `ArrowDropDownCircleIcon`\n  - `BorderAllIcon`\n  - `BorderBottomIcon`\n  - `BorderLeftIcon`\n  - `BorderNoneIcon`\n  - `BorderOuterIcon`\n  - `BorderRightIcon`\n  - `BorderTopIcon`\n\n# 21.0.0\n\n## @udecode/slate@21.0.0\n\n- [#2369](https://github.com/udecode/plate/pull/2369) by [@zbeyens](https://github.com/zbeyens) – Support `slate@0.94.0`, `slate-react@0.94.0` and `slate-history@0.93.0` by upgrading the peer dependencies.\n\n# 20.0.0\n\n## @udecode/plate-core@20.0.0\n\n- [`0077402`](https://github.com/udecode/plate/commit/00774029236d37737abdadf49b074e613e290792) by [@zbeyens](https://github.com/zbeyens) –\n  - This package has been split into multiple packages for separation of concerns and decoupled versioning:\n    - `@udecode/utils` is a collection of miscellaneous utilities. Can be used by any project.\n    - `@udecode/slate` is a collection of `slate` experimental features and bug fixes that may be moved into `slate` one day. It's essentially composed of the generic types. Can be used by vanilla `slate` consumers without plate.\n    - `@udecode/slate-react` is a collection of `slate-react` experimental features and bug fixes that that may be moved into `slate-react` one day. It's essentially composed of the generic types. Can be used by vanilla `slate-react` consumers without plate.\n    - `@udecode/plate-core` is the minimalistic core of plate. It essentially includes `Plate`, `PlateProvider` and their dependencies. Note this package is not dependent on the `*-utils` packages.\n    - `@udecode/slate-utils` is a collection of utils depending on `@udecode/slate`. Can be used by vanilla `slate` consumers without plate.\n    - `@udecode/plate-utils` is a collection of utils depending on `@udecode/slate-react` and `@udecode/plate-core`\n    - `@udecode/plate-common` re-exports the 6 previous packages and is a dependency of all the other packages. It's basically replacing `@udecore/plate-core` as a bundle.\n  - Removed `getPreventDefaultHandler` since it is no longer needed.\n    **Migration**:\n    - If using `@udecode/plate` or `@udecode/plate-headless`: none\n    - Else: find & replace `@udecode/plate-core` by `@udecode/plate-common`\n\n## @udecode/plate-link@20.0.0\n\n- [#2240](https://github.com/udecode/plate/pull/2240) by [@OliverWales](https://github.com/OliverWales) –\n  - Add `allowedSchemes` plugin option\n    - Any URL schemes other than `http(s)`, `mailto` and `tel` must be added to `allowedSchemes`, otherwise they will not be included in links\n\n## @udecode/plate-table@20.0.0\n\n- [#2251](https://github.com/udecode/plate/pull/2251) by [@zbeyens](https://github.com/zbeyens) –\n  - `TablePlugin` option `disableUnsetSingleColSize` has been renamed and inverted into `enableUnsetSingleColSize`. New default is disabled. **Migration**:\n    - if using `disableUnsetSingleColSize: true`, the option can be removed\n    - if using `disableUnsetSingleColSize: false`, use `enableUnsetSingleColSize: true`\n  - `getTableColumnIndex` second parameter type is now: `cellNode: TElement`\n\n## @udecode/plate-ui-dnd@20.0.0\n\n- [#2237](https://github.com/udecode/plate/pull/2237) by [@tmorane](https://github.com/tmorane) – Unstyled logic has been moved to `@udecode/plate-dnd`\n\n  ```ts\n  // before\n  import { createDndPlugin } from '@udecode/plate-ui-dnd';\n\n  // after\n  import { createDndPlugin } from '@udecode/plate-dnd';\n  ```\n\n  Only `withPlateDraggable`, `withPlateDraggables` and `PlateDraggable` are left in `@udecode/plate-ui-dnd`.\n  Renamed:\n\n  - `withDraggables` -> `withPlateDraggables`. In the second parameter, draggable props options have been moved under `draggableProps`:\n\n  ```tsx\n  // before\n  {\n    onRenderDragHandle: () => {}\n    styles,\n  }\n\n  // after\n  {\n    draggableProps: {\n      onRenderDragHandle: () => {}\n      styles,\n    },\n  }\n  ```\n\n## @udecode/plate-ui-table@20.0.0\n\n- [#2251](https://github.com/udecode/plate/pull/2251) by [@zbeyens](https://github.com/zbeyens) – Headless components and hooks moved to `@udecode/plate-table`, so the following components have been renamed:\n  - `TableElement` -> `PlateTableElement`\n    - removed table border to set it at the cell level\n    - `margin-left: 1px` to support cell borders\n    - if all columns have a fixed size, the table will have a dynamic width instead of always 100%\n  - `TableRowElement` -> `PlateTableRowElement`\n  - `TableCellElement` -> `PlateTableCellElement`\n    - removed td border in favor of td::before. The latter is responsible of having the border and the selected background color.\n    - z-index: td is 0, td::before is 10, td::before in selected state is 20, handle is 30, handle resize is 40.\n    - removed `selectedCell` div in favor of `::before`\n  - `TablePopover` -> `PlateTablePopover`\n    Styled props have been removed.\n\n# 19.0.0\n\n## @udecode/plate-core@19.0.0\n\n- [#2097](https://github.com/udecode/plate/pull/2097) by [@zbeyens](https://github.com/zbeyens) –\n  - upgrade deps, including typescript support for the new editor methods:\n  ```json\n  // from\n  \"slate\": \"0.78.0\",\n  \"slate-history\": \"0.66.0\",\n  \"slate-react\": \"0.79.0\"\n  // to\n  \"slate\": \"0.87.0\",\n  \"slate-history\": \"0.86.0\",\n  \"slate-react\": \"0.88.0\"\n  ```\n\n## @udecode/plate@19.0.0\n\n- [#2097](https://github.com/udecode/plate/pull/2097) by [@zbeyens](https://github.com/zbeyens) –\n  - due to esm issues, dnd plugin is not part of plate package anymore. To use it, install `@udecode/plate-ui-dnd`\n  ```ts\n  // before\n  import { createDndPlugin } from '@udecode/plate';\n  // after\n  import { createDndPlugin } from '@udecode/plate-ui-dnd';\n  ```\n  - upgrade peerDeps:\n  ```json\n  // from\n  \"slate\": \">=0.78.0\",\n  \"slate-history\": \">=0.66.0\",\n  \"slate-react\": \">=0.79.0\"\n  // to\n  \"slate\": \">=0.87.0\",\n  \"slate-history\": \">=0.86.0\",\n  \"slate-react\": \">=0.88.0\"\n  ```\n\n# 18.0.0\n\n## @udecode/plate-headless@18.0.0\n\n- [#1889](https://github.com/udecode/plate/pull/1889) by [@zbeyens](https://github.com/zbeyens) –\n  - `@udecode/plate-selection` package moved out from `@udecode/plate` because of https://github.com/Simonwep/selection/issues/124\n  - Migration:\n    - If not using `createBlockSelectionPlugin`, no migration is needed.\n    - Otherwise, install `@udecode/plate-selection` and import `createBlockSelectionPlugin` from that package.\n\n# 17.0.0\n\n## @udecode/plate-core@17.0.0\n\n- [#1871](https://github.com/udecode/plate/pull/1871) by [@zbeyens](https://github.com/zbeyens) –\n\n  - `usePlateStore`:\n    - Plate no longer has a global store containing all the editor states (zustand). Each editor store is now defined in a React context tree ([jotai](https://github.com/pmndrs/jotai)). If you need to access all the editor states at once (as you could do before), you'll need to build that layer yourself.\n    - Plate store is now accessible only below `PlateProvider` or `Plate` (provider-less mode). It means it's no longer accessible outside of a Plate React tree. If you have such use-case, you'll need to build your own layer to share the state between your components.\n    - You can nest many `PlateProvider` with different scopes (`id` prop). Default scope is `PLATE_SCOPE`\n    - Hook usage:\n      - `const value = usePlateSelectors(id).value()`\n      - `const setValue = usePlateActions(id).value()`\n      - `const [value, setValue] = usePlateStates(id).value()`\n    - removed from the store:\n      - `editableProps`, use the props instead\n      - `enabled`, use conditional rendering instead\n      - `isReady`, no point anymore as it's now directly ready\n    - `useEventPlateId` is still used to get the last focused editor id.\n    - Functions are stored in an object `{ fn: <here> }`\n      - `const setOnChange = usePlateActions(id).onChange()`\n      - `setOnChange({ fn: newOnChange })`\n  - `Plate`\n    - if rendered below `PlateProvider`, it will render `PlateSlate > PlateEditable`\n    - if rendered without `PlateProvider`, it will render `PlateProvider > PlateSlate > PlateEditable`\n    - default `id` is no longer `main`, it's now `PLATE_SCOPE`\n  - `PlateProvider`\n    - Each provider has an optional `scope`, so you can have multiple providers in the same React tree and use the plate hooks with the corresponding `scope`.\n    - Plate effects are now run in `PlateProvider`\n      - `initialValue, value, editor, normalizeInitialValue, normalizeEditor` are no longer defined in an effect (SSR support)\n    - Props:\n      - now extends the previous `Plate` props\n      - if using `PlateProvider`, set the provider props on it instead of `Plate`. `Plate` would only need `editableProps` and `PlateEditableExtendedProps`\n      - if not using it, set the provider props on `Plate`\n\n  ```tsx\n  // Before\n  <PlateProvider>\n    <Toolbar>\n      <AlignToolbarButtons />\n    </Toolbar>\n\n    <Plate<MyValue> editableProps={editableProps} <MyValue> initialValue={alignValue} plugins={plugins} />\n  </PlateProvider>\n\n  // After\n  <PlateProvider<MyValue> initialValue={alignValue} plugins={plugins}>\n    <Toolbar>\n      <AlignToolbarButtons />\n    </Toolbar>\n\n    <Plate<MyValue> editableProps={editableProps} />\n  </PlateProvider>\n\n  // After (provider-less mode)\n  <Plate<MyValue> editableProps={editableProps} initialValue={alignValue} plugins={plugins} />\n  ```\n\n  - types:\n    - store `editor` is no longer nullable\n    - store `value` is no longer nullable\n    - `id` type is now `PlateId`\n  - renamed:\n    - `SCOPE_PLATE` to `PLATE_SCOPE`\n    - `getEventEditorId` to `getEventPlateId`\n    - `getPlateActions().resetEditor` to `useResetPlateEditor()`\n  - removed:\n    - `plateIdAtom`\n    - `usePlateId` for `usePlateSelectors().id()`\n    - `EditablePlugins` for `PlateEditable`\n    - `SlateChildren`\n    - `PlateEventProvider` for `PlateProvider`\n    - `withPlateEventProvider` for `withPlateProvider`\n    - `usePlate`\n    - `usePlatesStoreEffect`\n    - `useEventEditorId` for `useEventPlateId`\n    - `platesStore, platesActions, platesSelectors, usePlatesSelectors`\n    - `getPlateActions` for `usePlateActions`\n    - `getPlateSelectors` for `usePlateSelectors`\n    - `getPlateEditorRef` for `usePlateEditorRef`\n    - `getPlateStore, usePlateStore`\n    - `EditorId` for `PlateId`\n\n## @udecode/plate-code-block@17.0.0\n\n- [#1871](https://github.com/udecode/plate/pull/1871) by [@zbeyens](https://github.com/zbeyens) –\n  - Removed these imports because of build errors:\n    - `prismjs/components/prism-django`\n    - `prismjs/components/prism-ejs`\n    - `prismjs/components/prism-php`\n\n## @udecode/plate-ui@17.0.0\n\n- [#1871](https://github.com/udecode/plate/pull/1871) by [@zbeyens](https://github.com/zbeyens) –\n  - Removed `[ELEMENT_CODE_BLOCK]: CodeBlockElement` from Plate UI. You can define it in your app.\n\n# 16.0.0\n\n## @udecode/plate@16.0.0\n\n## @udecode/plate-headless@16.0.0\n\n- [#1721](https://github.com/udecode/plate/pull/1721) by [@zbeyens](https://github.com/zbeyens) –\n  - deprecate `@udecode/plate-image` and `@udecode/plate-media-embed`, those got merged into `@udecode/plate-media`\n\n## @udecode/plate-media@16.0.0\n\n- [#1721](https://github.com/udecode/plate/pull/1721) by [@zbeyens](https://github.com/zbeyens) –\n  - removed:\n    - `useImageElement` for `useElement`\n    - `MediaEmbedUrlInput` for `FloatingMediaUrlInput`\n    - `parseEmbedUrl` for `parseMediaUrl`\n    - `EmbedProviders`\n  - renamed:\n    - `ImageImg` to `Image`\n    - `ImageCaptionTextarea` to `CaptionTextarea`\n    - `useImageCaptionString` to `useCaptionString`\n    - `ImageResizable` to `Resizable`\n\n## @udecode/plate-ui-table@16.0.0\n\n- [#1721](https://github.com/udecode/plate/pull/1721) by [@zbeyens](https://github.com/zbeyens) –\n- `TableElementBase` props:\n  - replace `onRenderContainer` by `floatingOptions` or by replacing `ELEMENT_TABLE` in the `createPlateUI` function.\n- `TablePopover` is now a floating instead of tippy\n- deps:\n  - replaced `plate-ui-popover` by `plate-floating`\n\n## @udecode/plate-ui@16.0.0\n\n- [#1721](https://github.com/udecode/plate/pull/1721) by [@zbeyens](https://github.com/zbeyens) –\n- deprecate `@udecode/plate-ui-popover` for `@udecode/plate-floating`\n\n# 15.0.0\n\n## @udecode/plate-combobox@15.0.0\n\n- [#1677](https://github.com/udecode/plate/pull/1677) by [@zbeyens](https://github.com/zbeyens) –\n  - deps:\n    - replaced `@udecode/plate-ui-popper` by `@udecode/plate-floating`\n  - `comboboxStore`:\n    - removed `popperContainer`, use `floatingOptions` instead\n    - removed `popperOptions`, use `floatingOptions` instead\n\n## @udecode/plate-link@15.0.0\n\n- [#1677](https://github.com/udecode/plate/pull/1677) by [@zbeyens](https://github.com/zbeyens) –\n  - `createLinkPlugin`\n    - removed `onKeyDownLink` for floating link\n    - removed `hotkey` for `triggerFloatingLinkHotkeys`\n  - removed:\n    - `getAndUpsertLink` for `upsertLink`\n    - `upsertLinkAtSelection` for `upsertLink`\n  - `LinkToolbarButton`:\n    - `onClick` now calls `triggerFloatingLink`\n\n## @udecode/plate-table@15.0.0\n\n- [#1677](https://github.com/udecode/plate/pull/1677) by [@zbeyens](https://github.com/zbeyens) –\n- remove `addRow` for `insertTableRow`\n- remove `addColumn` for `insertTableColumn`\n\n## @udecode/plate@15.0.0\n\n- [#1677](https://github.com/udecode/plate/pull/1677) by [@zbeyens](https://github.com/zbeyens) –\n  - remove `@udecode/plate-ui-popper` dep for `@udecode/plate-floating`\n\n## @udecode/plate-ui-button@15.0.0\n\n- [#1677](https://github.com/udecode/plate/pull/1677) by [@zbeyens](https://github.com/zbeyens) –\n  - moved `Button` to `@udecode/plate-button`\n  - `Button` is now unstyled\n\n## @udecode/plate-ui-popper@15.0.0\n\n- [#1677](https://github.com/udecode/plate/pull/1677) by [@zbeyens](https://github.com/zbeyens) –\n- deprecated, use instead `@udecode/plate-floating`\n\n## @udecode/plate-ui-toolbar@15.0.0\n\n- [#1677](https://github.com/udecode/plate/pull/1677) by [@zbeyens](https://github.com/zbeyens) –\n- remove `@udecode/plate-ui-popper` and `react-popper` deps for `@udecode/plate-floating`\n- `BalloonToolbarProps`:\n  - removed `popperOptions` for `floatingOptions`\n- remove `useBalloonToolbarPopper` for `useFloatingToolbar`\n\n# 14.0.0\n\n## @udecode/plate-core@14.0.0\n\n- [#1633](https://github.com/udecode/plate/pull/1633) by [@tjramage](https://github.com/tjramage) – Moved `serializeHtml` and its utils to `@udecode/plate-serializer-html` as it has a new dependency: [html-entities](https://www.npmjs.com/package/html-entities).\n  - If you're using `@udecode/plate`, no migration is needed\n  - Otherwise, import it from `@udecode/plate-serializer-html`\n\n# 13.0.0\n\n## @udecode/plate-core@13.1.0\n\n- `Plate` children are now rendered as last children of `Slate` (previously first children). To reproduce the previous behavior, move `children` to `firstChildren`\n\n## @udecode/plate@13.0.0\n\n## @udecode/plate-headless@13.0.0\n\n- [#1585](https://github.com/udecode/plate/pull/1585) by [@zbeyens](https://github.com/zbeyens) – Removed `@udecode/plate-juice` from `@udecode/plate`. Install it if using `@udecode/plate-serializer-docx`:\n  ```bash\n  yarn install @udecode/plate-juice\n  ```\n\n## @udecode/plate@13.0.0\n\n## @udecode/plate-ui@13.0.0\n\n## @udecode/plate-ui-dnd@13.0.0\n\n- [#1585](https://github.com/udecode/plate/pull/1585) by [@zbeyens](https://github.com/zbeyens) – Moved `react-dnd react-dnd-html5-backend` deps to peer-dependencies. Install these if using `@udecode/plate-ui-dnd`:\n  ```bash\n  yarn install react-dnd react-dnd-html5-backend\n  ```\n\n# 12.0.0\n\n## @udecode/plate-ui-dnd@12.0.0\n\n- [#1579](https://github.com/udecode/plate/pull/1579) by [@zbeyens](https://github.com/zbeyens) – renamed:\n- `useDndBlock` options:\n  - `blockRef` -> `nodeRef`\n  - `removePreview` -> `preview.disable`\n- `useDropBlockOnEditor` -> `useDropBlock`\n- `useDropBlock` options:\n  - `blockRef` -> `nodeRef`\n  - `setDropLine` -> `onChangeDropLine`\n    signature change:\n- `getHoverDirection`:\n\n```tsx\n// before\n(\n  dragItem: DragItemBlock,\n  monitor: DropTargetMonitor,\n  ref: any,\n  hoverId: string\n)\n// after\n{\n  dragItem,\n  id,\n  monitor,\n  nodeRef,\n}: GetHoverDirectionOptions\n```\n\n# 11.0.0\n\n## @udecode/plate-core@11.0.6\n\n- [#1500](https://github.com/udecode/plate/pull/1500) by [@zbeyens](https://github.com/zbeyens) – Thanks @ianstormtaylor for the initial work on https://github.com/ianstormtaylor/slate/pull/4177.\n\n  This release includes major changes to plate and slate types:\n\n  - Changing the `TEditor` type to be `TEditor<V>` where `V` represents the \"value\" being edited by Slate. In the most generic editor, `V` would be equivalent to `TElement[]` (since that is what is accepted as children of the editor). But in a custom editor, you might have `TEditor<Array<Paragraph | Quote>>`.\n  - Other `TEditor`-and-`TNode`-related methods have been also made generic, so for example if you use `getLeafNode(editor, path)` it knows that the return value is a `TText` node. But more specifically, it knows that it is the text node of the type you've defined in your custom elements (with any marks you've defined).\n  - This replaces the declaration merging approach, and provides some benefits. One of the drawbacks to declaration merging was that it was impossible to know whether you were dealing with an \"unknown\" or \"known\" element, since the underlying type was changed. Similarly, having two editors on the page with different schemas wasn't possible to represent. Hopefully this approach with generics will be able to smoothly replace the declaration merging approach. (While being easy to migrate to, since you can pass those same custom element definitions into `TEditor` still.)\n\n**Define your custom types**\n\n- Follow https://platejs.org/docs/typescript example.\n\n**Slate types**\n\nThose Slate types should be replaced by the new types:\n\n- `Editor` -> `TEditor<V extends Value = Value>`\n  - Note that `TEditor` methods are not typed based on `Value` as it would introduce a circular dependency. You can use `getTEditor(editor)` to get the editor with typed methods.\n- `ReactEditor` -> `TReactEditor<V extends Value = Value>`\n- `HistoryEditor` -> `THistoryEditor<V extends Value = Value>`\n- `EditableProps` -> `TEditableProps<V extends Value = Value>`\n- `Node` -> `TNode`\n- `Element` -> `TElement`\n- `Text` -> `TText`\n- `NodeEntry` -> `TNodeEntry`\n- `NodeProps` -> `TNodeProps`\n\n**Slate functions**\n\nThose Slate functions should be replaced by the new typed ones:\n\n- As the new editor type is not matching the slate ones, all `Transforms`, `Editor`, `Node`, `Element`, `Text`, `HistoryEditor`, `ReactEditor` functions should be replaced: The whole API has been typed into Plate core. See https://github.com/udecode/plate/packages/core/src/slate\n- `createEditor` -> `createTEditor`\n- `withReact` -> `withTReact`\n- `withHistory` -> `withTHistory`\n\n**Generic types**\n\n- `<T = {}>` could be used to extend the editor type. It is now replaced by `<E extends PlateEditor<V> = PlateEditor<V>>` to customize the whole editor type.\n- When the plugin type is customizable, these generics are used: `<P = PluginOptions, V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>`, where `P` is the plugin options type.\n- `Editor` functions are using `<V extends Value>` generic, where `V` can be a custom editor value type used in `PlateEditor<V>`.\n- `Editor` functions returning a node are using `<N extends ENode<V>, V extends Value = Value>` generics, where `N` can be a custom returned node type.\n- `Editor` callbacks (e.g. a plugin option) are using `<V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>` generics, where `E` can be a custom editor type.\n- `Node` functions returning a node are using `<N extends Node, R extends TNode = TNode>` generics.\n- These generics are used by `<V extends Value, K extends keyof EMarks<V>>`: `getMarks`, `isMarkActive`, `removeMark`, `setMarks`, `ToggleMarkPlugin`, `addMark`, `removeEditorMark`\n- `WithOverride` is a special type case as it can return a new editor type:\n\n  ```tsx\n  // before\n  export type WithOverride<T = {}, P = {}> = (\n    editor: PlateEditor<T>,\n    plugin: WithPlatePlugin<T, P>\n  ) => PlateEditor<T>;\n\n  // after - where E is the Editor type (input), and EE is the Extended Editor type (output)\n  export type WithOverride<\n    P = PluginOptions,\n    V extends Value = Value,\n    E extends PlateEditor<V> = PlateEditor<V>,\n    EE extends E = E,\n  > = (editor: E, plugin: WithPlatePlugin<P, V, E>) => EE;\n  ```\n\n- `type TEditor<V extends Value>`\n- `type PlateEditor<V extends Value>`\n\n**Renamed functions**\n\n- `getAbove` -> `getAboveNode`\n- `getParent` -> `getParentNode`\n- `getText` -> `getEditorString`\n- `getLastNode` -> `getLastNodeByLevel`\n- `getPointBefore` -> `getPointBeforeLocation`\n- `getNodes` -> `getNodeEntries`\n- `isStart` -> `isStartPoint`\n- `isEnd` -> `isEndPoint`\n\n**Replaced types**\n\nRemoving node props types in favor of element types (same props + extends `TElement`). You can use `TNodeProps` to get the node data (props).\n\n- `LinkNodeData` -> `TLinkElement`\n- `ImageNodeData` -> `TImageElement`\n- `TableNodeData` -> `TTableElement`\n- `MentionNodeData` -> `TMentionElement`\n- `MentionNode` -> `TMentionElement`\n- `MentionInputNodeData` -> `TMentionInputElement`\n- `MentionInputNode` -> `TMentionInputElement`\n- `CodeBlockNodeData` -> `TCodeBlockElement`\n- `MediaEmbedNodeData` -> `TMediaEmbedElement`\n- `TodoListItemNodeData` -> `TTodoListItemElement`\n- `ExcalidrawNodeData` -> `TExcalidrawElement`\n\n**Utils**\n\n- `match` signature change:\n\n```\n<T extends TNode>(\n  obj: T,\n  path: TPath,\n  predicate?: Predicate<T>\n)\n```\n\n- `deleteFragment` is now using `Editor.deleteFragment`\n\n## @udecode/plate-table@11.0.0\n\n- `getEmptyTableNode` default options changed. Migration:\n\n```tsx\n// From (0 row count and col count, previously it was 2)\ngetEmptyTableNode(editor);\n// To\ngetEmptyTableNode(editor, { rowCount: 2, colCount: 2 });\n```\n\n## @udecode/plate-styled-components@11.0.0\n\n**Generic types**\n\n- `type StyledElementProps<V extends Value, N extends TElement = EElement<V>, TStyles = {}>`\n\n# 10.0.0\n\n## @udecode/plate-ui-toolbar@10.0.0\n\n- [#1377](https://github.com/udecode/plate/pull/1377) by [@zbeyens](https://github.com/zbeyens) – Before, `BalloonToolbar` could be outside `Plate`. Now, `BallonToolbar` should be a child of `Plate` to support multiple editors.\n\n# 9.0.0\n\n## @udecode/plate-core@9.0.0\n\n- [#1303](https://github.com/udecode/plate/pull/1303) by [@zbeyens](https://github.com/zbeyens) –\n  - `Plate`\n    - `editor` prop can now be fully controlled: Plate is not applying `withPlate` on it anymore\n  - `PlatePlugin.deserializeHtml`\n    - can't be an array anymore\n    - moved `validAttribute`, `validClassName`, `validNodeName`, `validStyle` to `deserializeHtml.rules` property\n  - renamed `plateStore` to `platesStore`\n  - `platesStore` is now a zustood store\n  - `eventEditorStore` is now a zustood store\n  - `getPlateId` now gets the last editor id if not focused or blurred\n    - used by `usePlateEditorRef` and `usePlateEditorState`\n  - removed:\n    - `usePlateEnabled` for `usePlateSelectors(id).enabled()`\n    - `usePlateValue` for `usePlateSelectors(id).value()`\n    - `usePlateActions`:\n      - `resetEditor` for `getPlateActions(id).resetEditor()`\n      - `clearState` for `platesActions.unset()`\n      - `setInitialState` for `platesActions.set(id)`\n      - `setEditor` for `getPlateActions(id).editor(value)`\n      - `setEnabled` for `getPlateActions(id).enabled(value)`\n      - `setValue` for `getPlateActions(id).value(value)`\n    - `getPlateState`\n    - `usePlateState`\n    - `usePlateKey`\n\n## @udecode/plate@9.0.0\n\n- [#1303](https://github.com/udecode/plate/pull/1303) by [@zbeyens](https://github.com/zbeyens) –\n- renamed `plate-x-ui` to `plate-ui-x`: all packages depending on `styled-components` has `plate-ui` prefix\n- renamed `plate-x-serializer` to `plate-serializer-x`\n- is now exporting only these (new) packages:\n  - `@udecode/plate-headless`: all unstyled packages\n  - `@udecode/plate-ui`: all styled packages\n- renamed `PlateState` to `PlateStoreState`\n\n# 8.0.0\n\n## @udecode/plate-indent-list@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) – Removed:\n\n  - `IndentListPluginOptions` for `PlatePlugin`\n\n  Rename:\n\n  - `getIndentListInjectComponent` to `injectIndentListComponent`\n\n## @udecode/plate-core@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) – Breaking changes:\n\n  ### `Plate`\n\n  - removed `components` prop:\n\n  ```tsx\n  // Before\n  <Plate plugins={plugins} components={components} />;\n\n  // After\n  // option 1: use the plugin factory\n  let plugins = [\n    createParagraphPlugin({\n      component: ParagraphElement,\n    }),\n  ];\n\n  // option 2: use createPlugins\n  plugins = createPlugins(plugins, {\n    components: {\n      [ELEMENT_PARAGRAPH]: ParagraphElement,\n    },\n  });\n\n  <Plate plugins={plugins} />;\n  ```\n\n  - removed `options` prop:\n\n  ```tsx\n  // Before\n  <Plate plugins={plugins} options={options} />;\n\n  // After\n  // option 1: use the plugin factory\n  let plugins = [\n    createParagraphPlugin({\n      type: 'paragraph',\n    }),\n  ];\n\n  // option 2: use createPlugins\n  plugins = createPlugins(plugins, {\n    overrideByKey: {\n      [ELEMENT_PARAGRAPH]: {\n        type: 'paragraph',\n      },\n    },\n  });\n\n  <Plate plugins={plugins} />;\n  ```\n\n  ### `PlatePlugin`\n\n  - `key`\n    - replacing `pluginKey`\n    - is now required: each plugin needs a key to be retrieved by key.\n  - all handlers have `plugin` as a second parameter:\n\n  ```tsx\n  // Before\n  export type X<T = {}> = (editor: PlateEditor<T>) => Y;\n\n  // After\n  export type X<T = {}, P = {}> = (\n    editor: PlateEditor<T>,\n    plugin: WithPlatePlugin<T, P>\n  ) => Y;\n  ```\n\n  - `serialize` no longer has `element` and `leaf` properties:\n\n  ```ts\n  type SerializeHtml = RenderFunction<\n    PlateRenderElementProps | PlateRenderLeafProps\n  >;\n  ```\n\n  Renamed:\n\n  - `injectParentComponent` to `inject.aboveComponent`\n  - `injectChildComponent` to `inject.belowComponent`\n  - `overrideProps` to `inject.props`\n    - `transformClassName`, `transformNodeValue`, `transformStyle` first parameter is no longer `editor` as it's provided by `then` if needed.\n    - the previously `getOverrideProps` is now the core behavior if `inject.props` is defined.\n  - `serialize` to `serializeHtml`\n  - `deserialize` to `deserializeHtml`\n    - can be an array\n    - the old deserializer options are merged to `deserializeHtml`\n\n  ```tsx\n  type DeserializeHtml = {\n    /** List of HTML attribute names to store their values in `node.attributes`. */\n    attributeNames?: string[];\n\n    /**\n     * Deserialize an element. Use this instead of plugin.isElement if you don't\n     * want the plugin to renderElement.\n     *\n     * @default plugin.isElement\n     */\n    isElement?: boolean;\n\n    /**\n     * Deserialize a leaf. Use this instead of plugin.isLeaf if you don't want the\n     * plugin to renderLeaf.\n     *\n     * @default plugin.isLeaf\n     */\n    isLeaf?: boolean;\n\n    /** Deserialize html element to slate node. */\n    getNode?: (element: HTMLElement) => AnyObject | undefined;\n\n    query?: (element: HTMLElement) => boolean;\n\n    /**\n     * Deserialize an element:\n     *\n     * - If this option (string) is in the element attribute names.\n     * - If this option (object) values match the element attributes.\n     */\n    validAttribute?: string | { [key: string]: string | string[] };\n\n    /** Valid element `className`. */\n    validClassName?: string;\n\n    /** Valid element `nodeName`. Set '*' to allow any node name. */\n    validNodeName?: string | string[];\n\n    /**\n     * Valid element style values. Can be a list of string (only one match is\n     * needed).\n     */\n    validStyle?: Partial<\n      Record<keyof CSSStyleDeclaration, string | string[] | undefined>\n    >;\n\n    /** Whether or not to include deserialized children on this node */\n    withoutChildren?: boolean;\n  };\n  ```\n\n  - handlers starting by `on...` are moved to `handlers` property.\n\n  ```ts\n  // Before\n  onDrop: handler;\n\n  // After\n  handlers: {\n    onDrop: handler;\n  }\n  ```\n\n  Removed:\n\n  - `renderElement` is favor of:\n    - `isElement` is a boolean that enables element rendering.\n    - the previously `getRenderElement` is now the core behavior.\n  - `renderLeaf` is favor of:\n    - `isLeaf` is a boolean that enables leaf rendering.\n    - the previously `getRenderLeaf` is now the core behavior.\n  - `inlineTypes` and `voidTypes` for:\n    - `isInline` is a boolean that enables inline rendering.\n    - `isVoid` is a boolean that enables void rendering.\n\n  ### General\n\n  - the following plugins are now part of the core plugins, so you need to remove these from your `plugins` prop:\n\n  ```ts\n  const corePlugins = [\n    createReactPlugin(),\n    createHistoryPlugin(),\n    createEventEditorPlugin(),\n    createInlineVoidPlugin(),\n    createInsertDataPlugin(),\n    createDeserializeAstPlugin(),\n    createDeserializeHtmlPlugin(),\n  ];\n  ```\n\n  - `plugins` is not a parameter anymore as it can be retrieved in `editor.plugins`\n  - `withInlineVoid` is now using plugins `isInline` and `isVoid` plugin properties.\n\n  Renamed:\n\n  - `getPlatePluginType` to `getPluginType`\n  - `getEditorOptions` to `getPlugins`\n  - `getPlatePluginOptions` to `getPlugin`\n  - `pipeOverrideProps` to `pipeInjectProps`\n  - `getOverrideProps` to `pluginInjectProps`\n  - `serializeHTMLFromNodes` to `serializeHtml`\n    - `getLeaf` to `leafToHtml`\n    - `getNode` to `elementToHtml`\n  - `xDeserializerId` to `KEY_DESERIALIZE_X`\n  - `deserializeHTMLToText` to `htmlTextNodeToString`\n  - `deserializeHTMLToMarks` to `htmlElementToLeaf` and `pipeDeserializeHtmlLeaf`\n  - `deserializeHTMLToElement` to `htmlElementToElement` and `pipeDeserializeHtmlElement`\n  - `deserializeHTMLToFragment` to `htmlBodyToFragment`\n  - `deserializeHTMLToDocumentFragment` to `deserializeHtml`\n  - `deserializeHTMLToBreak` to `htmlBrToNewLine`\n  - `deserializeHTMLNode` to `deserializeHtmlNode`\n  - `deserializeHTMLElement` to `deserializeHtmlElement`\n\n  Removed:\n\n  - `usePlateKeys`, `getPlateKeys`\n  - `usePlateOptions` for `getPlugin`\n  - `getPlateSelection` for `getPlateEditorRef().selection`\n  - `flatMapByKey`\n  - `getEditableRenderElement` and `getRenderElement` for `pipeRenderElement` and `pluginRenderElement`\n  - `getEditableRenderLeaf` and `getRenderLeaf` for `pipeRenderLeaf` and `pluginRenderLeaf`\n  - `getInlineTypes`\n  - `getVoidTypes`\n  - `getPlatePluginTypes`\n  - `getPlatePluginWithOverrides`\n  - `mapPlatePluginKeysToOptions`\n  - `withDeserializeX` for `PlatePlugin.editor.insertData`\n\n  Changed types:\n\n  - `PlateEditor`:\n    - removed `options` for `pluginsByKey`\n  - `WithOverride` is not returning an extended editor anymore (input and output editors are assumed to be the same types for simplicity).\n  - `PlateState`\n    - renamed `keyChange` to `keyEditor`\n    - removed `plugins` for `editor.plugins`\n    - removed `pluginKeys`\n    - removed `selection` for `editor.selection`\n    - actions:\n      - removed `setSelection`, `setPlugins`, `setPluginKeys`\n      - removed `incrementKeyChange` for\n\n  Renamed types:\n\n  - `XHTMLY` to `XHtmlY`\n  - `Deserialize` to `DeseralizeHtml`\n\n  Removed types:\n\n  - `PlatePluginOptions`:\n    - `type` to `PlatePlugin.type`\n    - `component` to `PlatePlugin.component`\n    - `deserialize` to `PlatePlugin.deserializeHtml`\n    - `getNodeProps` to `PlatePlugin.props.nodeProps`\n    - `hotkey` to `HotkeyPlugin`\n    - `clear` to `ToggleMarkPlugin`\n    - `defaultType` is hardcoded to `p.type`\n  - `OverrideProps` for `PlatePlugin.inject.props`\n  - `Serialize` for `PlatePlugin.serializeHtml`\n  - `NodeProps` for `AnyObject`\n  - `OnKeyDownElementOptions` for `HotkeyPlugin`\n  - `OnKeyDownMarkOptions` for `ToggleMarkPlugin`\n  - `WithInlineVoidOptions`\n  - `GetNodeProps` for `PlatePluginProps`\n  - `DeserializeOptions`, `GetLeafDeserializerOptions`, `GetElementDeserializerOptions`, `GetNodeDeserializerOptions`, `GetNodeDeserializerRule`, `DeserializeNode` for `PlatePlugin.deserializeHtml`\n  - `PlateOptions`\n  - `RenderNodeOptions`\n  - `DeserializedHTMLElement`\n\n## @udecode/plate-find-replace@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) – Removed:\n  - `useFindReplacePlugin` for `createFindReplacePlugin`\n\n## @udecode/plate-alignment@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) –\n  - `setAlign`\n    - moved param 3 to param 2 as `setNodesOptions`\n\n## @udecode/plate-basic-elements@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) –\n  - renamed `createBasicElementPlugins` to `createBasicElementsPlugin`\n\n## @udecode/plate-code-block@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) – Removed:\n  - `getCodeBlockPluginOptions` for `getPlugin`\n  - `getCodeLinePluginOptions` for `getPlugin`\n\n## @udecode/plate-heading@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) – Renamed:\n  - `HeadingPluginOptions` to `HeadingsPlugin`\n\n## @udecode/plate-mention@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) – Removed:\n  - `getMentionInputPluginOptions` for `getPlugin`\n  - `getMentionInputType` for `getPluginType`\n  - `COMBOBOX_TRIGGER_MENTION`\n\n## @udecode/plate-basic-marks@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) –\n  - renamed `createBasicMarkPlugins` to `createBasicMarksPlugin`\n\n## @udecode/plate@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) – Breaking changes:\n\n  - all plugins options are now defined in the plugin itself\n  - plugins which now have nested plugins instead of array:\n    - `createBasicElementsPlugin`\n    - `createCodeBlockPlugin`\n    - `createHeadingPlugin`\n    - `createListPlugin`\n    - `createTablePlugin`\n    - `createBasicMarksPlugin`\n\n  Removed:\n\n  - `createEditorPlugins` for `createPlateEditor` (without components) and `createPlateEditorUI` (with Plate components)\n  - `createPlateOptions` for `createPlugins`\n  - all `DEFAULTS_X`: these are defined in the plugins\n  - all `getXDeserialize`: these are defined in the plugins\n  - all `WithXOptions` for extended plugins\n  - all `getXRenderElement`\n  - some plugin option types are removed for `PlatePlugin`\n\n  Renamed:\n\n  - `createPlateComponents` to `createPlateUI`\n  - all `getXY` handlers to `yX` (e.g. `getXOnKeyDown` to `onKeyDownX`)\n  - all `XPluginOptions` to `XPlugin`\n  - all `pluginKey` parameter to `key` except in components\n\n  Renamed types:\n\n  - `DecorateSearchHighlightOptions` to `FindReplacePlugin`\n\n  Updated deps:\n\n  - `\"slate\": \"0.70.0\"`\n  - `\"slate-react\": \"0.70.1\"`\n\n  Removed deps (merged to core):\n\n  - `plate-common`\n  - `plate-ast-serializer`\n  - `plate-html-serializer`\n  - `plate-serializer`\n\n## @udecode/plate-serializer-csv@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) – Renamed:\n  - `createDeserializeCSVPlugin` to `createDeserializeCsvPlugin`\n  - `deserializeCSV` to `deserializeCsv`\n\n## @udecode/plate-serializer-md@8.0.0\n\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) –\n\n  - `createDeserializeMdPlugin`:\n    - is now disabled if there is html data in the data transfer.\n\n  Renamed:\n\n  - `createDeserializeMDPlugin` to `createDeserializeMdPlugin`\n  - `deserializeMD` to `deserializeMd`\n\n# 7.0.0\n\n## `@udecode/plate-core`\n\n- renamed:\n  - `SPEditor` to `PEditor` (note that `PlateEditor` is the new default)\n  - `SPRenderNodeProps` to `PlateRenderNodeProps`\n  - `SPRenderElementProps` to `PlateRenderElementProps`\n  - `SPRenderLeafProps` to `PlateRenderLeafProps`\n  - `useEventEditorId` to `usePlateEventId`\n  - `useStoreEditorOptions` to `usePlateOptions`\n  - `useStoreEditorRef` to `usePlateEditorRef`\n  - `useStoreEditorSelection` to `usePlateSelection`\n  - `useStoreEditorState` to `usePlateEditorState`\n  - `useStoreEditorValue` to `usePlateValue`\n  - `useStoreEnabled` to `usePlateEnabled`\n  - `useStorePlate` to `usePlatePlugins`\n  - `useStorePlatePluginKeys` to `usePlateKeys`\n  - `useStoreState` to `usePlateState`\n- `getPlateId`: Get the last focused editor id, else get the last blurred editor id, else get the first editor id, else `null`\n- `getPlateState`:\n  - removed first parameter `state`\n  - previously when giving no parameter, it was returning the first editor. Now it's returning the editor with id = `getPlateId()`. It means `useEventEditorId('focus')` is no longer needed for\n    - `usePlateEditorRef`\n    - `usePlateEditorState`\n    - `usePlateX`...\n\n## `@udecode/plate-alignment`\n\n- `setAlign`: option `align` renamed to `value`\n- removed `getAlignOverrideProps()` in favor of `getOverrideProps(KEY_ALIGN)`\n\n## `@udecode/plate-indent`\n\n- removed `getIndentOverrideProps()` in favor of `getOverrideProps(KEY_INDENT)`\n- rename `onKeyDownHandler` to `getIndentOnKeyDown()`\n- `IndentPluginOptions`\n  - rename `types` to `validTypes`\n  - rename `cssPropName` to `styleKey`\n  - rename `transformCssValue` to `transformNodeValue`\n\n## `@udecode/plate-line-height`\n\n- `setLineHeight`: option `lineHeight` renamed to `value`\n- removed `getLineHeightOverrideProps` in favor of `getOverrideProps(KEY_LINE_HEIGHT)`\n\n## `@udecode/plate-mention`\n\n- `getMentionOnSelectItem`:\n  - removed `createMentionNode` in favor of plugin options\n  - removed `insertSpaceAfterMention` in favor of plugin options\n\n## `@udecode/plate-mention-ui`\n\n- `MentionCombobox` props:\n  - removed `trigger` in favor of plugin options\n  - removed `insertSpaceAfterMention` in favor of plugin options\n  - removed `createMentionNode` in favor of plugin options\n\n## `@udecode/plate-x-ui`\n\n- renamed `ToolbarAlign` to `AlignToolbarButton`\n- renamed `ToolbarCodeBlock` to `CodeBlockToolbarButton`\n- renamed `ToolbarElement` to `BlockToolbarButton`\n- renamed `ToolbarImage` to `ImageToolbarButton`\n- renamed `ToolbarLink` to `LinkToolbarButton`\n- renamed `ToolbarList` to `ListToolbarButton`\n- renamed `ToolbarLineHeight` to `LineHeightToolbarDropdown`\n- renamed `ToolbarMark` to `MarkToolbarButton`\n- renamed `ToolbarMediaEmbed` to `MediaEmbedToolbarButton`\n- renamed `ToolbarSearchHighlight` to `SearchHighlightToolbar`\n- renamed `ToolbarTable` to `TableToolbarButton`\n\n# 6.0.0\n\n## `@udecode/plate-alignment`\n\nThe align plugin is no longer wrapping a block, but instead setting an `align` property to an existing block.\n\n- `createAlignPlugin`:\n  - removed `pluginKeys`, `renderElement` and `deserialize`\n- removed:\n  - `ELEMENT_ALIGN_LEFT`\n  - `ELEMENT_ALIGN_CENTER`\n  - `ELEMENT_ALIGN_RIGHT`\n  - `ELEMENT_ALIGN_JUSTIFY`\n  - `KEYS_ALIGN` in favor of `KEY_ALIGN`\n  - `getAlignDeserialize`\n  - `upsertAlign` in favor of `setAlign`\n\nMigration (normalizer):\n\n- for each node:\n  - run `parent = getParent(editor, path)`, if `parent[0].type` is one of the alignment values:\n    - run `setAlign(editor, { align }, { at: path })`\n    - run `unwrapNodes(editor, { at: path })`\n\n## `@udecode/plate-alignment-ui`\n\n- `ToolbarAlignProps`:\n  - removed `type` in favor of `align`\n  - removed `unwrapTypes`\n  - added `align`\n\n# 5.0.0\n\n## `@udecode/plate-mention`\n\nThe mention plugin is now using the combobox.\n\n- removed `useMentionPlugin` in favor of `createMentionPlugin`\n  - migration: replace `useMentionPlugin().plugin` by `createMentionPlugin()`\n- removed options:\n  - `mentionableSearchPattern`\n  - `insertSpaceAfterMention`\n  - `maxSuggestions`: moved to `comboboxStore`\n  - `trigger`: moved to `comboboxStore`\n  - `mentionables`: moved to `items` in `comboboxStore`\n  - `mentionableFilter`: moved to `filter` in `comboboxStore`\n- removed `matchesTriggerAndPattern` in favor of `getTextFromTrigger`\n- removed `MentionNodeData` in favor of `ComboboxItemData`\n\n```ts\nexport interface ComboboxItemData {\n  /** Unique key. */\n  key: string;\n  /** Item text. */\n  text: any;\n  /**\n   * Whether the item is disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean;\n  /** Data available to `onRenderItem`. */\n  data?: unknown;\n}\n```\n\n## `@udecode/plate-mention-ui`\n\n- removed `MentionSelect` in favor of `MentionCombobox`\n\n## `@udecode/plate-toolbar`\n\n- removed `setPositionAtSelection` in favor of `useBalloonToolbarPopper`\n- removed `useBalloonMove` in favor of `useBalloonToolbarPopper`\n- removed `usePopupPosition` in favor of `useBalloonToolbarPopper`\n- removed `useBalloonShow` in favor of `useBalloonToolbarPopper`\n  `BalloonToolbar` props:\n- removed `direction` in favor of `popperOptions.placement`\n- renamed `scrollContainer` to `popperContainer`\n\n# 4.0.0\n\n## `@udecode/plate-toolbar`\n\n- `BalloonToolbar`: removed `hiddenDelay` prop.\n\n# 3.0.0\n\n## All UI packages\n\nThere was multiple instances of `styled-components` across all the packages.\nSo we moved `styled-components` from dependencies to peer dependencies.\n\n### Before\n\n`styled-components` was not listed in your dependencies\n\n### After\n\nAdd `styled-components` to your dependencies\n\n# 2.0.0\n\n## `@udecode/plate-autoformat`\n\n- `autoformatBlock`:\n  - signatude changed\n\n```ts\n// Before\n(\n  editor: TEditor,\n  type: string,\n  at: Location,\n  options: Pick<AutoformatRule, 'preFormat' | 'format'>\n)\n```\n\n```ts\n// After\n(editor: TEditor, options: AutoformatBlockOptions)\n```\n\n- moved the checks from `withAutoformat`\n- `autoformatInline`:\n  - renamed to `autoformatMark`\n  - signatured changed\n\n```ts\n// Before\n(\n  editor: TEditor,\n  options: Pick<AutoformatRule, 'type' | 'between' | 'markup' | 'ignoreTrim'>\n)\n```\n\n```ts\n// After\n(\n  editor: TEditor,\n  options: AutoformatMarkOptions\n)\n```\n\n- `AutoformatRule` is now `AutoformatBlockRule\n| AutoformatMarkRule\n| AutoformatTextRule;`\n  - `mode: 'inline'` renamed to `mode: 'mark'`\n  - `markup` and `between` have been replaced by `match: string | string[] | MatchRange | MatchRange[]`: The rule applies when the trigger and the text just before the cursor matches. For `mode: 'block'`: lookup for the end match(es) before the cursor. For `mode: 'text'`: lookup for the end match(es) before the cursor. If `format` is an array, also lookup for the start match(es). For `mode: 'mark'`: lookup for the start and end matches. Note: `'_*'`, `['_*']` and `{ start: '_*', end: '*_' }` are equivalent.\n  - `trigger` now defaults to the last character of `match` or `match.end` (previously `' '`)\n- the plugin now checks that there is no character before the start match to apply autoformatting. For example, nothing will happen by typing `a*text*`.\n",
      "type": "registry:file",
      "target": "content/docs/plate/migration/v48.mdx"
    }
  ]
}