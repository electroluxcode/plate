{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-docs",
  "type": "registry:file",
  "title": "Date",
  "description": "Documentation for Date",
  "files": [
    {
      "path": "../../docs/(plugins)/(elements)/date.mdx",
      "content": "---\ntitle: Date\ndocs:\n  - route: /docs/components/date-node\n    title: Date Element\n---\n\n<ComponentPreview name=\"date-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Insert and display dates within your text using inline date elements.\n- These dates can be easily selected and modified using a calendar interface.\n\n</PackageInfo>\n\n## Kit Usage\n\n<Steps>\n\n### Installation\n\nThe fastest way to add date functionality is with the `DateKit`, which includes pre-configured `DatePlugin` with [Plate UI](/docs/installation/plate-ui) components.\n\n<ComponentSource name=\"date-kit\" />\n\n- [`DateElement`](/docs/components/date-node): Renders inline date elements.\n\n### Add Kit\n\nAdd the kit to your plugins:\n\n```tsx\nimport { createPlateEditor } from 'platejs/react';\nimport { DateKit } from '@/components/editor/plugins/date-kit';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    ...DateKit,\n  ],\n});\n```\n\n</Steps>\n\n## Manual Usage\n\n<Steps>\n\n### Installation\n\n```bash\nnpm install @platejs/date\n```\n\n### Add Plugin\n\nInclude `DatePlugin` in your Plate plugins array when creating the editor.\n\n```tsx\nimport { DatePlugin } from '@platejs/date/react';\nimport { createPlateEditor } from 'platejs/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    DatePlugin,\n  ],\n});\n```\n\n### Configure Plugin\n\nConfigure the plugin with a custom component to render date elements.\n\n```tsx\nimport { DatePlugin } from '@platejs/date/react';\nimport { createPlateEditor } from 'platejs/react';\nimport { DateElement } from '@/components/ui/date-node';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    DatePlugin.withComponent(DateElement),\n  ],\n});\n```\n\n- `withComponent`: Assigns [`DateElement`](/docs/components/date-node) to render inline date elements.\n\n### Insert Toolbar Button\n\nYou can add this item to the [Insert Toolbar Button](/docs/toolbar#insert-toolbar-button) to insert date elements:\n\n```tsx\n{\n  focusEditor: true,\n  icon: <CalendarIcon />,\n  label: 'Date',\n  value: KEYS.date,\n}\n```\n\n</Steps>\n\n## Plugins\n\n### `DatePlugin`\n\nPlugin for adding date elements to your document.\n\n## API\n\n### `isPointNextToNode`\n\nCheck if a point is next to a specific node type.\n\n<API name=\"isPointNextToNode\">\n<APIParameters>\n  <APIItem name=\"nodeType\" type=\"string\">\n    The type of node to check for adjacency (e.g. 'date' for inline date elements).\n  </APIItem>\n  <APIItem name=\"options\" type=\"object\">\n    Options for checking adjacency.\n  </APIItem>\n</APIParameters>\n\n<APIOptions type=\"object\">\n  <APIItem name=\"at\" type=\"Point\" optional>\n    Position to check from. Uses current selection anchor if not provided.\n  </APIItem>\n  <APIItem name=\"reverse\" type=\"boolean\">\n    Direction to check. If true, checks previous node; if false, checks next node.\n  </APIItem>\n</APIOptions>\n</API>\n\n## Transforms\n\n### `tf.insert.date`\n\n<API name=\"insert.date\">\n<APIParameters>\n  <APIItem name=\"date\" type=\"string\" optional>\n    The date string to insert in 'YYYY-MM-DD' format.\n    - **Default:** Current date\n  </APIItem>\n  <APIItem name=\"options\" type=\"InsertNodesOptions\" optional>\n    Options for inserting nodes.\n  </APIItem>\n</APIParameters>\n</API>\n",
      "type": "registry:file",
      "target": "content/docs/plate/(plugins)/(elements)/date.mdx"
    }
  ]
}