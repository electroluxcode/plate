{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "plugin-components-docs",
  "type": "registry:file",
  "title": "Plugin Components",
  "description": "Learn how to create and style custom components for Plate plugins.",
  "files": [
    {
      "path": "../../docs/(guides)/plugin-components.mdx",
      "content": "---\ntitle: Plugin Components\ndescription: Learn how to create and style custom components for Plate plugins.\n---\n\nBy default, Plate plugins are headless, meaning all nodes will be rendered as plain text. This guide will show you how to create and style custom components for your editor.\n\n## Plate UI\n\nUnless you prefer to build everything from scratch, we recommend using [Plate UI](/docs/components) to get started. Plate UI is a collection of components that you can copy into your app and modify to suit your needs.\n\nThe process of creating and registering components is similar whether you use Plate UI or build your own from scratch.\n\n## Defining Components\n\nUse `PlateElement` for element nodes (like paragraphs, headings) and `PlateLeaf` for text leaf nodes (like bold, italic). These components handle applying the necessary Plate props to your custom HTML elements.\n\nEnsure the `children` prop is rendered unconditionally for the editor to function correctly, even for void nodes.\n\n### Element Component\n\n```tsx\nimport { type PlateElementProps, PlateElement } from 'platejs/react';\n\nexport function BlockquoteElement(props: PlateElementProps) {\n  // props contains attributes, children, element, editor, etc.\n  // plus any custom props your plugin might pass.\n  return (\n    <PlateElement\n      as=\"blockquote\"\n      className=\"my-1 border-l-2 pl-6 italic\" // Apply custom styles directly\n      {...props} // Pass all original props (attributes, children, element, etc.)\n    />\n  );\n}\n```\n\nThis example defines a `BlockquoteElement`. The `as` prop on `PlateElement` specifies that it should render an HTML `<blockquote>`. `PlateElement` handles rendering the `children` passed via `{...props}`.\n\n### Leaf Component\n\n```tsx\nimport { type PlateLeafProps, PlateLeaf } from 'platejs/react';\n\nexport function CodeLeaf(props: PlateLeafProps) {\n  // props contains attributes, children, leaf, text, editor, etc.\n  // plus any custom props your plugin might pass.\n  return (\n    <PlateLeaf\n      as=\"code\"\n      className=\"rounded-md bg-muted px-[0.3em] py-[0.2em] font-mono text-sm\" // Apply custom styles\n      {...props} // Pass all original props (attributes, children, leaf, text, etc.)\n    />\n  );\n}\n```\n\n### Styling\n\nWe recommend styling components using Tailwind CSS, as demonstrated in Plate UI.\n\nAlternatively, Plate generates class names like `slate-<node-type>` (e.g., `slate-p` for paragraphs, `slate-h1` for H1 headings) which you can target with global CSS:\n\n```css\n.slate-p {\n  margin-bottom: 1rem;\n}\n.slate-bold {\n  font-weight: bold;\n}\n```\n\n## Register Components\n\nTo use your custom components, register them with the corresponding plugin or directly in the editor configuration.\n\n### Method 1: Plugin's `withComponent` (Recommended)\n\nThe `withComponent` method is the most straightforward way to associate a component with a plugin.\n\n```tsx\nconst plugins = [\n  // This is equivalent to:\n  // ParagraphPlugin.configure({ node: { component: MyParagraphElement }});\n  ParagraphPlugin.withComponent(MyParagraphElement),\n  CodeBlockPlugin.withComponent(MyCodeBlockElement),\n  CodeLinePlugin.withComponent(MyCodeLineElement),\n  CodeSyntaxPlugin.withComponent(MyCodeSyntaxLeaf),\n]\n```\n\n\n### Method 2: Plugin `override.components`\n\nFor plugins that manage multiple component parts (like `CodeBlockPlugin` with `code_block`, `code_line`, and `code_syntax`), or when you need to override components for a specific plugin instance, use the `override.components` option within `configure`.\n\n```tsx\nconst plugins = [\n  CodeBlockPlugin.configure({\n    override: {\n      components: {\n        [CodeBlockPlugin.key]: MyCodeBlockElement,\n        [CodeLinePlugin.key]: MyCodeLineElement,\n        [CodeSyntaxPlugin.key]: MyCodeSyntaxLeaf,\n      },\n    },\n  }),\n];\n```\n\n### Method 3: Editor `components` Option\n\nYou can globally map plugin keys to components in `createPlateEditor` (or `usePlateEditor`). This is useful for managing all components in one place, or for plugins composed of multiple plugins.\n\n```tsx\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin, CodeBlockPlugin /* ...other plugins */],\n  components: {\n    [ParagraphPlugin.key]: MyParagraphElement,\n    [CodeBlockPlugin.key]: MyCodeBlockElement,\n    [CodeLinePlugin.key]: MyCodeLineElement,\n    [CodeSyntaxPlugin.key]: MyCodeSyntaxLeaf,\n    // ...other component overrides\n  },\n});\n```\n",
      "type": "registry:file",
      "target": "content/docs/plate/(guides)/plugin-components.mdx"
    }
  ]
}