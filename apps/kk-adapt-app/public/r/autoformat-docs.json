{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "autoformat-docs",
  "type": "registry:file",
  "title": "Autoformat",
  "description": "Automatic text formatting via shortcodes and markdown-like shortcuts.",
  "files": [
    {
      "path": "../../docs/(plugins)/(functionality)/autoformat.mdx",
      "content": "---\ntitle: Autoformat\ndescription: Automatic text formatting via shortcodes and markdown-like shortcuts.\ndocs:\n  - route: /docs/basic-blocks\n    title: Basic Elements\n  - route: /docs/basic-marks\n    title: Basic Marks\n  - route: /docs/code-block\n    title: Code Block\n  - route: /docs/list\n    title: List\n---\n\n<ComponentPreview name=\"autoformat-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Markdown-style shortcuts for blocks (e.g., `#` to H1, `>` for blockquote).\n- Inline mark formatting (e.g., `**bold**`, `*italic*`, `~~strikethrough~~`).\n- Smart punctuation conversion (e.g., `--` to `—`, `...` to `…`).\n- Mathematical symbols and fractions.\n- Legal symbols and arrows.\n- Undo support on delete to reverse autoformatting.\n\n</PackageInfo>\n\n## Kit Usage\n\n<Steps>\n\n### Installation\n\nThe fastest way to add autoformatting is with the `AutoformatKit`, which includes comprehensive formatting rules for blocks, marks, and text replacements.\n\n<ComponentSource name=\"autoformat-kit\" />\n\n### Add Kit\n\n```tsx\nimport { createPlateEditor } from 'platejs/react';\nimport { AutoformatKit } from '@/components/editor/plugins/autoformat-kit';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    ...AutoformatKit,\n  ],\n});\n```\n\n</Steps>\n\n## Manual Usage\n\n<Steps>\n\n### Installation\n\n```bash\nnpm install @platejs/autoformat\n```\n\n### Add Plugin\n\n```tsx\nimport { AutoformatPlugin } from '@platejs/autoformat';\nimport { createPlateEditor } from 'platejs/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    AutoformatPlugin,\n  ],\n});\n```\n\n### Configure Plugin\n\nConfigure autoformat with custom rules:\n\n```tsx\nimport { AutoformatPlugin } from '@platejs/autoformat';\n\nAutoformatPlugin.configure({\n  options: {\n    rules: [\n      // Block rules\n      {\n        match: '# ',\n        mode: 'block',\n        type: 'h1',\n      },\n      {\n        match: '> ',\n        mode: 'block',\n        type: 'blockquote',\n      },\n      // Mark rules\n      {\n        match: '**',\n        mode: 'mark',\n        type: 'bold',\n      },\n      {\n        match: '*',\n        mode: 'mark',\n        type: 'italic',\n      },\n    ],\n    enableUndoOnDelete: true,\n  },\n});\n```\n\n### Advanced Configuration\n\nImport predefined rule sets for comprehensive autoformatting:\n\n```tsx\nimport { AutoformatPlugin } from '@platejs/autoformat';\nimport {\n  autoformatArrow,\n  autoformatLegal,\n  autoformatMath,\n  autoformatPunctuation,\n  autoformatSmartQuotes,\n} from '@platejs/autoformat';\n\nAutoformatPlugin.configure({\n  options: {\n    enableUndoOnDelete: true,\n    rules: [\n      // Custom block rules\n      {\n        match: '# ',\n        mode: 'block',\n        type: 'h1',\n      },\n      // Predefined rule sets\n      ...autoformatSmartQuotes,\n      ...autoformatPunctuation,\n      ...autoformatArrow,\n      ...autoformatLegal,\n      ...autoformatMath,\n    ].map((rule) => ({\n      ...rule,\n      // Disable autoformat in code blocks\n      query: (editor) =>\n        !editor.api.some({\n          match: { type: 'code_block' },\n        }),\n    })),\n  },\n});\n```\n\n- `rules`: Array of autoformat rules defining triggers and formatting actions.\n- `enableUndoOnDelete`: Allows undoing autoformat by pressing backspace.\n- `query`: Function to conditionally enable/disable rules based on context.\n\n### Using Regex Patterns\n\nFor more complex matching patterns, you can use regular expressions:\n\n```tsx\nimport { AutoformatPlugin } from '@platejs/autoformat';\nimport { toggleList } from '@platejs/list';\n\nAutoformatPlugin.configure({\n  options: {\n    rules: [\n      {\n        match: [String.raw`^\\d+\\.$ `, String.raw`^\\d+\\)$ `],\n        matchByRegex: true,\n        mode: 'block',\n        type: 'list',\n        format: (editor, { matchString }) => {\n          const number = Number(matchString.match(/\\d+/)?.[0]) || 1;\n          toggleList(editor, {\n            listRestartPolite: number,\n            listStyleType: 'ol',\n          });\n        },\n      },\n    ],\n  },\n});\n```\n\n- `matchByRegex`: Enables regex pattern matching instead of string equality.\n- Note that Regex patterns only work with `mode: 'block'` and are applied at block start (`triggerAtBlockStart: true`).\n\n</Steps>\n\n## Plugins\n\n### `AutoformatPlugin`\n\nPlugin for automatic text formatting based on typing patterns.\n\n<API name=\"AutoformatPlugin\">\n<APIOptions>\n  <APIItem name=\"rules\" type=\"AutoformatRule[]\" optional>\n    A list of triggering rules. Can be one of: `AutoformatBlockRule`, `AutoformatMarkRule`, `AutoformatTextRule`. Each extends `AutoformatCommonRule`.\n    - **Default:** `[]`\n  </APIItem>\n  <APIItem name=\"enableUndoOnDelete\" type=\"boolean\" optional>\n    Enable undo on delete to reverse autoformatting.\n    - **Default:** `false`\n  </APIItem>\n</APIOptions>\n</API>\n\n## Predefined Rules\n\nYou can import the following predefined rule sets:\n\n| Name                           | Description                          |\n| :----------------------------- | :----------------------------------- |\n| `autoformatSmartQuotes`        | Converts `\"text\"` to `\"text\"`.       |\n|                                | Converts `'text'` to `'text'`.       |\n| `autoformatPunctuation`        | Converts `--` to `—`.                |\n|                                | Converts `...` to `…`.               |\n|                                | Converts `>>` to `»`.                |\n|                                | Converts `<<` to `«`.                |\n| `autoformatArrow`              | Converts `->` to `→`.                |\n|                                | Converts `<-` to `←`.                |\n|                                | Converts `=>` to `⇒`.                |\n|                                | Converts `<=` and `≤=` to `⇐`.       |\n| `autoformatLegal`              | Converts `(tm)` and `(TM)` to `™`.  |\n|                                | Converts `(r)` and `(R)` to `®`.    |\n|                                | Converts `(c)` and `(C)` to `©`.    |\n| `autoformatLegalHtml`          | Converts `&trade;` to `™`.          |\n|                                | Converts `&reg;` to `®`.            |\n|                                | Converts `&copy;` to `©`.           |\n|                                | Converts `&sect;` to `§`.            |\n| `autoformatComparison`         | Converts `!>` to `≯`.               |\n|                                | Converts `!<` to `≮`.                |\n|                                | Converts `>=` to `≥`.                |\n|                                | Converts `<=` to `≤`.                |\n|                                | Converts `!>=` to `≱`.               |\n|                                | Converts `!<=` to `≰`.               |\n| `autoformatEquality`           | Converts `!=` to `≠`.                |\n|                                | Converts `==` to `≡`.                |\n|                                | Converts `!==` and `≠=` to `≢`.      |\n|                                | Converts `~=` to `≈`.                |\n|                                | Converts `!~=` to `≉`.               |\n| `autoformatFraction`           | Converts `1/2` to `½`.               |\n|                                | Converts `1/3` to `⅓`.               |\n|                                | ...                                  |\n|                                | Converts `7/8` to `⅞`.               |\n| `autoformatDivision`           | Converts `//` to `÷`.                |\n| `autoformatOperation`          | Converts `+-` to `±`.                |\n|                                | Converts `%%` to `‰`.                |\n|                                | Converts `%%%` and `‰%` to `‱`.       |\n|                                | `autoformatDivision` rules.          |\n| `autoformatSubscriptNumbers`   | Converts `~0` to `₀`.                |\n|                                | Converts `~1` to `₁`.                |\n|                                | ...                                  |\n|                                | Converts `~9` to `₉`.                |\n| `autoformatSubscriptSymbols`   | Converts `~+` to `₊`.                |\n|                                | Converts `~-` to `₋`.                |\n| `autoformatSuperscriptNumbers` | Converts `^0` to `⁰`.                |\n|                                | Converts `^1` to `¹`.                |\n|                                | ...                                  |\n|                                | Converts `^9` to `⁹`.                |\n| `autoformatSuperscriptSymbols` | Converts `^+` to `⁺`.                |\n|                                | Converts `^-` to `⁻`.                |\n| `autoformatMath`               | `autoformatComparison` rules         |\n|                                | `autoformatEquality` rules           |\n|                                | `autoformatOperation` rules          |\n|                                | `autoformatFraction` rules           |\n|                                | `autoformatSubscriptNumbers` rules   |\n|                                | `autoformatSubscriptSymbols` rules   |\n|                                | `autoformatSuperscriptNumbers` rules |\n|                                | `autoformatSuperscriptSymbols` rules |\n\n## Types\n\n### `AutoformatCommonRule`\n\nAn interface for the common structure of autoformat rules, regardless of their mode.\n\n<API name=\"AutoformatCommonRule\">\n<APIAttributes>\n<APIItem\n  name=\"match\"\n  type=\"string | string[] | MatchRange | MatchRange[]\"\n>\n  The rule applies when the trigger and the text just before the cursor matches.\n\n  - For `mode: 'block'`: lookup for the end match(es) before the cursor.\n  - For `mode: 'text'`: lookup for the end match(es) before the cursor. If `format` is an array, also lookup for the start match(es).\n  - For `mode: 'mark'`: lookup for the start and end matches.\n  - Note: `'_*'`, `['_*']` and `{ start: '_*', end: '*_' }` are equivalent.\n  - `MatchRange`:\n\n  <APISubList>\n    <APISubListItem parent=\"match\" name=\"start\" type=\"string\">\n      The starting point of the range.\n    </APISubListItem>\n    <APISubListItem parent=\"match\" name=\"end\" type=\"string\">\n      The ending point of the range.\n    </APISubListItem>\n  </APISubList>\n</APIItem>\n<APIItem name=\"trigger\" type=\"string | string[]\" optional>\n  Triggering character to autoformat.\n</APIItem>\n<APIItem name=\"insertTrigger\" type=\"boolean\" optional>\n  If true, insert the triggering character after autoformatting.\n  - **Default:** `false`\n</APIItem>\n<APIItem\n  name=\"query\"\n  type=\"(editor: PlateEditor, options: AutoformatQueryOptions) => boolean\"\n  optional\n>\n  A query function to allow autoformat.\n\n  <APIOptions type=\"AutoformatQueryOptions\">\n    <APIItem name=\"text\" type=\"string\">\n      `insertText` text.\n    </APIItem>\n  </APIOptions>\n</APIItem>\n</APIAttributes>\n</API>\n\n### `AutoformatBlockRule`\n\nAn interface for autoformat rules for block mode.\n\n<API name=\"AutoformatBlockRule\">\n<APIAttributes>\n  <APIItem name=\"mode\" type=\"'block'\">\n    Block mode: set block type or custom format.\n  </APIItem>\n  <APIItem name=\"match\" type=\"string | string[]\">\n    Pattern to match for the autoformat rule.\n  </APIItem>\n  <APIItem name=\"type\" type=\"string\" optional>\n    For `mode: 'block'`: set block type. If `format` is defined, this field is ignored.\n  </APIItem>\n  <APIItem name=\"triggerAtBlockStart\" type=\"boolean\" optional>\n    Whether trigger should be at block start.\n    - **Default:** `true`\n  </APIItem>\n  <APIItem name=\"allowSameTypeAbove\" type=\"boolean\" optional>\n    Whether to allow autoformat with same block type above.\n    - **Default:** `false`\n  </APIItem>\n  <APIItem name=\"preFormat\" type=\"(editor: PlateEditor) => void\" optional>\n    Function called before `format`. Used to reset selected block.\n  </APIItem>\n  <APIItem name=\"format\" type=\"(editor: PlateEditor) => void\" optional>\n    Custom formatting function.\n  </APIItem>\n</APIAttributes>\n</API>\n\n### `AutoformatMarkRule`\n\nAn interface for autoformat rules for mark mode.\n\n<API name=\"AutoformatMarkRule\">\n<APIAttributes>\n  <APIItem name=\"mode\" type=\"'mark'\">\n    Mark mode: insert mark(s) between matches.\n  </APIItem>\n  <APIItem name=\"type\" type=\"string | string[]\">\n    Mark(s) to add.\n  </APIItem>\n  <APIItem name=\"ignoreTrim\" type=\"boolean\" optional>\n    Whether to format when string can be trimmed.\n  </APIItem>\n</APIAttributes>\n</API>\n\n### `AutoformatTextRule`\n\nAn interface for autoformat rules for text mode.\n\n<API name=\"AutoformatTextRule\">\n<APIParameters>\n  <APIItem name=\"mode\" type=\"'text'\">\n    Text mode: insert text.\n  </APIItem>\n  <APIItem name=\"match\" type=\"string | string[]\">\n    Pattern to match for the autoformat rule.\n  </APIItem>\n  <APIItem name=\"format\" type=\"string | string[] | ((editor: PlateEditor, options: GetMatchPointsReturnType) => void)\">\n    Text replacement or formatting function.\n  </APIItem>\n</APIParameters>\n</API>",
      "type": "registry:file",
      "target": "content/docs/plate/(plugins)/(functionality)/autoformat.mdx"
    }
  ]
}