{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "trailing-block-docs",
  "type": "registry:file",
  "title": "Trailing Block",
  "description": "Documentation for Trailing Block",
  "files": [
    {
      "path": "../../docs/(plugins)/(functionality)/(utils)/trailing-block.mdx",
      "content": "---\ntitle: Trailing Block\n---\n\n<ComponentPreview name=\"basic-blocks-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Ensures a specific block type is always present at the end of the document\n\n</PackageInfo>\n\n## Manual Usage\n\n<Steps>\n\n### Add Plugin\n\n```tsx\nimport { TrailingBlockPlugin } from 'platejs';\nimport { createPlateEditor } from 'platejs/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    TrailingBlockPlugin,\n  ],\n});\n```\n\n### Configure Plugin\n\nThe plugin works out of the box with sensible defaults, but can be configured for specific use cases:\n\n```tsx\nimport { TrailingBlockPlugin } from 'platejs';\nimport { createPlateEditor } from 'platejs/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    TrailingBlockPlugin.configure({\n      options: {\n        type: 'p', // Paragraph block\n        exclude: ['blockquote'], // Don't add after these types\n      },\n    }),\n  ],\n});\n```\n\n**Configuration options:**\n- `type`: The block type to insert as the trailing block (defaults to paragraph)\n- `exclude`: Array of block types that should not trigger trailing block insertion\n- `allow`: Array of block types that are allowed (alternative to exclude)\n- `filter`: Custom function to determine when to add trailing blocks\n\n</Steps>\n\n## Plugins\n\n### `TrailingBlockPlugin`\n\nPlugin that ensures a specific block type is always present at the end of the document or at a specified nesting level.\n\n**Key behaviors:**\n- Automatically adds a trailing block when the last node doesn't match the expected type\n- Works through editor normalization to maintain document structure\n- Supports nested structures by configuring the `level` option\n- Prevents empty documents by ensuring at least one block exists\n- Respects filtering options to control when trailing blocks are added\n\n<API name=\"TrailingBlockPlugin\">\n<APIOptions>\n  <APIItem name=\"level\" type=\"number\" optional>\n    Level where the trailing node should be added, with the first level being 0.\n    - **Default:** `0`\n  </APIItem>\n  <APIItem name=\"type\" type=\"string\" optional>\n    Type of the trailing block to insert.\n    - **Default:** `'p'` (paragraph)\n  </APIItem>\n  <APIItem name=\"allow\" type=\"string[]\" optional>\n    Filter nodes matching these types. Only these types will be considered valid trailing blocks.\n    - **Default:** `[]` (all types allowed)\n  </APIItem>\n  <APIItem name=\"exclude\" type=\"string[]\" optional>\n    Filter nodes not matching these types. These types will not trigger trailing block insertion.\n    - **Default:** `[]` (no types excluded)\n  </APIItem>\n  <APIItem name=\"filter\" type=\"(node: TNode) => boolean\" optional>\n    Custom filter function to determine if a node should trigger trailing block insertion.\n  </APIItem>\n</APIOptions>\n</API>",
      "type": "registry:file",
      "target": "content/docs/plate/(plugins)/(functionality)/(utils)/trailing-block.mdx"
    }
  ]
}