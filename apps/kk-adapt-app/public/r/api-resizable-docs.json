{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "api-resizable-docs",
  "type": "registry:file",
  "title": "Resizable",
  "description": "API reference for @platejs/resizable.",
  "files": [
    {
      "path": "../../docs/api/resizable.mdx",
      "content": "---\ntitle: Resizable\ndescription: API reference for @platejs/resizable.\n---\n\n<PackageInfo>\n\n## Features\n\n- Resizable elements with handles\n- Configurable min/max width constraints\n- Center/left/right alignment support\n- Width persistence in editor state\n\n</PackageInfo>\n\n## Installation\n\n```bash\nnpm install @platejs/resizable\n```\n\n## API\n\n### `useResizableState`\n\nManages state for resizable elements.\n\n<API name=\"useResizableState\">\n<APIOptions type=\"ResizableOptions\">\n  <APIItem name=\"align\" type=\"'center' | 'left' | 'right'\" optional>\n    Node alignment.\n    - **Default:** `'center'`\n  </APIItem>\n  <APIItem name=\"maxWidth\" type=\"ResizeLength\" optional>\n    Maximum width constraint.\n    - **Default:** `'100%'`\n  </APIItem>\n  <APIItem name=\"minWidth\" type=\"ResizeLength\" optional>\n    Minimum width constraint.\n    - **Default:** `92`\n  </APIItem>\n  <APIItem name=\"readOnly\" type=\"boolean\" optional>\n    Whether the element is resizable in read-only mode.\n  </APIItem>\n</APIOptions>\n\n<APIReturns type=\"object\">\n  <APIItem name=\"align\" type=\"'center' | 'left' | 'right'\">\n    Current alignment setting.\n  </APIItem>\n  <APIItem name=\"maxWidth\" type=\"ResizeLength\">\n    Maximum width constraint.\n  </APIItem>\n  <APIItem name=\"minWidth\" type=\"ResizeLength\">\n    Minimum width constraint.\n  </APIItem>\n  <APIItem name=\"setNodeWidth\" type=\"(width: number) => void\">\n    Updates node width in editor state.\n  </APIItem>\n  <APIItem name=\"setWidth\" type=\"(width: number | string) => void\">\n    Updates width in local state.\n  </APIItem>\n  <APIItem name=\"width\" type=\"number | string\">\n    Current width value.\n  </APIItem>\n</APIReturns>\n</API>\n\n### `useResizable`\n\nProvides resize behavior props and handlers for resizable elements.\n\n<API name=\"useResizable\">\n<APIParameters>\n  <APIItem name=\"state\" type=\"ReturnType<typeof useResizableState>\">\n    State from `useResizableState`.\n  </APIItem>\n</APIParameters>\n\n<APIReturns type=\"object\">\n  <APIItem name=\"context\" type=\"object\">\n    <APISubList>\n      <APISubListItem parent=\"context\" name=\"onResize\" type=\"(event: ResizeEvent) => void\">\n        Handler for resize events.\n      </APISubListItem>\n    </APISubList>\n  </APIItem>\n  <APIItem name=\"props\" type=\"object\">\n    Style props for the resizable element:\n    - `maxWidth`: Maximum width constraint\n    - `minWidth`: Minimum width constraint\n    - `position`: 'relative'\n    - `width`: Current width\n  </APIItem>\n  <APIItem name=\"wrapperProps\" type=\"object\">\n    Style props for the wrapper element:\n    - `position`: 'relative'\n  </APIItem>\n  <APIItem name=\"wrapperRef\" type=\"React.RefObject<HTMLDivElement>\">\n    Reference to the wrapper element.\n  </APIItem>\n</APIReturns>\n</API>\n\n### `useResizeHandleState`\n\nManages state for resize handle elements.\n\n<API name=\"useResizeHandleState\">\n<APIOptions type=\"ResizeHandleOptions\">\n  <APIItem name=\"direction\" type=\"ResizeDirection\" optional>\n    Direction of resize.\n    - **Default:** `'left'`\n  </APIItem>\n  <APIItem name=\"initialSize\" type=\"number\" optional>\n    Initial size of the resizable element.\n  </APIItem>\n  <APIItem name=\"onHover\" type=\"() => void\" optional>\n    Callback when handle is hovered.\n  </APIItem>\n  <APIItem name=\"onHoverEnd\" type=\"() => void\" optional>\n    Callback when handle hover ends.\n  </APIItem>\n  <APIItem name=\"onMouseDown\" type=\"React.MouseEventHandler\" optional>\n    Custom mouse down handler.\n  </APIItem>\n  <APIItem name=\"onResize\" type=\"(event: ResizeEvent) => void\" optional>\n    Custom resize handler. Falls back to store handler if not provided.\n  </APIItem>\n  <APIItem name=\"onTouchStart\" type=\"React.TouchEventHandler\" optional>\n    Custom touch start handler.\n  </APIItem>\n</APIOptions>\n\n<APIReturns type=\"object\">\n  <APIItem name=\"direction\" type=\"ResizeDirection\">\n    Current resize direction.\n  </APIItem>\n  <APIItem name=\"initialPosition\" type=\"number\">\n    Initial cursor/touch position.\n  </APIItem>\n  <APIItem name=\"initialSize\" type=\"number\">\n    Initial element size.\n  </APIItem>\n  <APIItem name=\"isHorizontal\" type=\"boolean\">\n    Whether resize direction is horizontal.\n  </APIItem>\n  <APIItem name=\"isResizing\" type=\"boolean\">\n    Whether resize is in progress.\n  </APIItem>\n  <APIItem name=\"readOnly\" type=\"boolean\">\n    Editor read-only state.\n  </APIItem>\n  <APIItem name=\"setInitialPosition\" type=\"(position: number) => void\">\n    Update initial position.\n  </APIItem>\n  <APIItem name=\"setInitialSize\" type=\"(size: number) => void\">\n    Update initial size.\n  </APIItem>\n  <APIItem name=\"setIsResizing\" type=\"(resizing: boolean) => void\">\n    Update resize state.\n  </APIItem>\n  <APIItem name=\"onHover\" type=\"() => void\">\n    Hover callback.\n  </APIItem>\n  <APIItem name=\"onHoverEnd\" type=\"() => void\">\n    Hover end callback.\n  </APIItem>\n  <APIItem name=\"onMouseDown\" type=\"React.MouseEventHandler\">\n    Mouse down handler.\n  </APIItem>\n  <APIItem name=\"onResize\" type=\"(event: ResizeEvent) => void\">\n    Resize handler.\n  </APIItem>\n  <APIItem name=\"onTouchStart\" type=\"React.TouchEventHandler\">\n    Touch start handler.\n  </APIItem>\n</APIReturns>\n</API>\n\n### `useResizeHandle`\n\nProvides handlers and props for resize handle elements.\n\n<API name=\"useResizeHandle\">\n<APIParameters>\n  <APIItem name=\"state\" type=\"ReturnType<typeof useResizeHandleState>\">\n    State from `useResizeHandleState`.\n  </APIItem>\n</APIParameters>\n\n<APIReturns type=\"object\">\n  <APIItem name=\"hidden\" type=\"boolean\">\n    Whether the handle should be hidden (in read-only mode).\n  </APIItem>\n  <APIItem name=\"props\" type=\"object\">\n    Props to spread on the handle element:\n    - `onMouseDown`: Mouse down event handler\n    - `onMouseOut`: Mouse out event handler\n    - `onMouseOver`: Mouse over event handler\n    - `onTouchEnd`: Touch end event handler\n    - `onTouchMove`: Touch move event handler\n    - `onTouchStart`: Touch start event handler\n  </APIItem>\n</APIReturns>\n</API>",
      "type": "registry:file",
      "target": "content/docs/plate/api/resizable.mdx"
    }
  ]
}