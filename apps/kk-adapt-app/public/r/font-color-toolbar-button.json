{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-color-toolbar-button",
  "type": "registry:ui",
  "title": "Font Color Toolbar Button",
  "description": "A color picker toolbar button with text and background color controls.",
  "dependencies": [
    "@udecode/cn",
    "@platejs/basic-styles",
    "lodash"
  ],
  "registryDependencies": [
    "dropdown-menu",
    "separator",
    "button",
    "tooltip",
    "https://platejs.org/r/toolbar"
  ],
  "files": [
    {
      "path": "src/registry/ui/font-color-toolbar-button.tsx",
      "content": "'use client';\n\nimport React from 'react';\n\nimport type {\n  DropdownMenuItemProps,\n  DropdownMenuProps,\n} from '@radix-ui/react-dropdown-menu';\n\nimport { useComposedRef } from '@udecode/cn';\nimport debounce from 'lodash/debounce.js';\nimport { EraserIcon, PlusIcon } from 'lucide-react';\nimport { useEditorRef, useEditorSelector } from 'platejs/react';\n\nimport { buttonVariants } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { cn } from '@/lib/utils';\n\nimport { ToolbarButton, ToolbarMenuGroup } from './toolbar';\n\nexport function FontColorToolbarButton({\n  children,\n  nodeType,\n  tooltip,\n}: {\n  nodeType: string;\n  tooltip?: string;\n} & DropdownMenuProps) {\n  const editor = useEditorRef();\n\n  const selectionDefined = useEditorSelector(\n    (editor) => !!editor.selection,\n    []\n  );\n\n  const color = useEditorSelector(\n    (editor) => editor.api.mark(nodeType) as string,\n    [nodeType]\n  );\n\n  const [selectedColor, setSelectedColor] = React.useState<string>();\n  const [open, setOpen] = React.useState(false);\n\n  const onToggle = React.useCallback(\n    (value = !open) => {\n      setOpen(value);\n    },\n    [open, setOpen]\n  );\n\n  const updateColor = React.useCallback(\n    (value: string) => {\n      if (editor.selection) {\n        setSelectedColor(value);\n\n        editor.tf.select(editor.selection);\n        editor.tf.focus();\n\n        editor.tf.addMarks({ [nodeType]: value });\n      }\n    },\n    [editor, nodeType]\n  );\n\n  const updateColorAndClose = React.useCallback(\n    (value: string) => {\n      updateColor(value);\n      onToggle();\n    },\n    [onToggle, updateColor]\n  );\n\n  const clearColor = React.useCallback(() => {\n    if (editor.selection) {\n      editor.tf.select(editor.selection);\n      editor.tf.focus();\n\n      if (selectedColor) {\n        editor.tf.removeMarks(nodeType);\n      }\n\n      onToggle();\n    }\n  }, [editor, selectedColor, onToggle, nodeType]);\n\n  React.useEffect(() => {\n    if (selectionDefined) {\n      setSelectedColor(color);\n    }\n  }, [color, selectionDefined]);\n\n  return (\n    <DropdownMenu\n      open={open}\n      onOpenChange={(value) => {\n        setOpen(value);\n      }}\n      modal={false}\n    >\n      <DropdownMenuTrigger asChild>\n        <ToolbarButton pressed={open} tooltip={tooltip}>\n          {children}\n        </ToolbarButton>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent align=\"start\">\n        <ColorPicker\n          color={selectedColor || color}\n          clearColor={clearColor}\n          colors={DEFAULT_COLORS}\n          customColors={DEFAULT_CUSTOM_COLORS}\n          updateColor={updateColorAndClose}\n          updateCustomColor={updateColor}\n        />\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nfunction PureColorPicker({\n  className,\n  clearColor,\n  color,\n  colors,\n  customColors,\n  updateColor,\n  updateCustomColor,\n  ...props\n}: React.ComponentProps<'div'> & {\n  colors: TColor[];\n  customColors: TColor[];\n  clearColor: () => void;\n  updateColor: (color: string) => void;\n  updateCustomColor: (color: string) => void;\n  color?: string;\n}) {\n  return (\n    <div className={cn('flex flex-col', className)} {...props}>\n      <ToolbarMenuGroup label=\"Custom Colors\">\n        <ColorCustom\n          color={color}\n          className=\"px-2\"\n          colors={colors}\n          customColors={customColors}\n          updateColor={updateColor}\n          updateCustomColor={updateCustomColor}\n        />\n      </ToolbarMenuGroup>\n      <ToolbarMenuGroup label=\"Default Colors\">\n        <ColorDropdownMenuItems\n          color={color}\n          className=\"px-2\"\n          colors={colors}\n          updateColor={updateColor}\n        />\n      </ToolbarMenuGroup>\n      {color && (\n        <ToolbarMenuGroup>\n          <DropdownMenuItem className=\"p-2\" onClick={clearColor}>\n            <EraserIcon />\n            <span>Clear</span>\n          </DropdownMenuItem>\n        </ToolbarMenuGroup>\n      )}\n    </div>\n  );\n}\n\nconst ColorPicker = React.memo(\n  PureColorPicker,\n  (prev, next) =>\n    prev.color === next.color &&\n    prev.colors === next.colors &&\n    prev.customColors === next.customColors\n);\n\nfunction ColorCustom({\n  className,\n  color,\n  colors,\n  customColors,\n  updateColor,\n  updateCustomColor,\n  ...props\n}: {\n  colors: TColor[];\n  customColors: TColor[];\n  updateColor: (color: string) => void;\n  updateCustomColor: (color: string) => void;\n  color?: string;\n} & React.ComponentPropsWithoutRef<'div'>) {\n  const [customColor, setCustomColor] = React.useState<string>();\n  const [value, setValue] = React.useState<string>(color || '#000000');\n\n  React.useEffect(() => {\n    if (\n      !color ||\n      customColors.some((c) => c.value === color) ||\n      colors.some((c) => c.value === color)\n    ) {\n      return;\n    }\n\n    setCustomColor(color);\n  }, [color, colors, customColors]);\n\n  const computedColors = React.useMemo(\n    () =>\n      customColor\n        ? [\n            ...customColors,\n            {\n              isBrightColor: false,\n              name: '',\n              value: customColor,\n            },\n          ]\n        : customColors,\n    [customColor, customColors]\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const updateCustomColorDebounced = React.useCallback(\n    debounce(updateCustomColor, 100),\n    [updateCustomColor]\n  );\n\n  return (\n    <div className={cn('relative flex flex-col gap-4', className)} {...props}>\n      <ColorDropdownMenuItems\n        color={color}\n        colors={computedColors}\n        updateColor={updateColor}\n      >\n        <ColorInput\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value);\n            updateCustomColorDebounced(e.target.value);\n          }}\n        >\n          <DropdownMenuItem\n            className={cn(\n              buttonVariants({\n                size: 'icon',\n                variant: 'outline',\n              }),\n              'absolute top-1 right-2 bottom-2 flex size-8 items-center justify-center rounded-full'\n            )}\n            onSelect={(e) => {\n              e.preventDefault();\n            }}\n          >\n            <span className=\"sr-only\">Custom</span>\n            <PlusIcon />\n          </DropdownMenuItem>\n        </ColorInput>\n      </ColorDropdownMenuItems>\n    </div>\n  );\n}\n\nfunction ColorInput({\n  children,\n  className,\n  value = '#000000',\n  ...props\n}: React.ComponentProps<'input'>) {\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      {React.Children.map(children, (child) => {\n        if (!child) return child;\n\n        return React.cloneElement(\n          child as React.ReactElement<{\n            onClick: () => void;\n          }>,\n          {\n            onClick: () => inputRef.current?.click(),\n          }\n        );\n      })}\n      <input\n        {...props}\n        ref={useComposedRef(props.ref, inputRef)}\n        className={cn('size-0 overflow-hidden border-0 p-0', className)}\n        value={value}\n        type=\"color\"\n      />\n    </div>\n  );\n}\n\ntype TColor = {\n  isBrightColor: boolean;\n  name: string;\n  value: string;\n};\n\nfunction ColorDropdownMenuItem({\n  className,\n  isBrightColor,\n  isSelected,\n  name,\n  updateColor,\n  value,\n  ...props\n}: {\n  isBrightColor: boolean;\n  isSelected: boolean;\n  value: string;\n  updateColor: (color: string) => void;\n  name?: string;\n} & DropdownMenuItemProps) {\n  const content = (\n    <DropdownMenuItem\n      className={cn(\n        buttonVariants({\n          size: 'icon',\n          variant: 'outline',\n        }),\n        'my-1 flex size-6 items-center justify-center rounded-full border border-solid border-muted p-0 transition-all hover:scale-125',\n        !isBrightColor && 'border-transparent',\n        isSelected && 'border-2 border-primary',\n        className\n      )}\n      style={{ backgroundColor: value }}\n      onSelect={(e) => {\n        e.preventDefault();\n        updateColor(value);\n      }}\n      {...props}\n    />\n  );\n\n  return name ? (\n    <Tooltip>\n      <TooltipTrigger>{content}</TooltipTrigger>\n      <TooltipContent className=\"mb-1 capitalize\">{name}</TooltipContent>\n    </Tooltip>\n  ) : (\n    content\n  );\n}\n\nexport function ColorDropdownMenuItems({\n  className,\n  color,\n  colors,\n  updateColor,\n  ...props\n}: {\n  colors: TColor[];\n  updateColor: (color: string) => void;\n  color?: string;\n} & React.ComponentProps<'div'>) {\n  return (\n    <div\n      className={cn(\n        'grid grid-cols-[repeat(10,1fr)] place-items-center gap-x-1',\n        className\n      )}\n      {...props}\n    >\n      <TooltipProvider>\n        {colors.map(({ isBrightColor, name, value }) => (\n          <ColorDropdownMenuItem\n            name={name}\n            key={name ?? value}\n            value={value}\n            isBrightColor={isBrightColor}\n            isSelected={color === value}\n            updateColor={updateColor}\n          />\n        ))}\n        {props.children}\n      </TooltipProvider>\n    </div>\n  );\n}\n\nexport const DEFAULT_COLORS = [\n  {\n    isBrightColor: false,\n    name: 'black',\n    value: '#000000',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 4',\n    value: '#434343',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 3',\n    value: '#666666',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 2',\n    value: '#999999',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 1',\n    value: '#B7B7B7',\n  },\n  {\n    isBrightColor: false,\n    name: 'grey',\n    value: '#CCCCCC',\n  },\n  {\n    isBrightColor: false,\n    name: 'light grey 1',\n    value: '#D9D9D9',\n  },\n  {\n    isBrightColor: true,\n    name: 'light grey 2',\n    value: '#EFEFEF',\n  },\n  {\n    isBrightColor: true,\n    name: 'light grey 3',\n    value: '#F3F3F3',\n  },\n  {\n    isBrightColor: true,\n    name: 'white',\n    value: '#FFFFFF',\n  },\n  {\n    isBrightColor: false,\n    name: 'red berry',\n    value: '#980100',\n  },\n  {\n    isBrightColor: false,\n    name: 'red',\n    value: '#FE0000',\n  },\n  {\n    isBrightColor: false,\n    name: 'orange',\n    value: '#FE9900',\n  },\n  {\n    isBrightColor: true,\n    name: 'yellow',\n    value: '#FEFF00',\n  },\n  {\n    isBrightColor: false,\n    name: 'green',\n    value: '#00FF00',\n  },\n  {\n    isBrightColor: false,\n    name: 'cyan',\n    value: '#00FFFF',\n  },\n  {\n    isBrightColor: false,\n    name: 'cornflower blue',\n    value: '#4B85E8',\n  },\n  {\n    isBrightColor: false,\n    name: 'blue',\n    value: '#1300FF',\n  },\n  {\n    isBrightColor: false,\n    name: 'purple',\n    value: '#9900FF',\n  },\n  {\n    isBrightColor: false,\n    name: 'magenta',\n    value: '#FF00FF',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'light red berry 3',\n    value: '#E6B8AF',\n  },\n  {\n    isBrightColor: false,\n    name: 'light red 3',\n    value: '#F4CCCC',\n  },\n  {\n    isBrightColor: true,\n    name: 'light orange 3',\n    value: '#FCE4CD',\n  },\n  {\n    isBrightColor: true,\n    name: 'light yellow 3',\n    value: '#FFF2CC',\n  },\n  {\n    isBrightColor: true,\n    name: 'light green 3',\n    value: '#D9EAD3',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cyan 3',\n    value: '#D0DFE3',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cornflower blue 3',\n    value: '#C9DAF8',\n  },\n  {\n    isBrightColor: true,\n    name: 'light blue 3',\n    value: '#CFE1F3',\n  },\n  {\n    isBrightColor: true,\n    name: 'light purple 3',\n    value: '#D9D2E9',\n  },\n  {\n    isBrightColor: true,\n    name: 'light magenta 3',\n    value: '#EAD1DB',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'light red berry 2',\n    value: '#DC7E6B',\n  },\n  {\n    isBrightColor: false,\n    name: 'light red 2',\n    value: '#EA9999',\n  },\n  {\n    isBrightColor: false,\n    name: 'light orange 2',\n    value: '#F9CB9C',\n  },\n  {\n    isBrightColor: true,\n    name: 'light yellow 2',\n    value: '#FFE598',\n  },\n  {\n    isBrightColor: false,\n    name: 'light green 2',\n    value: '#B7D6A8',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cyan 2',\n    value: '#A1C4C9',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cornflower blue 2',\n    value: '#A4C2F4',\n  },\n  {\n    isBrightColor: false,\n    name: 'light blue 2',\n    value: '#9FC5E8',\n  },\n  {\n    isBrightColor: false,\n    name: 'light purple 2',\n    value: '#B5A7D5',\n  },\n  {\n    isBrightColor: false,\n    name: 'light magenta 2',\n    value: '#D5A6BD',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'light red berry 1',\n    value: '#CC4125',\n  },\n  {\n    isBrightColor: false,\n    name: 'light red 1',\n    value: '#E06666',\n  },\n  {\n    isBrightColor: false,\n    name: 'light orange 1',\n    value: '#F6B26B',\n  },\n  {\n    isBrightColor: false,\n    name: 'light yellow 1',\n    value: '#FFD966',\n  },\n  {\n    isBrightColor: false,\n    name: 'light green 1',\n    value: '#93C47D',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cyan 1',\n    value: '#76A5AE',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cornflower blue 1',\n    value: '#6C9EEB',\n  },\n  {\n    isBrightColor: false,\n    name: 'light blue 1',\n    value: '#6FA8DC',\n  },\n  {\n    isBrightColor: false,\n    name: 'light purple 1',\n    value: '#8D7CC3',\n  },\n  {\n    isBrightColor: false,\n    name: 'light magenta 1',\n    value: '#C27BA0',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'dark red berry 1',\n    value: '#A61B00',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark red 1',\n    value: '#CC0000',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark orange 1',\n    value: '#E59138',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark yellow 1',\n    value: '#F1C231',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark green 1',\n    value: '#6AA74F',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cyan 1',\n    value: '#45818E',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cornflower blue 1',\n    value: '#3B78D8',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark blue 1',\n    value: '#3E84C6',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark purple 1',\n    value: '#664EA6',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark magenta 1',\n    value: '#A64D78',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'dark red berry 2',\n    value: '#84200D',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark red 2',\n    value: '#990001',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark orange 2',\n    value: '#B45F05',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark yellow 2',\n    value: '#BF9002',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark green 2',\n    value: '#38761D',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cyan 2',\n    value: '#124F5C',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cornflower blue 2',\n    value: '#1155CB',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark blue 2',\n    value: '#0C5394',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark purple 2',\n    value: '#351C75',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark magenta 2',\n    value: '#741B47',\n  },\n\n  {\n    isBrightColor: false,\n    name: 'dark red berry 3',\n    value: '#5B0F00',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark red 3',\n    value: '#660000',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark orange 3',\n    value: '#783F04',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark yellow 3',\n    value: '#7E6000',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark green 3',\n    value: '#274E12',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cyan 3',\n    value: '#0D343D',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark cornflower blue 3',\n    value: '#1B4487',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark blue 3',\n    value: '#083763',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark purple 3',\n    value: '#1F124D',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark magenta 3',\n    value: '#4C1130',\n  },\n];\n\nconst DEFAULT_CUSTOM_COLORS = [\n  {\n    isBrightColor: false,\n    name: 'dark orange 3',\n    value: '#783F04',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 3',\n    value: '#666666',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark grey 2',\n    value: '#999999',\n  },\n  {\n    isBrightColor: false,\n    name: 'light cornflower blue 1',\n    value: '#6C9EEB',\n  },\n  {\n    isBrightColor: false,\n    name: 'dark magenta 3',\n    value: '#4C1130',\n  },\n];\n",
      "type": "registry:ui"
    }
  ],
  "meta": {
    "docs": [
      {
        "route": "/docs/font"
      },
      {
        "route": "https://pro.platejs.org/docs/components/font-color-toolbar-button"
      }
    ],
    "examples": [
      "font-demo"
    ]
  }
}