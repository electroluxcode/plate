{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "installation-mcp-docs",
  "type": "registry:file",
  "title": "MCP Server",
  "description": "Use the Model Context Protocol with Plate.",
  "files": [
    {
      "path": "../../docs/installation/mcp.mdx",
      "content": "---\ntitle: MCP Server\ndescription: Use the Model Context Protocol with Plate.\n---\n\nPlate has an official MCP server. This lets AI tools understand and work with our rich ecosystem of editor templates, plugin configurations, UI components, and documentation.\n\n## What is MCP?\n\nThe Model Context Protocol (MCP) is an open protocol that standardizes how applications provide context to LLMs. This is useful for Plate because you can now give your AI-assisted IDE direct access to hundreds of Plate resources.\n\n## Using MCP with Plate\n\nYour AI can now:\n\n- Access to all our editor templates, plugins, and UI components\n- Access our complete documentation, including guides and API references\n- Generate code with the right imports and configurations\n- Help with setting up full editor instances or specific features\n- Keep your Plate configurations and components up to date\n\nTry asking your AI:\n\n```bash\n\"Set up a Plate editor with basic formatting and table support\"\n\"Help me understand how the Plate AI plugin works\"\n\"Update my editor components to the latest version\"\n```\n\n## How it works\n\nThe Plate ecosystem provides structured information that MCP-enabled tools can read from a unified registry that includes:\n\n- Editor templates and plugin configurations\n- UI components and their dependencies\n- Documentation files and migration guides\n- API references and examples\n\nThis comprehensive registry ensures AI tools have complete context for both code generation and understanding Plate's features.\n\n## Local Documentation\n\nFor teams working with Plate, integrating local documentation is key to maximizing the benefits of MCP. We recommend following our [Local Docs](/docs/installation/docs) guide to set this up. This approach offers several advantages for AI-powered development:\n\n-   **Version-Specific Context:** AI tools gain direct access to documentation that precisely matches your project's Plate version, ensuring relevant and accurate assistance.\n-   **Superior to `llms.txt`:** Unlike simply dumping documentation into a text file (which can struggle with large volumes and context limits), a structured local setup allows AI to efficiently access the specific information it needs.\n-   **Integrated Workflow:** Documentation becomes a part of your codebase, simplifying updates, version control, and team collaboration.\n-   **AI-Ready:** A well-structured local documentation allows AI to more effectively assist with tasks such as generating code, creating summaries, or explaining complex Plate features within the context of your project.\n\n## Setup MCP\n\nChoose the configuration for your IDE:\n\n### Cursor\n\nCopy and paste into `.cursor/mcp.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"plate\": {\n      \"description\": \"Plate editors, plugins, components and documentation\",\n      \"type\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"shadcn@canary\", \"registry:mcp\"],\n      \"env\": {\n        \"REGISTRY_URL\": \"https://platejs.org/r/registry.json\"\n      }\n    }\n  }\n}\n```\n\n### VS Code\n\nCopy and paste into `.vscode/mcp.json` in your workspace:\n\n```json\n{\n  \"servers\": {\n    \"plate\": {\n      \"type\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"shadcn@canary\", \"registry:mcp\"],\n      \"env\": {\n        \"REGISTRY_URL\": \"https://platejs.org/r/registry.json\"\n      }\n    }\n  },\n  \"inputs\": []\n}\n```\n\n## Best Practices\n\n1.  **Local Documentation:** Set up local documentation to give AI tools version-specific context. This ensures more accurate assistance, especially for larger projects.\n2.  **AI-Assisted Development:** Let AI handle editor setup, plugin integration, and component additions.\n3.  **Manual Fallback:** Use the [shadcn CLI](/docs/components/cli) for manual additions when needed (e.g., with small models or outdated documentation).\n4.  **Stay Updated:** Keep both your Plate components and local documentation in sync. Check our [changelog](/docs/components/changelog) regularly or ask your AI about updates.\n",
      "type": "registry:file",
      "target": "content/docs/plate/installation/mcp.mdx"
    }
  ]
}