{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "block-placeholder-docs",
  "type": "registry:file",
  "title": "Block Placeholder",
  "description": "Show placeholder when a block is empty.",
  "files": [
    {
      "path": "../../docs/(plugins)/(functionality)/block-placeholder.mdx",
      "content": "---\ntitle: Block Placeholder\ndescription: Show placeholder when a block is empty.\n---\n\n<ComponentPreview name=\"block-placeholder-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Add customizable placeholder text to empty blocks.\n- Show different placeholders based on block type.\n- Configurable visibility rules using query functions.\n\n</PackageInfo>\n\n## Kit Usage\n\n<Steps>\n\n### Installation\n\nThe fastest way to add block placeholders is with the `BlockPlaceholderKit`, which includes the pre-configured `BlockPlaceholderPlugin`.\n\n<ComponentSource name=\"block-placeholder-kit\" />\n\n### Add Kit\n\n```tsx\nimport { createPlateEditor } from 'platejs/react';\nimport { BlockPlaceholderKit } from '@/components/editor/plugins/block-placeholder-kit';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    ...BlockPlaceholderKit,\n  ],\n});\n```\n\n</Steps>\n\n## Manual Usage\n\n<Steps>\n\n### Installation\n\nBlock placeholders are included in the core Plate package.\n\n```tsx\nimport { BlockPlaceholderPlugin } from 'platejs/react';\n```\n\n### Add Plugin\n\n```tsx\nimport { BlockPlaceholderPlugin } from 'platejs/react';\nimport { createPlateEditor } from 'platejs/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    BlockPlaceholderPlugin,\n  ],\n});\n```\n\n### Configure Plugin\n\nConfigure placeholders for different block types:\n\n```tsx\nimport { KEYS } from 'platejs';\nimport { BlockPlaceholderPlugin } from 'platejs/react';\n\nBlockPlaceholderPlugin.configure({\n  options: {\n    placeholders: {\n      [KEYS.p]: 'Type something...',\n      [KEYS.h1]: 'Enter heading...',\n      [KEYS.blockquote]: 'Enter quote...',\n      [KEYS.codeBlock]: 'Enter code...',\n    },\n  },\n});\n```\n\n### Advanced Configuration\n\nCustomize appearance and visibility rules:\n\n```tsx\nimport { KEYS } from 'platejs';\nimport { BlockPlaceholderPlugin } from 'platejs/react';\n\nBlockPlaceholderPlugin.configure({\n  options: {\n    className: 'before:absolute before:cursor-text before:opacity-30 before:content-[attr(placeholder)]',\n    placeholders: {\n      [KEYS.p]: 'Type something...',\n    },\n    query: ({ path }) => {\n      // Only show placeholders in root-level blocks\n      return path.length === 1;\n    },\n  },\n});\n```\n\n- `placeholders`: Map of block types to placeholder text.\n- `className`: CSS classes applied to blocks with placeholders.\n- `query`: Function to determine which blocks should show placeholders.\n\n</Steps>\n\n## Plugins\n\n### `BlockPlaceholderPlugin`\n\nPlugin for displaying placeholder text in empty blocks.\n\nThe plugin shows placeholders when all of these conditions are met:\n\n1. The block is empty (contains no content)\n2. The editor is not empty (has other content)\n3. The editor is focused\n4. The block matches the query function\n5. The block type matches a key in the placeholders map\n\n<API name=\"BlockPlaceholderPlugin\">\n<APIOptions>\n  <APIItem name=\"placeholders\" type=\"Record<string, string>\">\n    A map of plugin keys to placeholder text strings.\n    - **Default:** `{ [KEYS.p]: 'Type something...' }`\n  </APIItem>\n  <APIItem name=\"query\" type=\"(context: PlatePluginContext & { node: TElement; path: Path }) => boolean\">\n    A function that determines whether a block should show a placeholder.\n    - **Default:** Returns true for root-level blocks (`path.length === 1`)\n  </APIItem>\n  <APIItem name=\"className\" type=\"string\" optional>\n    CSS class to apply to blocks with placeholders.\n  </APIItem>\n</APIOptions>\n</API>\n",
      "type": "registry:file",
      "target": "content/docs/plate/(plugins)/(functionality)/block-placeholder.mdx"
    }
  ]
}