{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "editor-methods-docs",
  "type": "registry:file",
  "title": "Editor Methods",
  "description": "Explore the various methods available for interacting with and customizing the Plate editor.",
  "files": [
    {
      "path": "../../docs/(guides)/editor-methods.mdx",
      "content": "---\ntitle: Editor Methods\ndescription: Explore the various methods available for interacting with and customizing the Plate editor.\n---\n\nThis guide covers the various methods available on the Plate editor instance.\n\n## Accessing the Editor\n\nHow you access the editor instance depends on the context in which you need it.\n\n### Below Plate\n\nUse one of these hooks:\n\n- `useEditorRef`: Never re-render.\n- `useEditorSelector`: Re-render only when a specific editor property changes.\n- `useEditorState`: Re-render on every change.\n\n```ts\nimport { useEditorRef, useEditorSelector, useEditorState } from 'platejs/react';\n\nconst MyComponent = () => {\n  const editor = useEditorRef();\n  const hasSelection = useEditorSelector((editor) => !!editor.selection, []);\n  const editorState = useEditorState();\n  \n  // ...\n};\n```\n\n#### useEditorRef\n\n- Use a reference to editor that never gets replaced. This should be the default choice.\n- Since editor is a mutable object that gets updated by reference, `useEditorRef` is always sufficient for accessing the editor inside callbacks.\n- `useEditorRef` will never cause your component to re-render, so it's the best choice for performance.\n\n#### useEditorSelector\n\n- Subscribe to a specific selector based on editor. This is the most performant option for subscribing to state changes.\n- Example usage: `const hasSelection = useEditorSelector((editor) => !!editor.selection, []);`\n- When you want your component to re-render in response to a specific change that you're interested in, you can use `useEditorSelector` to access the relevant property.\n- The selector function is called every time the editor changes (i.e. on every keystroke or selection change), but the component only re-renders when the return value changes.\n- For this to work properly, you should make sure that the return value can be compared using `===`. In most cases, this means returning a primitive value, like a number, string or boolean.\n- You can provide a custom `equalityFn` in the options to `useEditorSelector` for cases where `===` isn't sufficient.\n- If the selector function depends on any locally scoped variables, you should include these in the dependency list.\n\n#### useEditorState\n\n- Re-render every time the editor changes.\n- Using `useEditorState` will cause your component to re-render every time the user presses a key or changes the selection.\n- This may cause performance issues for large documents, or when re-rendering is particularly expensive.\n\n### Outside Plate\n\nTo access the editor outside the `Plate` component or work with multiple editors, use the `PlateController` component:\n\n```ts\nimport { PlateController } from 'platejs/react';\n\nconst App = () => (\n  <PlateController>\n    <Toolbar />\n    <MyEditor />\n  </PlateController>\n);\n\nconst Toolbar = () => {\n  const editor = useEditorState();\n  const isMounted = useEditorMounted();\n  // Use editor methods here\n};\n```\n\n`PlateController` manages active editors:\n- The first mounted editor is active by default (override with `primary={false}` on `Plate`).\n- Focus changes the active editor.\n- An editor remains active until another is focused or it unmounts.\n\nHooks like `useEditorRef` and `useEditorSelector` work with the active editor inside `PlateController`. If no editor is active, they return a fallback editor, which:\n- Provides default values for queries.\n- Cannot be mutated.\n- Throws errors on state-changing operations.\n\nFallback editor scenarios:\n- No mounted `Plate` components.\n- All `Plate` components are non-primary.\n- During `PlateContent` mounting.\n\nYou can check if any editor is mounted using `useEditorMounted`:\n\n```ts\nconst Toolbar = () => {\n  const editor = useEditorState();\n  const isMounted = useEditorMounted();\n  \n  if (!isMounted) {\n    return <div>Editor not ready</div>;\n  }\n  \n  return <div>{/* Toolbar content */}</div>;\n};\n```\n\nYou can also use `editor.meta.isFallback` to check if the editor is a fallback instance.\n\n## API Methods\n\n### findPath\n\nFind the path of a node. Default is `findNodePath` (traversal). Overridden by `withPlate` to use `ReactEditor.findPath` (memo).\n\n```ts\nconst path = editor.findPath(node);\n```\n\n### getApi\n\nRetrieve the typed API for the editor:\n\n```ts\nconst api = editor.getApi(TablePlugin);\napi.api.create.tableCell(); // Type-safe API method\n```\n\n### getTransforms\n\nGet the typed transforms for the editor:\n\n```ts\nconst tf = editor.getTransforms(TablePlugin);\ntf.insert.tableRow(); // Type-safe transform method\n```\n\n## Plugin Methods\n\n### getPlugin\n\nRetrieve the editor plugin instance by its key or base plugin:\n\n```ts\nconst codeBlockPlugin = editor.getPlugin(CodeBlockPlugin);\nconst headingPlugin = editor.getPlugin({ key: KEYS.heading });\n```\n\n### getType\n\nGet the node type associated with a plugin:\n\n```ts\nconst paragraphType = editor.getType(KEYS.p);\n```\n\n## Option Methods\n\n### getOption\n\nGet a specific option value for a plugin:\n\n```ts\nconst search = editor.getOption(FindReplacePlugin, 'search');\n```\n\nTo subscribe to options changes, use `usePluginOption` or `usePluginOptions` hooks.\n\n### getOptions\n\nGet all options for a plugin:\n\n```ts\nconst linkOptions = editor.getOptions(LinkPlugin);\n```\n\n### setOption\n\nSet a specific option value for a plugin:\n\n```ts\neditor.setOption(FindReplacePlugin, 'search', 'hello');\n```\n\n### setOptions\n\nSet multiple options for a plugin:\n\n```ts\neditor.setOptions(FindReplacePlugin, {\n  search: 'hello',\n  caseSensitive: true,\n});\n```\n\nYou can also use a function to update options using Immer:\n\n```ts\neditor.setOptions(FindReplacePlugin, (draft) => {\n  draft.search = 'hello';\n  draft.caseSensitive = true;\n});\n```\n\n### getOptionsStore\n\nGet the [zustand-x](https://github.com/udecode/zustand-x) options store for a plugin:\n\n```ts\nconst store = editor.getOptionsStore(FindReplacePlugin);\n```\n",
      "type": "registry:file",
      "target": "content/docs/plate/(guides)/editor-methods.mdx"
    }
  ]
}