{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "plugin-context-docs",
  "type": "registry:file",
  "title": "Plugin Context",
  "description": "Understanding and utilizing the Plugin Context in Plate plugins.",
  "files": [
    {
      "path": "../../docs/(guides)/plugin-context.mdx",
      "content": "---\ntitle: Plugin Context\ndescription: Understanding and utilizing the Plugin Context in Plate plugins.\n---\n\nThe Plugin Context is an object available in all plugin methods, providing access to the editor instance, plugin configuration, and utility functions.\n\n## Accessing Plugin Context\n\n### Plugin Methods\n\nThe Plugin Context is available as the first parameter in all plugin methods:\n\n```ts\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  handlers: {\n    onKeyDown: (ctx) => {\n      // ctx is the Plugin Context\n      console.info(ctx.editor, ctx.plugin);\n    },\n  },\n});\n```\n\n### `getEditorPlugin`\n\nThis function is particularly useful when you need to access the context of another plugin. It allows for cross-plugin communication and interaction, enabling more complex and interconnected plugin behaviors.\n\n```ts\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  handlers: {\n    onKeyDown: ({ editor }) => {\n      const linkCtx = getEditorPlugin(LinkPlugin);\n    },\n  },\n});\n```\n\n### `useEditorPlugin`\n\nIn React components, you can use the `useEditorPlugin` hook to access the Plugin Context:\n\n```ts\nconst MyComponent = () => {\n  const { editor, plugin, type } = useEditorPlugin(MyPlugin);\n  \n  return <div>{type}</div>;\n};\n```\n\n## Plugin Context Properties\n\n### `editor`\n\nThe current `PlateEditor` instance:\n\n```ts\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  handlers: {\n    onChange: ({ editor }) => {\n      console.info('Editor value:', editor.children);\n    },\n  },\n});\n```\n\n### `plugin`\n\nThe current plugin configuration:\n\n```ts\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  handlers: {\n    onKeyDown: ({ plugin }) => {\n      console.info('Plugin key:', plugin.key);\n    },\n  },\n});\n```\n\n### `getOption`\n\nA function to get a specific option value for the plugin:\n\n```ts\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: { myOption: 'default' },\n  handlers: {\n    onClick: ({ getOption }) => {\n      const myOption = getOption('myOption');\n      console.info('My option value:', myOption);\n    },\n  },\n});\n```\n\n### `getOptions`\n\nA function to get all options for the plugin:\n\n```ts\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: { option1: 'value1', option2: 'value2' },\n  handlers: {\n    onClick: ({ getOptions }) => {\n      const options = getOptions();\n      console.info('All options:', options);\n    },\n  },\n});\n```\n\n### `setOption`\n\nA function to set a specific option value for the plugin:\n\n```ts\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: { count: 0 },\n  handlers: {\n    onClick: ({ setOption }) => {\n      setOption('count', 1);\n    },\n  },\n});\n```\n\n### `setOptions`\n\nA function to set multiple options for the plugin:\n\n```ts\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: { option1: 'value1', option2: 'value2' },\n  handlers: {\n    onClick: ({ setOptions }) => {\n      setOptions({\n        option1: 'newValue1',\n        option2: 'newValue2',\n      });\n    },\n  },\n});\n```\n\n### `type`\n\nThe node type associated with the plugin:\n\n```ts\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  node: { type: 'myNodeType' },\n  handlers: {\n    onKeyDown: ({ type }) => {\n      console.info('Node type:', type);\n    },\n  },\n});\n```\n",
      "type": "registry:file",
      "target": "content/docs/plate/(guides)/plugin-context.mdx"
    }
  ]
}