{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "controlled-docs",
  "type": "registry:file",
  "title": "Controlled Editor Value",
  "description": "How to control the editor value.",
  "files": [
    {
      "path": "../../docs/(guides)/controlled.mdx",
      "content": "---\ntitle: Controlled Editor Value\ndescription: How to control the editor value.\n---\n\nImplementing a fully controlled editor value in Plate is complex due to several factors:\n\n1. The editor state includes more than just the content (`editor.children`). It also includes `editor.selection` and `editor.history`.\n\n2. Directly replacing `editor.children` can break the selection and history, leading to unexpected behavior or crashes.\n\n3. All changes to the editor's value should ideally happen through [Transforms](https://docs.slatejs.org/api/transforms) to maintain consistency with selection and history.\n\nGiven these challenges, it's generally recommended to use Plate as an uncontrolled input. However, if you need to make external changes to the editor's content, you can use `editor.tf.setValue(value)` function.\n\n<Callout type=\"warning\" title=\"Performance Consideration\">\n  Using `editor.tf.setValue` will re-render all nodes on each call, so it\n  should be used carefully and sparingly. It may impact performance if used\n  frequently or with large documents.\n</Callout>\n\nAlternatively, you can use `editor.tf.reset()` to reset the editor state, which will reset the selection and history.\n\n### Async Initial Value\n\nYou can pass an async function directly to the `value` option. The editor will handle the async loading automatically:\n\n```tsx\nfunction AsyncControlledEditor() {\n  const editor = usePlateEditor({\n    value: async () => {\n      // Simulate fetching data from an API\n      const response = await fetch('/api/document');\n      const data = await response.json();\n      return data.content;\n    },\n    autoSelect: 'end',\n  });\n\n  return (\n    <Plate editor={editor}>\n      <EditorContainer>\n        <Editor />\n      </EditorContainer>\n    </Plate>\n  );\n}\n```\n\nFor more control over initialization timing, you can use `shouldInitialize: false` and manually call `editor.tf.init`:\n\n```tsx\nfunction AsyncControlledEditor() {\n  const [data, setData] = React.useState(null);\n  const editor = usePlateEditor({\n    shouldInitialize: false,\n  });\n\n  React.useEffect(() => {\n    const loadData = async () => {\n      const response = await fetch('/api/document');\n      const data = await response.json();\n      setData(data);\n      \n      editor.tf.init({\n        value: data.content,\n        autoSelect: 'end',\n        onReady: ({ editor, value }) => {\n          console.info('Editor ready with value:', value);\n        },\n      });\n    };\n    \n    loadData();\n  }, [editor]);\n\n  if (!data) return <div>Loadingâ€¦</div>;\n\n  return (\n    <Plate editor={editor}>\n      <EditorContainer>\n        <Editor />\n      </EditorContainer>\n    </Plate>\n  );\n}\n```\n\n<ComponentPreview name=\"controlled-demo\" padding=\"md\" />\n\n",
      "type": "registry:file",
      "target": "content/docs/plate/(guides)/controlled.mdx"
    }
  ]
}