{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "emoji-docs",
  "type": "registry:file",
  "title": "Emoji",
  "description": "Documentation for Emoji",
  "files": [
    {
      "path": "../../docs/(plugins)/(functionality)/(combobox)/emoji.mdx",
      "content": "---\ntitle: Emoji\ndocs:\n  - route: /docs/combobox\n    title: Combobox\n  - route: /docs/components/emoji-node\n    title: Emoji Input Element\n  - route: /docs/components/emoji-dropdown-menu\n    title: Emoji Toolbar Button\n---\n\n<ComponentPreview name=\"emoji-demo\" />\n\n<PackageInfo>\n\n## Features\n\n- Insert emojis inline with autocomplete suggestions\n- Triggered by `:` character followed by emoji name (e.g., `:apple:` üçé)\n- Customizable emoji data source and rendering\n\n</PackageInfo>\n\n## Kit Usage\n\n<Steps>\n\n### Installation\n\nThe fastest way to add emoji functionality is with the `EmojiKit`, which includes pre-configured `EmojiPlugin` and `EmojiInputPlugin` along with their [Plate UI](/docs/installation/plate-ui) components.\n\n<ComponentSource name=\"emoji-kit\" />\n\n- [`EmojiInputElement`](/docs/components/emoji-node): Renders the emoji input combobox\n\n### Add Kit\n\n```tsx\nimport { createPlateEditor } from 'platejs/react';\nimport { EmojiKit } from '@/components/editor/plugins/emoji-kit';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    ...EmojiKit,\n  ],\n});\n```\n\n</Steps>\n\n## Manual Usage\n\n<Steps>\n\n### Installation\n\n```bash\nnpm install @platejs/emoji @emoji-mart/data\n```\n\n### Add Plugins\n\n```tsx\nimport { EmojiPlugin, EmojiInputPlugin } from '@platejs/emoji/react';\nimport { createPlateEditor } from 'platejs/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    EmojiPlugin,\n    EmojiInputPlugin,\n  ],\n});\n```\n\n### Configure Plugins\n\n```tsx\nimport { EmojiPlugin, EmojiInputPlugin } from '@platejs/emoji/react';\nimport { createPlateEditor } from 'platejs/react';\nimport { EmojiInputElement } from '@/components/ui/emoji-node';\nimport emojiMartData from '@emoji-mart/data';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    EmojiPlugin.configure({\n      options: {\n        data: emojiMartData,\n        trigger: ':',\n        triggerPreviousCharPattern: /^\\s?$/,\n        createEmojiNode: (emoji) => ({ text: emoji.skins[0].native }),\n      },\n    }),\n    EmojiInputPlugin.withComponent(EmojiInputElement),\n  ],\n});\n```\n\n- `options.data`: Emoji data from @emoji-mart/data package\n- `options.trigger`: Character that triggers the emoji combobox (default: `:`)\n- `options.triggerPreviousCharPattern`: RegExp pattern for character before trigger\n- `options.createEmojiNode`: Function to create the emoji node when selected. Default inserts Unicode character as text\n- `withComponent`: Assigns the UI component for the emoji input combobox\n\n### Add Toolbar Button\n\nYou can add [`EmojiToolbarButton`](/docs/components/emoji-toolbar-button) to your [Toolbar](/docs/toolbar) to insert emojis.\n\n</Steps>\n\n## Plugins\n\n### EmojiPlugin\n\nPlugin for emoji functionality. Extends [TriggerComboboxPluginOptions](/docs/combobox#triggercomboboxpluginoptions).\n\n<API name=\"EmojiPlugin\">\n<APIOptions>\n  <APIItem name=\"data\" type=\"EmojiMartData\" optional>\n    The emoji data from @emoji-mart/data package.\n    - **Default:** Built-in emoji library\n  </APIItem>\n  <APIItem name=\"createEmojiNode\" type=\"(emoji: Emoji) => Descendant\" optional>\n    Function to specify the node inserted when an emoji is selected.\n    - **Default:** Inserts a text node with the emoji Unicode character\n  </APIItem>\n  <APIItem name=\"trigger\" type=\"string\" optional>\n    Character that triggers the emoji combobox.\n    - **Default:** `':'`\n  </APIItem>\n  <APIItem name=\"triggerPreviousCharPattern\" type=\"RegExp\" optional>\n    Pattern to match the character before trigger.\n    - **Default:** `/^\\s?$/`\n  </APIItem>\n  <APIItem name=\"createComboboxInput\" type=\"() => TElement\" optional>\n    Function to create the input element when trigger is activated.\n  </APIItem>\n</APIOptions>\n</API>\n\n### EmojiInputPlugin\n\nHandles the input behavior for emoji insertion.",
      "type": "registry:file",
      "target": "content/docs/plate/(plugins)/(functionality)/(combobox)/emoji.mdx"
    }
  ]
}