{"version":3,"sources":["../../src/react/index.ts","../../src/react/TogglePlugin.tsx","../../src/lib/BaseTogglePlugin.ts","../../src/react/renderToggleAboveNodes.tsx","../../src/react/toggleIndexAtom.ts","../../src/react/useHooksToggle.ts","../../src/react/withToggle.ts","../../src/react/queries/findElementIdsHiddenInToggle.ts","../../src/react/queries/getEnclosingToggleIds.ts","../../src/react/queries/getLastEntryEnclosedInToggle.ts","../../src/react/queries/isInClosedToggle.ts","../../src/react/transforms/moveCurrentBlockAfterPreviousSelectable.ts","../../src/react/transforms/moveNextSelectableAfterCurrentBlock.ts","../../src/react/transforms/openNextToggles.ts","../../src/react/hooks/useToggleButton.ts","../../src/lib/queries/someToggle.ts","../../src/react/hooks/useToggleToolbarButton.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './TogglePlugin';\nexport * from './renderToggleAboveNodes';\nexport * from './toggleIndexAtom';\nexport * from './useHooksToggle';\nexport * from './withToggle';\nexport * from './hooks/index';\nexport * from './queries/index';\nexport * from './transforms/index';\n","import type { ExtendConfig } from 'platejs';\n\nimport { toTPlatePlugin } from 'platejs/react';\n\nimport type { buildToggleIndex } from './toggleIndexAtom';\n\nimport {\n  type BaseToggleConfig,\n  BaseTogglePlugin,\n} from '../lib/BaseTogglePlugin';\nimport { renderToggleAboveNodes } from './renderToggleAboveNodes';\nimport { useHooksToggle } from './useHooksToggle';\nimport { withToggle } from './withToggle';\n\nexport type ToggleConfig = ExtendConfig<\n  BaseToggleConfig,\n  {\n    toggleIndex?: ReturnType<typeof buildToggleIndex>;\n  }\n>;\n\n/** Enables support for toggleable elements in the editor. */\nexport const TogglePlugin = toTPlatePlugin<ToggleConfig>(BaseTogglePlugin, {\n  options: {\n    toggleIndex: new Map(),\n  },\n  render: {\n    aboveNodes: renderToggleAboveNodes,\n  },\n  useHooks: useHooksToggle as any,\n}).overrideEditor(withToggle);\n","import { type PluginConfig, createTSlatePlugin, KEYS } from 'platejs';\n\nexport type BaseToggleConfig = PluginConfig<\n  'toggle',\n  {\n    openIds?: Set<string>;\n  },\n  {\n    toggle: {\n      toggleIds: (ids: string[], force?: boolean | null) => void;\n    };\n  },\n  {},\n  {\n    isOpen?: (toggleId: string) => boolean;\n    someClosed?: (toggleIds: string[]) => boolean;\n  }\n>;\n\nexport const BaseTogglePlugin = createTSlatePlugin<BaseToggleConfig>({\n  key: KEYS.toggle,\n  node: { isElement: true },\n  options: {\n    openIds: new Set(),\n  },\n})\n  .extendSelectors<BaseToggleConfig['selectors']>(({ getOptions }) => ({\n    isOpen: (toggleId) => {\n      return getOptions().openIds!.has(toggleId);\n    },\n    someClosed: (toggleIds) => {\n      const { openIds } = getOptions();\n\n      return toggleIds.some((id) => !openIds!.has(id));\n    },\n  }))\n  .extendApi<BaseToggleConfig['api']['toggle']>(({ setOptions }) => ({\n    toggleIds: (ids, force = null) => {\n      setOptions((draft) => {\n        ids.forEach((id) => {\n          const isCurrentlyOpen = draft.openIds!.has(id);\n          const newIsOpen = force === null ? !isCurrentlyOpen : force;\n\n          if (newIsOpen) {\n            draft.openIds!.add(id);\n          } else {\n            draft.openIds!.delete(id);\n          }\n        });\n      });\n    },\n  }));\n","import React from 'react';\n\nimport type {\n  RenderNodeWrapper,\n  RenderNodeWrapperFunction,\n} from 'platejs/react';\n\nimport { useIsVisible } from './toggleIndexAtom';\n\nexport const renderToggleAboveNodes: RenderNodeWrapper = () => ToggleAboveNodes;\n\nconst ToggleAboveNodes: RenderNodeWrapperFunction = ({ children, element }) => {\n  const isVisible = useIsVisible(element.id as string);\n\n  if (isVisible) return children;\n\n  return <div style={hiddenStyle}>{children}</div>;\n};\n\nconst hiddenStyle: React.CSSProperties = {\n  height: 0,\n  margin: 0,\n  overflow: 'hidden',\n  visibility: 'hidden',\n};\n","import { useMemo } from 'react';\n\nimport type { TIndentElement, Value } from 'platejs';\n\nimport { KEYS } from 'platejs';\nimport {\n  atom,\n  plateStore,\n  usePlateStore,\n  usePluginOption,\n  useStoreAtomValue,\n} from 'platejs/react';\n\nimport { TogglePlugin } from './TogglePlugin';\n\n// Duplicate constant instead of importing from \"plate-list\" to avoid a dependency.\nconst ListPluginKey = 'listStyleType';\n\n// Returns, for each child, the enclosing toggle ids\nexport const buildToggleIndex = (elements: Value): Map<string, string[]> => {\n  const result = new Map<string, string[]>();\n  let currentEnclosingToggles: [string, number][] = []; // [toggleId, indent][]\n  elements.forEach((element) => {\n    const elementIndent = (element[KEYS.indent] as number) || 0;\n    // For some reason, indent lists have a min indent of 1, even though they are not indented\n    const elementIndentWithListCorrection =\n      element[ListPluginKey] && element[KEYS.indent]\n        ? elementIndent - 1\n        : elementIndent;\n\n    const enclosingToggles = currentEnclosingToggles.filter(([_, indent]) => {\n      return indent < elementIndentWithListCorrection;\n    });\n    currentEnclosingToggles = enclosingToggles;\n    result.set(\n      element.id as string,\n      enclosingToggles.map(([toggleId]) => toggleId)\n    );\n\n    if (element.type === KEYS.toggle) {\n      currentEnclosingToggles.push([element.id as string, elementIndent]);\n    }\n  });\n\n  return result;\n};\n\nexport const editorAtom = plateStore.atom.trackedEditor;\n\n// Due to a limitation of jotai-x, it's not possible to derive a state from both `toggleControllerStore` and plateStore`.\n// In order minimize re-renders, we subscribe to both separately, but only re-render unnecessarily when opening or closing a toggle,\n//   which is less frequent than changing the editor's children.\nexport const useIsVisible = (elementId: string) => {\n  const openIds = usePluginOption(TogglePlugin, 'openIds')!;\n  const isVisibleAtom = useMemo(\n    () =>\n      atom((get) => {\n        const toggleIndex = get(toggleIndexAtom);\n        const enclosedInToggleIds = toggleIndex.get(elementId) || [];\n\n        return enclosedInToggleIds.every((enclosedId) =>\n          openIds.has(enclosedId)\n        );\n      }),\n    [elementId, openIds]\n  );\n\n  return useStoreAtomValue(usePlateStore(), isVisibleAtom);\n};\n\nexport const toggleIndexAtom = atom((get) =>\n  buildToggleIndex(get(editorAtom).editor.children as TIndentElement[])\n);\n\nexport const useToggleIndex = () =>\n  useStoreAtomValue(usePlateStore(), toggleIndexAtom);\n","import { useEffect } from 'react';\n\nimport type { UseHooks } from 'platejs/react';\n\nimport type { ToggleConfig } from './TogglePlugin';\n\nimport { useToggleIndex } from './toggleIndexAtom';\n\nexport const useHooksToggle: UseHooks<ToggleConfig> = ({\n  editor,\n  setOption,\n}) => {\n  const toggleIndex = useToggleIndex();\n\n  useEffect(() => {\n    setOption('toggleIndex', toggleIndex);\n  }, [editor, setOption, toggleIndex]);\n};\n","import type { OverrideEditor } from 'platejs/react';\n\nimport { indent } from '@platejs/indent';\nimport { type SlateEditor, type TIndentElement, KEYS, NodeApi } from 'platejs';\n\nimport type { ToggleConfig } from './TogglePlugin';\n\nimport { getLastEntryEnclosedInToggle, isInClosedToggle } from './queries';\nimport {\n  moveCurrentBlockAfterPreviousSelectable,\n  moveNextSelectableAfterCurrentBlock,\n} from './transforms';\n\nexport const withToggle: OverrideEditor<ToggleConfig> = ({\n  api: { isSelectable },\n  editor,\n  getOption,\n  tf: { deleteBackward, deleteForward, insertBreak },\n}) => ({\n  api: {\n    isSelectable(element) {\n      if (\n        NodeApi.isNode(element) &&\n        isInClosedToggle(editor, element.id as string)\n      )\n        return false;\n\n      return isSelectable(element);\n    },\n  },\n  transforms: {\n    deleteBackward(unit) {\n      if (\n        moveCurrentBlockAfterPreviousSelectable(editor as SlateEditor) === false\n      )\n        return;\n\n      deleteBackward(unit);\n    },\n\n    deleteForward(unit) {\n      if (moveNextSelectableAfterCurrentBlock(editor as SlateEditor) === false)\n        return;\n\n      deleteForward(unit);\n    },\n\n    insertBreak() {\n      const currentBlockEntry = editor.api.block<TIndentElement>();\n\n      if (!currentBlockEntry || currentBlockEntry[0].type !== KEYS.toggle) {\n        return insertBreak();\n      }\n\n      const toggleId = currentBlockEntry[0].id as string;\n      const isOpen = getOption('isOpen', toggleId);\n\n      editor.tf.withoutNormalizing(() => {\n        if (isOpen) {\n          insertBreak();\n          editor.tf.toggleBlock(KEYS.toggle);\n          indent(editor);\n        } else {\n          const lastEntryEnclosedInToggle = getLastEntryEnclosedInToggle(\n            editor,\n            toggleId\n          );\n\n          insertBreak();\n\n          if (lastEntryEnclosedInToggle) {\n            const newlyInsertedTogglePath = [currentBlockEntry[1][0] + 1];\n            const afterLastEntryEncloseInToggle = [\n              lastEntryEnclosedInToggle[1][0] + 1,\n            ];\n            editor.tf.moveNodes({\n              at: newlyInsertedTogglePath,\n              to: afterLastEntryEncloseInToggle,\n            });\n          }\n        }\n      });\n    },\n  },\n});\n","import type { TIndentElement } from 'platejs';\n\nimport { buildToggleIndex } from '../toggleIndexAtom';\n\nexport const findElementIdsHiddenInToggle = (\n  openToggleIds: Set<string>,\n  elements: TIndentElement[]\n): string[] => {\n  const toggleIndex = buildToggleIndex(elements);\n\n  return elements\n    .filter((element) => {\n      const enclosingToggleIds = toggleIndex.get(element.id as string) || [];\n\n      return enclosingToggleIds.some(\n        (toggleId) => !openToggleIds.has(toggleId)\n      );\n    })\n    .map((element) => element.id as string);\n};\n","import type { SlateEditor } from 'platejs';\n\nimport { TogglePlugin } from '../TogglePlugin';\n\nexport function getEnclosingToggleIds(\n  editor: SlateEditor,\n  elementId: string\n): string[] {\n  return editor.getOptions(TogglePlugin).toggleIndex?.get(elementId) || [];\n}\n","import type { NodeEntry, SlateEditor } from 'platejs';\n\nimport last from 'lodash/last.js';\n\nimport { buildToggleIndex } from '../toggleIndexAtom';\n\nexport const getLastEntryEnclosedInToggle = (\n  editor: SlateEditor,\n  toggleId: string\n): NodeEntry | undefined => {\n  const toggleIndex = buildToggleIndex(editor.children);\n  const entriesInToggle = editor.children\n    .map((node, index) => [node, [index]] as NodeEntry)\n    .filter(([node]) => {\n      return (toggleIndex.get(node.id as string) || []).includes(toggleId);\n    });\n\n  return last(entriesInToggle);\n};\n","import { type SlateEditor, getEditorPlugin } from 'platejs';\n\nimport { TogglePlugin } from '../TogglePlugin';\nimport { getEnclosingToggleIds } from './getEnclosingToggleIds';\n\nexport const isInClosedToggle = (editor: SlateEditor, elementId: string) => {\n  const enclosingToggleIds = getEnclosingToggleIds(editor, elementId);\n\n  return getEditorPlugin(editor, TogglePlugin).getOption(\n    'someClosed',\n    enclosingToggleIds\n  );\n};\n","import { type SlateEditor, ElementApi } from 'platejs';\n\nimport { isInClosedToggle } from '../queries';\n\n// Return false only if the all previous blocks are not selectable\nexport const moveCurrentBlockAfterPreviousSelectable = (\n  editor: SlateEditor\n): boolean | undefined => {\n  const { selection } = editor;\n\n  if (!selection) return;\n\n  const aboveBlock = editor.api.block();\n\n  if (!aboveBlock) return;\n  if (!editor.api.isAt({ start: true })) return;\n\n  const beforePoint = editor.api.before(selection);\n\n  if (!beforePoint) return;\n\n  const blockBefore = editor.api.block({ at: beforePoint });\n\n  if (!blockBefore) return;\n  if (!isInClosedToggle(editor, blockBefore[0].id as string)) return; // We're already after a selectable then\n\n  const previousSelectableBlock = editor.api.previous({\n    match: (node) =>\n      ElementApi.isElement(node) &&\n      !isInClosedToggle(editor, node.id as string),\n  });\n\n  if (!previousSelectableBlock) return false;\n\n  const afterSelectableBlock = [previousSelectableBlock[1][0] + 1];\n  editor.tf.moveNodes({\n    at: aboveBlock[1],\n    to: afterSelectableBlock,\n  });\n};\n","import { type SlateEditor, ElementApi } from 'platejs';\n\nimport { isInClosedToggle } from '../queries';\n\n// Return false only if all next blocks are not selectable\nexport const moveNextSelectableAfterCurrentBlock = (editor: SlateEditor) => {\n  const { selection } = editor;\n\n  if (!selection) return;\n\n  const aboveBlock = editor.api.block();\n\n  if (!aboveBlock) return;\n  if (!editor.api.isAt({ end: true })) return;\n\n  const afterPoint = editor.api.after(selection);\n\n  if (!afterPoint) return;\n\n  const blockAfter = editor.api.block({ at: afterPoint });\n\n  if (!blockAfter) return;\n  if (!isInClosedToggle(editor, blockAfter[0].id as string)) return; // We're already before a selectable then\n\n  const nextSelectableBlock = editor.api.next({\n    match: (node) =>\n      ElementApi.isElement(node) &&\n      !isInClosedToggle(editor, node.id as string),\n  });\n\n  if (!nextSelectableBlock) return false;\n\n  const afterCurrentBlock = [aboveBlock[1][0] + 1];\n  editor.tf.moveNodes({\n    at: nextSelectableBlock[1],\n    to: afterCurrentBlock,\n  });\n};\n","import type { SlateEditor } from 'platejs';\n\nimport { TogglePlugin } from '../TogglePlugin';\n\n// When creating a toggle, we open it by default.\n// So before inserting the toggle, we update the store to mark the id of the blocks about to be turned into toggles as open.\nexport const openNextToggles = (editor: SlateEditor) => {\n  const nodeEntries = Array.from(\n    editor.api.nodes({\n      block: true,\n      mode: 'lowest',\n    })\n  );\n\n  editor.getApi(TogglePlugin).toggle.toggleIds(\n    nodeEntries.map(([node]) => node.id as string),\n    true\n  );\n};\n","import { useEditorPlugin, usePluginOption } from 'platejs/react';\n\nimport { BaseTogglePlugin } from '../../lib';\n\nexport const useToggleButtonState = (toggleId: string) => {\n  const openIds = usePluginOption(BaseTogglePlugin, 'openIds')!;\n\n  return {\n    open: openIds.has(toggleId),\n    toggleId,\n  };\n};\n\nexport const useToggleButton = (\n  state: ReturnType<typeof useToggleButtonState>\n) => {\n  const { api } = useEditorPlugin(BaseTogglePlugin);\n\n  return {\n    ...state,\n    buttonProps: {\n      onClick: (e: React.MouseEvent) => {\n        e.preventDefault();\n        api.toggle.toggleIds([state.toggleId]);\n      },\n      onMouseDown: (e: React.MouseEvent) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n","import { type SlateEditor, KEYS } from 'platejs';\n\nexport const someToggle = (editor: SlateEditor) => {\n  return (\n    !!editor.selection &&\n    editor.api.some({\n      match: (n) => n.type === KEYS.toggle,\n    })\n  );\n};\n","import { KEYS } from 'platejs';\nimport { useEditorRef, useEditorSelector } from 'platejs/react';\n\nimport { someToggle } from '../../lib';\nimport { openNextToggles } from '../transforms';\n\nexport const useToggleToolbarButtonState = () => {\n  const pressed = useEditorSelector((editor) => someToggle(editor), []);\n\n  return {\n    pressed,\n  };\n};\n\nexport const useToggleToolbarButton = ({\n  pressed,\n}: ReturnType<typeof useToggleToolbarButtonState>) => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      pressed,\n      onClick: () => {\n        openNextToggles(editor);\n        editor.tf.toggleBlock(KEYS.toggle);\n        editor.tf.collapse();\n        editor.tf.focus();\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n"],"mappings":"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","names":["import_react","import_react","import_platejs","import_react","indent","React","import_react","import_platejs","last","import_platejs","import_platejs","import_platejs","import_react","import_platejs","import_platejs","import_react"]}