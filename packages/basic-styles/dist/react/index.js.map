{"version":3,"sources":["../../src/react/index.ts","../../src/react/FontPlugin.tsx","../../src/lib/BaseFontBackgroundColorPlugin.ts","../../src/lib/BaseFontColorPlugin.ts","../../src/lib/BaseFontFamilyPlugin.ts","../../src/lib/BaseFontSizePlugin.ts","../../src/lib/BaseFontWeightPlugin.ts","../../src/lib/BaseLineHeightPlugin.ts","../../src/lib/transforms/setAlign.ts","../../src/lib/BaseTextAlignPlugin.ts","../../src/lib/transforms/setLineHeight.ts","../../src/lib/BaseTextIndentPlugin.ts","../../src/react/LineHeightPlugin.tsx","../../src/react/TextAlignPlugin.tsx","../../src/react/TextIndentPlugin.tsx"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './FontPlugin';\nexport * from './LineHeightPlugin';\nexport * from './TextAlignPlugin';\nexport * from './TextIndentPlugin';\n","import { toPlatePlugin } from 'platejs/react';\n\nimport {\n  BaseFontBackgroundColorPlugin,\n  BaseFontColorPlugin,\n  BaseFontFamilyPlugin,\n  BaseFontSizePlugin,\n  BaseFontWeightPlugin,\n} from '../lib';\n\nexport const FontColorPlugin = toPlatePlugin(BaseFontColorPlugin);\n\nexport const FontSizePlugin = toPlatePlugin(BaseFontSizePlugin);\n\nexport const FontFamilyPlugin = toPlatePlugin(BaseFontFamilyPlugin);\n\nexport const FontBackgroundColorPlugin = toPlatePlugin(\n  BaseFontBackgroundColorPlugin\n);\n\nexport const FontWeightPlugin = toPlatePlugin(BaseFontWeightPlugin);\n","import { createSlatePlugin, KEYS } from 'platejs';\n\nexport const BaseFontBackgroundColorPlugin = createSlatePlugin({\n  key: KEYS.backgroundColor,\n  inject: {\n    nodeProps: {\n      nodeKey: 'backgroundColor',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              backgroundColor: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({\n          [type]: element.style.backgroundColor,\n        }),\n      },\n    },\n  },\n}).extendTransforms(({ editor }) => ({\n  addMark: (value: string) => {\n    editor.tf.addMarks({\n      [KEYS.backgroundColor]: value,\n    });\n  },\n}));\n","import { createSlatePlugin, KEYS } from 'platejs';\n\nexport const BaseFontColorPlugin = createSlatePlugin({\n  key: KEYS.color,\n  inject: {\n    nodeProps: {\n      defaultNodeValue: 'black',\n      nodeKey: 'color',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              color: '*',\n            },\n          },\n        ],\n        parse({ element, type }) {\n          if (element.style.color) {\n            return { [type]: element.style.color };\n          }\n        },\n      },\n    },\n  },\n}).extendTransforms(({ editor }) => ({\n  addMark: (value: string) => {\n    editor.tf.addMarks({\n      [KEYS.color]: value,\n    });\n  },\n}));\n","import { createSlatePlugin, KEYS } from 'platejs';\n\nexport const BaseFontFamilyPlugin = createSlatePlugin({\n  key: KEYS.fontFamily,\n  inject: {\n    nodeProps: {\n      nodeKey: 'fontFamily',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              fontFamily: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({ [type]: element.style.fontFamily }),\n      },\n    },\n  },\n}).extendTransforms(({ editor }) => ({\n  addMark: (value: string) => {\n    editor.tf.addMarks({\n      [KEYS.fontFamily]: value,\n    });\n  },\n}));\n","import { createSlatePlugin, KEYS } from 'platejs';\n\nexport const BaseFontSizePlugin = createSlatePlugin({\n  key: KEYS.fontSize,\n  inject: {\n    nodeProps: {\n      nodeKey: 'fontSize',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              fontSize: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({ [type]: element.style.fontSize }),\n      },\n    },\n  },\n}).extendTransforms(({ editor }) => ({\n  addMark: (value: string) => {\n    editor.tf.addMarks({\n      [KEYS.fontSize]: value,\n    });\n  },\n}));\n","import { createSlatePlugin, KEYS } from 'platejs';\n\nexport const BaseFontWeightPlugin = createSlatePlugin({\n  key: KEYS.fontWeight,\n  inject: {\n    nodeProps: {\n      nodeKey: 'fontWeight',\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        isLeaf: true,\n        rules: [\n          {\n            validStyle: {\n              fontWeight: '*',\n            },\n          },\n        ],\n        parse: ({ element, type }) => ({ [type]: element.style.fontWeight }),\n      },\n    },\n  },\n}).extendTransforms(({ editor }) => ({\n  addMark: (value: string) => {\n    editor.tf.addMarks({\n      [KEYS.fontWeight]: value,\n    });\n  },\n}));\n","import { bindFirst, createSlatePlugin, KEYS } from 'platejs';\n\nimport { setLineHeight } from './transforms';\n\n/**\n * Enables support for text alignment, useful to align your content to left,\n * right and center it.\n */\nexport const BaseLineHeightPlugin = createSlatePlugin({\n  key: KEYS.lineHeight,\n  inject: {\n    isBlock: true,\n    nodeProps: {\n      defaultNodeValue: 1.5,\n      nodeKey: 'lineHeight',\n    },\n    targetPlugins: [KEYS.p],\n    targetPluginToInject: ({ editor, plugin }) => ({\n      parsers: {\n        html: {\n          deserializer: {\n            parse: ({ element }) => {\n              if (element.style.lineHeight) {\n                return {\n                  [editor.getType(plugin.key)]: element.style.lineHeight,\n                };\n              }\n            },\n          },\n        },\n      },\n    }),\n  },\n}).extendTransforms(({ editor }) => ({\n  setNodes: bindFirst(setLineHeight, editor),\n}));\n","import {\n  type SetNodesOptions,\n  type SlateEditor,\n  getInjectMatch,\n  KEYS,\n} from 'platejs';\n\nimport { BaseTextAlignPlugin } from '../BaseTextAlignPlugin';\n\nexport type Alignment =\n  | 'center'\n  | 'end'\n  | 'justify'\n  | 'left'\n  | 'right'\n  | 'start';\n\nexport const setAlign = (\n  editor: SlateEditor,\n  value: Alignment,\n  setNodesOptions?: SetNodesOptions\n) => {\n  const { defaultNodeValue, nodeKey } =\n    editor.getInjectProps(BaseTextAlignPlugin);\n\n  const match = getInjectMatch(\n    editor,\n    editor.getPlugin({ key: KEYS.textAlign })\n  );\n\n  if (value === defaultNodeValue) {\n    editor.tf.unsetNodes(nodeKey!, {\n      match,\n      ...setNodesOptions,\n    });\n  } else {\n    editor.tf.setNodes(\n      { [nodeKey!]: value },\n      {\n        match: match as any,\n        ...setNodesOptions,\n      }\n    );\n  }\n};\n","import { bindFirst, createSlatePlugin, KEYS } from 'platejs';\n\nimport { setAlign } from './transforms';\n\n/** Creates a plugin that adds alignment functionality to the editor. */\nexport const BaseTextAlignPlugin = createSlatePlugin({\n  key: KEYS.textAlign,\n  inject: {\n    isBlock: true,\n    nodeProps: {\n      defaultNodeValue: 'start',\n      styleKey: 'textAlign',\n      validNodeValues: ['start', 'left', 'center', 'right', 'end', 'justify'],\n    },\n    targetPlugins: [KEYS.p],\n    targetPluginToInject: ({ editor }) => ({\n      parsers: {\n        html: {\n          deserializer: {\n            parse: ({ element, node }) => {\n              if (element.style.textAlign) {\n                node[editor.getType(KEYS.textAlign)] = element.style.textAlign;\n              }\n            },\n          },\n        },\n      },\n    }),\n  },\n  node: { type: 'align' },\n}).extendTransforms(({ editor }) => ({\n  setNodes: bindFirst(setAlign, editor),\n}));\n","import {\n  type SetNodesOptions,\n  type SlateEditor,\n  getInjectMatch,\n  KEYS,\n} from 'platejs';\n\nimport { BaseLineHeightPlugin } from '../BaseLineHeightPlugin';\n\nexport const setLineHeight = (\n  editor: SlateEditor,\n  value: number,\n  setNodesOptions?: SetNodesOptions\n): void => {\n  const { defaultNodeValue, nodeKey } =\n    editor.getInjectProps(BaseLineHeightPlugin);\n\n  const match = getInjectMatch(\n    editor,\n    editor.getPlugin({ key: KEYS.lineHeight })\n  );\n\n  if (value === defaultNodeValue) {\n    editor.tf.unsetNodes(nodeKey!, {\n      match,\n      ...setNodesOptions,\n    });\n  } else {\n    editor.tf.setNodes(\n      { [nodeKey!]: value },\n      {\n        match: match as any,\n        ...setNodesOptions,\n      }\n    );\n  }\n};\n","import { type PluginConfig, createTSlatePlugin, KEYS } from 'platejs';\n\nexport type TextIndentConfig = PluginConfig<\n  'textIndent',\n  { offset: number; unit: string }\n>;\n\nexport const BaseTextIndentPlugin = createTSlatePlugin<TextIndentConfig>({\n  key: KEYS.textIndent,\n  inject: {\n    isBlock: true,\n    nodeProps: {\n      nodeKey: 'textIndent',\n      styleKey: 'textIndent',\n      transformNodeValue({ getOptions, nodeValue }) {\n        const { offset, unit } = getOptions();\n\n        return nodeValue * offset! + unit!;\n      },\n    },\n    targetPlugins: [KEYS.p],\n  },\n  options: {\n    offset: 24,\n    unit: 'px',\n  },\n});\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseLineHeightPlugin } from '../lib';\n\nexport const LineHeightPlugin = toPlatePlugin(BaseLineHeightPlugin);\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseTextAlignPlugin } from '../lib/index';\n\nexport const TextAlignPlugin = toPlatePlugin(BaseTextAlignPlugin);\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseTextIndentPlugin } from '../lib';\n\nexport const TextIndentPlugin = toPlatePlugin(BaseTextIndentPlugin);\n"],"mappings":"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","names":["import_platejs","import_platejs","import_platejs","import_platejs","import_platejs","import_platejs","import_platejs","import_platejs","import_platejs","import_react","import_react","import_react"]}