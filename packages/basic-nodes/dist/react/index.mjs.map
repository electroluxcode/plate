{"version":3,"sources":["../../src/react/BasicBlocksPlugin.tsx","../../src/react/BlockquotePlugin.tsx","../../src/lib/BaseBlockquotePlugin.ts","../../src/react/HeadingPlugin.tsx","../../src/lib/BaseHeadingPlugin.ts","../../src/react/HorizontalRulePlugin.tsx","../../src/lib/BaseHorizontalRulePlugin.ts","../../src/lib/BaseBasicMarksPlugin.ts","../../src/lib/BaseBoldPlugin.ts","../../src/lib/BaseCodePlugin.ts","../../src/lib/BaseItalicPlugin.ts","../../src/lib/BaseStrikethroughPlugin.ts","../../src/lib/BaseSubscriptPlugin.ts","../../src/lib/BaseSuperscriptPlugin.ts","../../src/lib/BaseUnderlinePlugin.ts","../../src/lib/BaseHighlightPlugin.ts","../../src/lib/BaseKbdPlugin.ts","../../src/react/BasicMarksPlugin.tsx","../../src/react/BoldPlugin.tsx","../../src/react/CodePlugin.tsx","../../src/react/ItalicPlugin.tsx","../../src/react/StrikethroughPlugin.tsx","../../src/react/SubscriptPlugin.tsx","../../src/react/SuperscriptPlugin.tsx","../../src/react/UnderlinePlugin.tsx","../../src/react/HighlightPlugin.tsx","../../src/react/KbdPlugin.tsx"],"sourcesContent":["import { createPlatePlugin } from 'platejs/react';\n\nimport { BlockquotePlugin } from './BlockquotePlugin';\nimport { HeadingPlugin } from './HeadingPlugin';\nimport { HorizontalRulePlugin } from './HorizontalRulePlugin';\n\n/**\n * Enables support for basic elements:\n *\n * - Block quote\n * - Code block\n * - Heading\n * - Paragraph\n */\nexport const BasicBlocksPlugin = createPlatePlugin({\n  plugins: [BlockquotePlugin, HeadingPlugin, HorizontalRulePlugin],\n});\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseBlockquotePlugin } from '../lib/BaseBlockquotePlugin';\n\nexport const BlockquotePlugin = toPlatePlugin(BaseBlockquotePlugin);\n","import { createSlatePlugin, KEYS } from 'platejs';\n\n/** Enables support for block quotes, useful for quotations and passages. */\nexport const BaseBlockquotePlugin = createSlatePlugin({\n  key: KEYS.blockquote,\n  node: {\n    isElement: true,\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          {\n            validNodeName: 'BLOCKQUOTE',\n          },\n        ],\n      },\n    },\n  },\n  render: { as: 'blockquote' },\n  rules: {\n    break: {\n      default: 'lineBreak',\n      empty: 'reset',\n      emptyLineEnd: 'deleteExit',\n    },\n    delete: {\n      start: 'reset',\n    },\n  },\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleBlock(type);\n  },\n}));\n","import { toPlatePlugin } from 'platejs/react';\n\nimport {\n  BaseH1Plugin,\n  BaseH2Plugin,\n  BaseH3Plugin,\n  BaseH4Plugin,\n  BaseH5Plugin,\n  BaseH6Plugin,\n  BaseHeadingPlugin,\n} from '../lib/BaseHeadingPlugin';\n\nexport const HeadingPlugin = toPlatePlugin(BaseHeadingPlugin);\n\nexport const H1Plugin = toPlatePlugin(BaseH1Plugin);\nexport const H2Plugin = toPlatePlugin(BaseH2Plugin);\nexport const H3Plugin = toPlatePlugin(BaseH3Plugin);\nexport const H4Plugin = toPlatePlugin(BaseH4Plugin);\nexport const H5Plugin = toPlatePlugin(BaseH5Plugin);\nexport const H6Plugin = toPlatePlugin(BaseH6Plugin);\n","import {\n  type AnyEditorPlugin,\n  type PluginConfig,\n  type SlatePlugin,\n  createTSlatePlugin,\n} from 'platejs';\n\nexport type HeadingConfig = PluginConfig<\n  'heading',\n  {\n    /** Heading levels supported from 1 to `levels` */\n    levels?: HeadingLevel | HeadingLevel[];\n  }\n>;\n\nexport type HeadingLevel = 1 | 2 | 3 | 4 | 5 | 6;\n\nconst node = {\n  isElement: true,\n} satisfies Partial<AnyEditorPlugin['node']>;\n\nconst rules = {\n  break: { splitReset: true },\n  merge: { removeEmpty: true },\n};\n\nexport const BaseH1Plugin = createTSlatePlugin({\n  key: 'h1',\n  node,\n  parsers: { html: { deserializer: { rules: [{ validNodeName: 'H1' }] } } },\n  render: { as: 'h1' },\n  rules,\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleBlock(type);\n  },\n}));\n\nexport const BaseH2Plugin = createTSlatePlugin({\n  key: 'h2',\n  node,\n  parsers: { html: { deserializer: { rules: [{ validNodeName: 'H2' }] } } },\n  render: { as: 'h2' },\n  rules,\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleBlock(type);\n  },\n}));\n\nexport const BaseH3Plugin = createTSlatePlugin({\n  key: 'h3',\n  node,\n  parsers: { html: { deserializer: { rules: [{ validNodeName: 'H3' }] } } },\n  render: { as: 'h3' },\n  rules,\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleBlock(type);\n  },\n}));\n\nexport const BaseH4Plugin = createTSlatePlugin({\n  key: 'h4',\n  node,\n  parsers: { html: { deserializer: { rules: [{ validNodeName: 'H4' }] } } },\n  render: { as: 'h4' },\n  rules,\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleBlock(type);\n  },\n}));\n\nexport const BaseH5Plugin = createTSlatePlugin({\n  key: 'h5',\n  node,\n  parsers: { html: { deserializer: { rules: [{ validNodeName: 'H5' }] } } },\n  render: { as: 'h5' },\n  rules,\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleBlock(type);\n  },\n}));\n\nexport const BaseH6Plugin = createTSlatePlugin({\n  key: 'h6',\n  node,\n  parsers: { html: { deserializer: { rules: [{ validNodeName: 'H6' }] } } },\n  render: { as: 'h6' },\n  rules,\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleBlock(type);\n  },\n}));\n\n/** Enables support for headings with configurable levels (from 1 to 6). */\nexport const BaseHeadingPlugin = createTSlatePlugin<HeadingConfig>({\n  key: 'heading',\n  options: {\n    levels: [1, 2, 3, 4, 5, 6],\n  },\n}).extend(({ plugin }) => {\n  const {\n    options: { levels },\n  } = plugin;\n\n  // Map of heading levels to their corresponding plugins\n  const headingPlugins = {\n    1: BaseH1Plugin,\n    2: BaseH2Plugin,\n    3: BaseH3Plugin,\n    4: BaseH4Plugin,\n    5: BaseH5Plugin,\n    6: BaseH6Plugin,\n  };\n\n  const headingLevels = Array.isArray(levels)\n    ? levels\n    : Array.from({ length: levels || 6 }, (_, i) => (i + 1) as HeadingLevel);\n\n  const plugins: SlatePlugin[] = headingLevels.map(\n    (level) => headingPlugins[level] as any\n  );\n\n  return { plugins };\n});\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseHorizontalRulePlugin } from '../lib';\n\nexport const HorizontalRulePlugin = toPlatePlugin(BaseHorizontalRulePlugin);\n","import { createSlatePlugin, KEYS } from 'platejs';\n\nexport const BaseHorizontalRulePlugin = createSlatePlugin({\n  key: KEYS.hr,\n  node: { isElement: true, isVoid: true },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          {\n            validNodeName: 'HR',\n          },\n        ],\n      },\n    },\n  },\n  render: { as: 'hr' },\n});\n","import { createSlatePlugin } from 'platejs';\n\nimport { BaseBoldPlugin } from './BaseBoldPlugin';\nimport { BaseCodePlugin } from './BaseCodePlugin';\nimport { BaseItalicPlugin } from './BaseItalicPlugin';\nimport { BaseStrikethroughPlugin } from './BaseStrikethroughPlugin';\nimport { BaseSubscriptPlugin } from './BaseSubscriptPlugin';\nimport { BaseSuperscriptPlugin } from './BaseSuperscriptPlugin';\nimport { BaseUnderlinePlugin } from './BaseUnderlinePlugin';\n\nexport const BaseBasicMarksPlugin = createSlatePlugin({\n  plugins: [\n    BaseBoldPlugin,\n    BaseCodePlugin,\n    BaseItalicPlugin,\n    BaseStrikethroughPlugin,\n    BaseSubscriptPlugin,\n    BaseSuperscriptPlugin,\n    BaseUnderlinePlugin,\n  ],\n});\n","import { createSlatePlugin, KEYS, someHtmlElement } from 'platejs';\n\n/** Enables support for bold formatting */\nexport const BaseBoldPlugin = createSlatePlugin({\n  key: KEYS.bold,\n  node: { isLeaf: true },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          { validNodeName: ['STRONG', 'B'] },\n          {\n            validStyle: {\n              fontWeight: ['600', '700', 'bold'],\n            },\n          },\n        ],\n        query: ({ element }) =>\n          !someHtmlElement(\n            element,\n            (node) => node.style.fontWeight === 'normal'\n          ),\n      },\n    },\n  },\n  render: { as: 'strong' },\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleMark(type);\n  },\n}));\n","import { createSlatePlugin, findHtmlParentElement, KEYS } from 'platejs';\n\n/** Enables support for code formatting */\nexport const BaseCodePlugin = createSlatePlugin({\n  key: KEYS.code,\n  node: { isLeaf: true },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          { validNodeName: ['CODE'] },\n          { validStyle: { fontFamily: 'Consolas' } },\n        ],\n        query({ element }) {\n          const blockAbove = findHtmlParentElement(element, 'P');\n\n          if (blockAbove?.style.fontFamily === 'Consolas') return false;\n\n          return !findHtmlParentElement(element, 'PRE');\n        },\n      },\n    },\n  },\n  render: { as: 'code' },\n  rules: { selection: { affinity: 'hard' } },\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleMark(type);\n  },\n}));\n","import { createSlatePlugin, KEYS, someHtmlElement } from 'platejs';\n\n/** Enables support for italic formatting. */\nexport const BaseItalicPlugin = createSlatePlugin({\n  key: KEYS.italic,\n  node: { isLeaf: true },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          { validNodeName: ['EM', 'I'] },\n          { validStyle: { fontStyle: 'italic' } },\n        ],\n        query: ({ element }) =>\n          !someHtmlElement(\n            element,\n            (node) => node.style.fontStyle === 'normal'\n          ),\n      },\n    },\n  },\n  render: { as: 'em' },\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleMark(type);\n  },\n}));\n","import { createSlatePlugin, KEYS, someHtmlElement } from 'platejs';\n\n/** Enables support for strikethrough formatting. */\nexport const BaseStrikethroughPlugin = createSlatePlugin({\n  key: KEYS.strikethrough,\n  node: { isLeaf: true },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          { validNodeName: ['S', 'DEL', 'STRIKE'] },\n          { validStyle: { textDecoration: 'line-through' } },\n        ],\n        query: ({ element }) =>\n          !someHtmlElement(\n            element,\n            (node) => node.style.textDecoration === 'none'\n          ),\n      },\n    },\n  },\n  render: { as: 's' },\n  rules: { selection: { affinity: 'directional' } },\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleMark(type);\n  },\n}));\n","import { createSlatePlugin, KEYS } from 'platejs';\n\n/** Enables support for subscript formatting. */\nexport const BaseSubscriptPlugin = createSlatePlugin({\n  key: KEYS.sub,\n  node: { isLeaf: true },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          { validNodeName: ['SUB'] },\n          { validStyle: { verticalAlign: 'sub' } },\n        ],\n      },\n    },\n  },\n  render: { as: 'sub' },\n  rules: { selection: { affinity: 'directional' } },\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleMark(type, {\n      remove: editor.getType(KEYS.sup),\n    });\n  },\n}));\n","import { createSlatePlugin, KEYS } from 'platejs';\n\n/** Enables support for superscript formatting. */\nexport const BaseSuperscriptPlugin = createSlatePlugin({\n  key: KEYS.sup,\n  node: { isLeaf: true },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          { validNodeName: ['SUP'] },\n          { validStyle: { verticalAlign: 'super' } },\n        ],\n      },\n    },\n  },\n  render: { as: 'sup' },\n  rules: { selection: { affinity: 'directional' } },\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleMark(type, {\n      remove: editor.getType(KEYS.sub),\n    });\n  },\n}));\n","import { createSlatePlugin, KEYS, someHtmlElement } from 'platejs';\n\n/** Enables support for underline formatting. */\nexport const BaseUnderlinePlugin = createSlatePlugin({\n  key: KEYS.underline,\n  node: { isLeaf: true },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          { validNodeName: ['U'] },\n          { validStyle: { textDecoration: ['underline'] } },\n        ],\n        query: ({ element }) =>\n          !someHtmlElement(\n            element,\n            (node) => node.style.textDecoration === 'none'\n          ),\n      },\n    },\n  },\n  render: { as: 'u' },\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleMark(type);\n  },\n}));\n","import { createSlatePlugin, KEYS } from 'platejs';\n\n/**\n * Enables support for highlights, useful when reviewing content or highlighting\n * it for future reference.\n */\nexport const BaseHighlightPlugin = createSlatePlugin({\n  key: KEYS.highlight,\n  node: { isLeaf: true },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          {\n            validNodeName: ['MARK'],\n          },\n        ],\n      },\n    },\n  },\n  render: { as: 'mark' },\n  rules: { selection: { affinity: 'directional' } },\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleMark(type);\n  },\n}));\n","import { createSlatePlugin, KEYS } from 'platejs';\n\n/** Enables support for code formatting */\nexport const BaseKbdPlugin = createSlatePlugin({\n  key: KEYS.kbd,\n  node: { isLeaf: true },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [{ validNodeName: ['KBD'] }],\n      },\n    },\n  },\n  render: { as: 'kbd' },\n  rules: { selection: { affinity: 'hard' } },\n}).extendTransforms(({ editor, type }) => ({\n  toggle: () => {\n    editor.tf.toggleMark(type);\n  },\n}));\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseBasicMarksPlugin } from '../lib/BaseBasicMarksPlugin';\nimport { BoldPlugin } from './BoldPlugin';\nimport { CodePlugin } from './CodePlugin';\nimport { ItalicPlugin } from './ItalicPlugin';\nimport { StrikethroughPlugin } from './StrikethroughPlugin';\nimport { SubscriptPlugin } from './SubscriptPlugin';\nimport { SuperscriptPlugin } from './SuperscriptPlugin';\nimport { UnderlinePlugin } from './UnderlinePlugin';\n\n/**\n * Enables support for basic marks:\n *\n * - Bold\n * - Code\n * - Italic\n * - Strikethrough\n * - Subscript\n * - Superscript\n * - Underline\n */\nexport const BasicMarksPlugin = toPlatePlugin(BaseBasicMarksPlugin, {\n  plugins: [\n    BoldPlugin,\n    CodePlugin,\n    ItalicPlugin,\n    StrikethroughPlugin,\n    SubscriptPlugin,\n    SuperscriptPlugin,\n    UnderlinePlugin,\n  ],\n});\n","import { Key, toPlatePlugin } from 'platejs/react';\n\nimport { BaseBoldPlugin } from '../lib/BaseBoldPlugin';\n\nexport const BoldPlugin = toPlatePlugin(BaseBoldPlugin, {\n  shortcuts: { toggle: { keys: [[Key.Mod, 'b']] } },\n});\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseCodePlugin } from '../lib/BaseCodePlugin';\n\nexport const CodePlugin = toPlatePlugin(BaseCodePlugin);\n","import { Key, toPlatePlugin } from 'platejs/react';\n\nimport { BaseItalicPlugin } from '../lib/BaseItalicPlugin';\n\nexport const ItalicPlugin = toPlatePlugin(BaseItalicPlugin, {\n  shortcuts: { toggle: { keys: [[Key.Mod, 'i']] } },\n});\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseStrikethroughPlugin } from '../lib/BaseStrikethroughPlugin';\n\nexport const StrikethroughPlugin = toPlatePlugin(BaseStrikethroughPlugin);\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseSubscriptPlugin } from '../lib/BaseSubscriptPlugin';\n\nexport const SubscriptPlugin = toPlatePlugin(BaseSubscriptPlugin);\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseSuperscriptPlugin } from '../lib/BaseSuperscriptPlugin';\n\nexport const SuperscriptPlugin = toPlatePlugin(BaseSuperscriptPlugin);\n","import { Key, toPlatePlugin } from 'platejs/react';\n\nimport { BaseUnderlinePlugin } from '../lib/BaseUnderlinePlugin';\n\nexport const UnderlinePlugin = toPlatePlugin(BaseUnderlinePlugin, {\n  shortcuts: { toggle: { keys: [[Key.Mod, 'u']] } },\n});\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseHighlightPlugin } from '../lib/BaseHighlightPlugin';\n\nexport const HighlightPlugin = toPlatePlugin(BaseHighlightPlugin);\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseKbdPlugin } from '../lib/BaseKbdPlugin';\n\n/** Enables support for code formatting with React-specific features */\nexport const KbdPlugin = toPlatePlugin(BaseKbdPlugin);\n"],"mappings":"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","names":["toPlatePlugin","toPlatePlugin","toPlatePlugin","createSlatePlugin","KEYS","createSlatePlugin","createSlatePlugin","KEYS","node","createSlatePlugin","KEYS","createSlatePlugin","KEYS","someHtmlElement","node","createSlatePlugin","KEYS","someHtmlElement","node","createSlatePlugin","KEYS","createSlatePlugin","KEYS","createSlatePlugin","KEYS","someHtmlElement","node","createSlatePlugin","createSlatePlugin","KEYS","createSlatePlugin","KEYS","toPlatePlugin","toPlatePlugin","toPlatePlugin","toPlatePlugin","toPlatePlugin","toPlatePlugin","Key","toPlatePlugin","toPlatePlugin","Key","toPlatePlugin","toPlatePlugin","toPlatePlugin","toPlatePlugin","toPlatePlugin","toPlatePlugin","Key","toPlatePlugin","toPlatePlugin","Key","toPlatePlugin","toPlatePlugin","toPlatePlugin","toPlatePlugin","toPlatePlugin"]}