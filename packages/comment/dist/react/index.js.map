{"version":3,"sources":["../../src/react/index.ts","../../src/react/CommentPlugin.tsx","../../src/lib/BaseCommentPlugin.ts","../../src/lib/utils/getDraftCommentKey.ts","../../src/lib/utils/isCommentKey.ts","../../src/lib/utils/getCommentCount.ts","../../src/lib/utils/getCommentKey.ts","../../src/lib/utils/getCommentKeyId.ts","../../src/lib/utils/getCommentKeys.ts","../../src/lib/utils/isCommentNodeById.ts","../../src/lib/withComments.ts","../../src/react/hooks/useCommentId.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './CommentPlugin';\nexport * from './hooks/index';\n","import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseCommentPlugin } from '../lib';\n\nexport const CommentPlugin = toPlatePlugin(BaseCommentPlugin);\n","import {\n  type EditorNodesOptions,\n  type NodeEntry,\n  type PluginConfig,\n  type SetNodesOptions,\n  type TCommentText,\n  createTSlatePlugin,\n  KEYS,\n  TextApi,\n} from 'platejs';\n\nimport {\n  getCommentCount,\n  getCommentKey,\n  getCommentKeyId,\n  getCommentKeys,\n  getDraftCommentKey,\n  isCommentKey,\n  isCommentNodeById,\n} from './utils';\nimport { withComment } from './withComments';\n\nexport type BaseCommentConfig = PluginConfig<\n  'comment',\n  {},\n  {\n    comment: {\n      has: (options: { id: string }) => boolean;\n      node: (\n        options?: EditorNodesOptions & { id?: string; isDraft?: boolean }\n      ) => NodeEntry<TCommentText> | undefined;\n      nodeId: (leaf: TCommentText) => string | undefined;\n      nodes: (\n        options?: EditorNodesOptions & { id?: string; isDraft?: boolean }\n      ) => NodeEntry<TCommentText>[];\n    };\n  },\n  {\n    comment: {\n      removeMark: () => void;\n      setDraft: (options?: SetNodesOptions) => void;\n      unsetMark: (options: { id: string }) => void;\n    };\n  }\n>;\n\nexport const BaseCommentPlugin = createTSlatePlugin<BaseCommentConfig>({\n  key: KEYS.comment,\n  node: {\n    isLeaf: true,\n  },\n  rules: { selection: { affinity: 'outward' } },\n})\n  .overrideEditor(withComment)\n  .extendApi<BaseCommentConfig['api']['comment']>(({ editor, type }) => ({\n    has: (options: { id: string }): boolean => {\n      const { id } = options;\n\n      const regex = new RegExp(`\"${getCommentKey(id)}\":true`);\n\n      // TODO perf\n      return regex.test(JSON.stringify(editor.children));\n    },\n    node: (options = {}) => {\n      const { id, isDraft, ...rest } = options;\n\n      return editor.api.node<TCommentText>({\n        ...rest,\n        match: (n) => {\n          if (isDraft) return n[type] && n[getDraftCommentKey()];\n\n          return id ? isCommentNodeById(n, id) : n[type];\n        },\n      });\n    },\n    nodeId: (leaf) => {\n      const ids: string[] = [];\n      const keys = Object.keys(leaf);\n\n      if (keys.includes(getDraftCommentKey())) return;\n\n      keys.forEach((key) => {\n        if (!isCommentKey(key) || key === getDraftCommentKey()) return;\n\n        // block the resolved id\n\n        const id = getCommentKeyId(key);\n        ids.push(id);\n      });\n\n      return ids.at(-1);\n    },\n    nodes: (options = {}) => {\n      const { id, isDraft, ...rest } = options;\n\n      return [\n        ...editor.api.nodes<TCommentText>({\n          ...rest,\n          match: (n) => {\n            if (isDraft) return n[type] && n[getDraftCommentKey()];\n            return id ? isCommentNodeById(n, id) : n[type];\n          },\n        }),\n      ];\n    },\n  }))\n  .extendTransforms<BaseCommentConfig['transforms']['comment']>(\n    ({ api, editor, tf, type }) => ({\n      removeMark: () => {\n        const nodeEntry = api.comment.node();\n\n        if (!nodeEntry) return;\n\n        const keys = getCommentKeys(nodeEntry[0]);\n\n        editor.tf.withoutNormalizing(() => {\n          keys.forEach((key) => {\n            editor.tf.removeMark(key);\n          });\n\n          editor.tf.removeMark(KEYS.comment);\n        });\n      },\n      setDraft: (options = {}) => {\n        tf.setNodes(\n          {\n            [getDraftCommentKey()]: true,\n            [type]: true,\n          },\n          { match: TextApi.isText, split: true, ...options }\n        );\n      },\n      unsetMark: (options) => {\n        const { id } = options;\n\n        const nodes = api.comment.nodes({ id, at: [] });\n\n        if (!nodes) return;\n\n        nodes.forEach(([node]) => {\n          const isOverlapping = getCommentCount(node) > 1;\n\n          let unsetKeys: string[] = [];\n\n          if (isOverlapping) {\n            unsetKeys = [getDraftCommentKey(), getCommentKey(id)];\n          } else {\n            unsetKeys = [KEYS.comment, getDraftCommentKey(), getCommentKey(id)];\n          }\n\n          editor.tf.unsetNodes<TCommentText>(unsetKeys, {\n            at: [],\n            match: (n) => n === node,\n          });\n        });\n      },\n    })\n  );\n","import { KEYS } from 'platejs';\n\nexport const getDraftCommentKey = () => `${KEYS.comment}_draft`;\n","import { KEYS } from 'platejs';\n\nexport const isCommentKey = (key: string) => key.startsWith(`${KEYS.comment}_`);\n","import type { TCommentText } from 'platejs';\n\nimport { getDraftCommentKey } from './getDraftCommentKey';\nimport { isCommentKey } from './isCommentKey';\n\nexport const getCommentCount = (node: TCommentText) => {\n  let commentCount = 0;\n  Object.keys(node).forEach((key) => {\n    if (isCommentKey(key) && key !== getDraftCommentKey()) commentCount++;\n  });\n\n  return commentCount;\n};\n","import { KEYS } from 'platejs';\n\nexport const getCommentKey = (id: string) => `${KEYS.comment}_${id}`;\n","import { KEYS } from 'platejs';\n\nexport const getCommentKeyId = (key: string) =>\n  key.replace(`${KEYS.comment}_`, '');\n","import type { TCommentText } from 'platejs';\n\nimport { isCommentKey } from './isCommentKey';\n\nexport const getCommentKeys = (node: TCommentText) => {\n  const keys: string[] = [];\n\n  Object.keys(node).forEach((key) => {\n    if (isCommentKey(key)) keys.push(key);\n  });\n\n  return keys;\n};\n","import type { TNode } from 'platejs';\n\nimport { getCommentKey } from './getCommentKey';\n\n/** Whether the node has a comment id. */\nexport const isCommentNodeById = (node: TNode, id: string) =>\n  !!node[getCommentKey(id)];\n","import type { OverrideEditor, TCommentText } from 'platejs';\n\nimport { KEYS } from 'platejs';\n\nimport type { BaseCommentConfig } from './BaseCommentPlugin';\n\nimport { getCommentCount, getDraftCommentKey } from './utils';\n\nexport const withComment: OverrideEditor<BaseCommentConfig> = ({\n  editor,\n  tf: { normalizeNode },\n}) => ({\n  transforms: {\n    normalizeNode(entry) {\n      const [node, path] = entry;\n\n      if (\n        node[KEYS.comment] &&\n        !node[getDraftCommentKey()] &&\n        getCommentCount(node as TCommentText) < 1\n      ) {\n        editor.tf.unsetNodes(KEYS.comment, { at: path });\n\n        return;\n      }\n\n      return normalizeNode(entry);\n    },\n  },\n});\n","import { useEditorSelector } from 'platejs/react';\n\nimport { BaseCommentPlugin } from '../../lib';\n\nexport const useCommentId = () => {\n  return useEditorSelector((editor) => {\n    if (!editor.selection) return;\n    if (editor.api.isExpanded()) return;\n    const api = editor.getApi(BaseCommentPlugin);\n\n    const commentNode = api.comment.node();\n\n    if (!commentNode) return;\n\n    const [commentLeaf] = commentNode;\n\n    return api.comment.nodeId(commentLeaf);\n  }, []);\n};\n"],"mappings":"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","names":["import_platejs","import_platejs","import_platejs","import_platejs","import_platejs","import_react"]}