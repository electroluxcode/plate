{"version":3,"sources":["../src/index.ts","../src/lib/CsvPlugin.ts","../src/lib/deserializer/utils/deserializeCsv.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './lib/index';\n","import type { ParseConfig } from 'papaparse';\nimport type { OmitFirst, PluginConfig } from 'platejs';\n\nimport { bindFirst, createTSlatePlugin, KEYS } from 'platejs';\n\nimport { deserializeCsv } from './deserializer/utils';\n\nexport type CsvConfig = PluginConfig<\n  'csv',\n  {\n    /**\n     * Percentage in decimal form, from 0 to a very large number, 0 for no\n     * errors allowed, Percentage based on number of errors compared to number\n     * of rows\n     *\n     * @default 0.25\n     */\n    errorTolerance?: number;\n    /**\n     * Options to pass to papaparse\n     *\n     * @default { header: true }\n     * @see https://www.papaparse.com/docs#config\n     */\n    parseOptions?: CsvParseOptions;\n  },\n  {\n    csv: {\n      deserialize: OmitFirst<typeof deserializeCsv>;\n    };\n  }\n>;\n\nexport type CsvParseOptions = ParseConfig;\n\n/** Enables support for deserializing content from CSV format to Slate format. */\nexport const CsvPlugin = createTSlatePlugin<CsvConfig>({\n  key: KEYS.csv,\n  options: {\n    errorTolerance: 0.25,\n    parseOptions: {\n      header: true,\n    },\n  },\n})\n  .extendApi(({ editor }) => ({\n    deserialize: bindFirst(deserializeCsv, editor),\n  }))\n  .extend(({ api }) => ({\n    parser: {\n      format: 'text/plain',\n      deserialize: ({ data }) => api.csv.deserialize({ data }),\n    },\n  }));\n","import type { Descendant, SlateEditor, TElement, TNode } from 'platejs';\n\nimport papaparse from 'papaparse';\nimport { KEYS } from 'platejs';\n\nimport { type CsvParseOptions, CsvPlugin } from '../../CsvPlugin';\n\nconst { parse } = papaparse;\n\nconst isValidCsv = (\n  data: Record<string, string>[][],\n  errors: Record<string, string>[][],\n  errorTolerance: number\n) => {\n  if (errorTolerance < 0) errorTolerance = 0;\n\n  return !(\n    !data ||\n    data.length < 2 ||\n    data[0].length < 2 ||\n    data[1].length < 2 ||\n    (errors.length > 0 && errors.length > errorTolerance * data.length)\n  );\n};\n\nexport const deserializeCsv = (\n  editor: SlateEditor,\n  {\n    data,\n    ...parseOptions\n  }: {\n    data: string;\n  } & CsvParseOptions\n): Descendant[] | undefined => {\n  const { errorTolerance, parseOptions: pluginParseOptions } =\n    editor.getOptions(CsvPlugin);\n\n  // Verify it's a csv string\n  const testCsv = parse(data, { preview: 2 });\n\n  if (testCsv.errors.length === 0) {\n    const csv = parse(data, {\n      ...pluginParseOptions,\n      ...parseOptions,\n    });\n\n    if (\n      !isValidCsv(\n        csv.data as Record<string, string>[][],\n        csv.errors as unknown as Record<string, string>[][],\n        errorTolerance!\n      )\n    )\n      return;\n\n    const paragraph = editor.getType(KEYS.p);\n    const table = editor.getType(KEYS.table);\n    const th = editor.getType(KEYS.th);\n    const tr = editor.getType(KEYS.tr);\n    const td = editor.getType(KEYS.td);\n\n    const ast: TNode = {\n      children: [],\n      type: table,\n    };\n\n    if (csv.meta.fields) {\n      // csv file has headers, data structure is an array of objects keyed on the heading title\n      ast.children.push({\n        children: csv.meta.fields.map((field: string) => ({\n          children: [{ children: [{ text: field }], type: paragraph }],\n          type: th,\n        })),\n        type: tr,\n      });\n\n      for (const row of csv.data as Record<string, string>[]) {\n        ast.children.push({\n          children: csv.meta.fields.map((field: string) => ({\n            children: [\n              { children: [{ text: row[field] || '' }], type: paragraph },\n            ],\n            type: td,\n          })),\n          type: tr,\n        });\n      }\n    } else {\n      // csv is an array of arrays\n      for (const row of csv.data as [string[]]) {\n        ast.children.push({\n          children: [],\n          type: tr,\n        });\n\n        for (const cell of row) {\n          (ast.children.at(-1) as TElement).children.push({\n            children: [{ children: [{ text: cell }], type: paragraph }],\n            type: td,\n          });\n        }\n      }\n    }\n\n    return [\n      {\n        children: [{ text: '' }],\n        type: paragraph,\n      },\n      ast,\n      {\n        children: [{ text: '' }],\n        type: paragraph,\n      },\n    ];\n  }\n};\n"],"mappings":"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","names":["import_platejs","papaparse"]}