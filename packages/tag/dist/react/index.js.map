{"version":3,"sources":["../../src/react/index.ts","../../src/react/TagPlugin.tsx","../../src/lib/BaseTagPlugin.ts","../../src/react/useSelectEditorCombobox.ts","../../src/react/useSelectedItems.ts","../../src/react/useSelectableItems.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './TagPlugin';\nexport * from './useSelectEditorCombobox';\nexport * from './useSelectableItems';\nexport * from './useSelectedItems';\n","import { type TText, PathApi, TextApi } from 'platejs';\nimport { toPlatePlugin } from 'platejs/react';\n\nimport { BaseTagPlugin } from '../lib';\n\nexport const TagPlugin = toPlatePlugin(BaseTagPlugin);\n\nexport const MultiSelectPlugin = toPlatePlugin(\n  BaseTagPlugin.overrideEditor(\n    ({\n      api: { onChange },\n      editor,\n      tf: { deleteBackward, normalizeNode },\n      type,\n    }) => ({\n      api: {\n        onChange(op) {\n          onChange(op);\n\n          const someTag = editor.api.some({\n            match: { type },\n          });\n\n          if (someTag || !editor.selection) {\n            // Remove non-empty texts when selecting a tag or when no selection\n            editor.tf.removeNodes({\n              at: [],\n              empty: false,\n              text: true,\n            });\n          } else {\n            const texts = new Set(\n              Array.from(\n                editor.api.nodes<TText>({\n                  text: true,\n                })\n              ).map(([text]) => text)\n            );\n\n            // Remove text not in selection\n            editor.tf.removeNodes({\n              at: [],\n              empty: false,\n              text: true,\n              match: (text: TText) => !texts.has(text),\n            });\n          }\n        },\n      },\n      transforms: {\n        deleteBackward(unit) {\n          deleteBackward(unit);\n\n          if (\n            editor.api.some({\n              match: (n) => n.type === type,\n            })\n          ) {\n            editor.tf.move();\n          }\n        },\n\n        normalizeNode([node, path]) {\n          // Duplicate tag removal\n          if (\n            node.type === type &&\n            editor.api.some({\n              at: [],\n              match: (n, p) =>\n                n.type === type &&\n                n.value === node.value &&\n                !PathApi.equals(p, path),\n            })\n          ) {\n            editor.tf.removeNodes({\n              at: path,\n            });\n\n            return;\n          }\n          // Trim leading whitespace\n          if (TextApi.isText(node) && node.text) {\n            const trimmedText = node.text.trimStart();\n\n            if (trimmedText !== node.text) {\n              editor.tf.replaceNodes(\n                { text: trimmedText },\n                {\n                  at: path,\n                  select: true,\n                }\n              );\n\n              return;\n            }\n          }\n\n          normalizeNode([node, path]);\n        },\n      },\n    })\n  )\n);\n","import {\n  type InsertNodesOptions,\n  type TTagProps,\n  createSlatePlugin,\n  KEYS,\n} from 'platejs';\n\nexport const BaseTagPlugin = createSlatePlugin({\n  key: KEYS.tag,\n  node: {\n    isElement: true,\n    isInline: true,\n    isVoid: true,\n  },\n}).extendEditorTransforms(({ editor, type }) => ({\n  insert: {\n    tag: (props: TTagProps, options?: InsertNodesOptions) => {\n      editor.tf.insertNodes(\n        [\n          {\n            children: [{ text: '' }],\n            type,\n            ...props,\n          },\n          { text: '' },\n        ],\n        options\n      );\n    },\n  },\n}));\n","import React from 'react';\n\nimport { type TTagProps, isDefined } from 'platejs';\nimport { useEditorRef, useEditorString } from 'platejs/react';\n\nimport { useSelectedItems } from './useSelectedItems';\n\n/**\n * - Select first item when search updates and remove text\n * - Select end of editor when combobox closes\n */\nexport const useSelectEditorCombobox = ({\n  open,\n  selectFirstItem,\n  onValueChange,\n}: {\n  open: boolean;\n  selectFirstItem: () => void;\n  onValueChange?: (items: TTagProps[]) => void;\n}) => {\n  const editor = useEditorRef();\n  const search = useEditorString();\n\n  // Remove text and select end of editor when combobox closes\n  React.useEffect(() => {\n    if (!open) {\n      editor.tf.removeNodes({ at: [], empty: false, text: true });\n      editor.tf.select([], { edge: 'end' });\n    }\n  }, [editor, open]);\n\n  // Select first item when search updates\n  React.useEffect(() => {\n    if (isDefined(search)) {\n      selectFirstItem();\n    }\n  }, [search, selectFirstItem]);\n\n  const selectedItems = useSelectedItems();\n\n  React.useEffect(() => {\n    onValueChange?.(selectedItems);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItems]);\n};\n","import { type SlateEditor, type TTagElement, KEYS } from 'platejs';\nimport { useEditorSelector } from 'platejs/react';\n\nexport const getSelectedItems = (editor: SlateEditor) => {\n  const options = editor.api.nodes<TTagElement>({\n    at: [],\n    match: { type: KEYS.tag },\n  });\n\n  return [...options].map(([{ children, type, ...option }]) => ({\n    ...option,\n  }));\n};\n\nexport const useSelectedItems = () => {\n  const selectedItems = useEditorSelector(\n    (editor) => getSelectedItems(editor),\n    [],\n    {\n      equalityFn: (prev, next) => {\n        if (prev.length !== next.length) return false;\n\n        return prev.every((item, index) => item.value === next[index].value);\n      },\n    }\n  );\n\n  return selectedItems;\n};\n","import { useMemo } from 'react';\n\nimport { useEditorString } from 'platejs/react';\n\nimport { useSelectedItems } from './useSelectedItems';\n\ntype Filter = (value: string, search: string) => boolean;\ntype NewItemFilter = (search: string) => boolean;\n\nconst defaultFilter: Filter = (value, search) =>\n  value.toLowerCase().includes(search.toLowerCase());\n\nconst defaultNewItemFilter: NewItemFilter = (search: string) => {\n  const trimmed = search.trim();\n\n  return trimmed.length >= 2;\n};\n\nexport const useSelectableItems = <\n  T extends { value: string; isNew?: boolean },\n>({\n  allowNew = true,\n  filter = defaultFilter,\n  items = [],\n  newItemFilter = defaultNewItemFilter,\n  newItemPosition = 'end',\n}: {\n  allowNew?: boolean;\n  filter?: Filter;\n  items?: T[];\n  newItemFilter?: NewItemFilter;\n  newItemPosition?: 'end' | 'start';\n}) => {\n  const selectedItems = useSelectedItems();\n  const search = useEditorString();\n\n  return useMemo(() => {\n    const uniqueItems = Array.from(new Set(items));\n    const trimmedSearch = search?.trim().replaceAll(/\\s+/g, ' ') || '';\n\n    const searchItem =\n      allowNew &&\n      trimmedSearch &&\n      newItemFilter(trimmedSearch) &&\n      !uniqueItems.some(\n        (item) => item.value.toLowerCase() === trimmedSearch.toLowerCase()\n      )\n        ? [{ isNew: true, value: trimmedSearch } as T]\n        : [];\n\n    const orderedItems =\n      newItemPosition === 'start'\n        ? [...searchItem, ...uniqueItems]\n        : [...uniqueItems, ...searchItem];\n\n    const availableItems = orderedItems.filter(\n      (item) =>\n        !selectedItems.some(\n          (s) => s.value.toLowerCase() === item.value.toLowerCase()\n        )\n    );\n\n    if (!trimmedSearch) return availableItems;\n\n    return availableItems.filter((item) => filter(item.value, trimmedSearch));\n  }, [\n    items,\n    selectedItems,\n    search,\n    filter,\n    allowNew,\n    newItemPosition,\n    newItemFilter,\n  ]);\n};\n"],"mappings":"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","names":["import_platejs","import_react","import_platejs","import_platejs","import_react","React","import_react"]}