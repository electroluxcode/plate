{"version":3,"sources":["../src/lib/BaseTagPlugin.ts","../src/lib/isEqualTags.ts"],"sourcesContent":["import {\n  type InsertNodesOptions,\n  type TTagProps,\n  createSlatePlugin,\n  KEYS,\n} from 'platejs';\n\nexport const BaseTagPlugin = createSlatePlugin({\n  key: KEYS.tag,\n  node: {\n    isElement: true,\n    isInline: true,\n    isVoid: true,\n  },\n}).extendEditorTransforms(({ editor, type }) => ({\n  insert: {\n    tag: (props: TTagProps, options?: InsertNodesOptions) => {\n      editor.tf.insertNodes(\n        [\n          {\n            children: [{ text: '' }],\n            type,\n            ...props,\n          },\n          { text: '' },\n        ],\n        options\n      );\n    },\n  },\n}));\n","import {\n  type SlateEditor,\n  type TTagElement,\n  type TTagProps,\n  KEYS,\n} from 'platejs';\n\n/**\n * Compares two sets of tags/labels for equality, ignoring order\n *\n * @param currentTags Current set of tags in the editor\n * @param newTags New set of tags to compare against\n * @returns Boolean indicating if the sets contain the same values\n */\nexport function isEqualTags<T extends TTagProps>(\n  editor: SlateEditor,\n  newTags?: T[]\n): boolean {\n  const currentTags = [\n    ...editor.api.nodes<TTagElement>({\n      at: [],\n      match: { type: KEYS.tag },\n    }),\n  ].map(([node]) => node);\n\n  const current = currentTags.reduce(\n    (acc, tag) => {\n      acc[tag.value] = true;\n\n      return acc;\n    },\n    {} as Record<string, boolean>\n  );\n\n  const next = (newTags ?? []).reduce(\n    (acc, tag) => {\n      acc[tag.value] = true;\n\n      return acc;\n    },\n    {} as Record<string, boolean>\n  );\n\n  return (\n    Object.keys(current).length === Object.keys(next).length &&\n    Object.keys(current).every((key) => next[key])\n  );\n}\n"],"mappings":";AAAA;AAAA,EAGE;AAAA,EACA;AAAA,OACK;AAEA,IAAM,gBAAgB,kBAAkB;AAAA,EAC7C,KAAK,KAAK;AAAA,EACV,MAAM;AAAA,IACJ,WAAW;AAAA,IACX,UAAU;AAAA,IACV,QAAQ;AAAA,EACV;AACF,CAAC,EAAE,uBAAuB,CAAC,EAAE,QAAQ,KAAK,OAAO;AAAA,EAC/C,QAAQ;AAAA,IACN,KAAK,CAAC,OAAkB,YAAiC;AACvD,aAAO,GAAG;AAAA,QACR;AAAA,UACE;AAAA,YACE,UAAU,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,YACvB;AAAA,YACA,GAAG;AAAA,UACL;AAAA,UACA,EAAE,MAAM,GAAG;AAAA,QACb;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,EAAE;;;AC9BF;AAAA,EAIE,QAAAA;AAAA,OACK;AASA,SAAS,YACd,QACA,SACS;AACT,QAAM,cAAc;AAAA,IAClB,GAAG,OAAO,IAAI,MAAmB;AAAA,MAC/B,IAAI,CAAC;AAAA,MACL,OAAO,EAAE,MAAMA,MAAK,IAAI;AAAA,IAC1B,CAAC;AAAA,EACH,EAAE,IAAI,CAAC,CAAC,IAAI,MAAM,IAAI;AAEtB,QAAM,UAAU,YAAY;AAAA,IAC1B,CAAC,KAAK,QAAQ;AACZ,UAAI,IAAI,KAAK,IAAI;AAEjB,aAAO;AAAA,IACT;AAAA,IACA,CAAC;AAAA,EACH;AAEA,QAAM,QAAQ,WAAW,CAAC,GAAG;AAAA,IAC3B,CAAC,KAAK,QAAQ;AACZ,UAAI,IAAI,KAAK,IAAI;AAEjB,aAAO;AAAA,IACT;AAAA,IACA,CAAC;AAAA,EACH;AAEA,SACE,OAAO,KAAK,OAAO,EAAE,WAAW,OAAO,KAAK,IAAI,EAAE,UAClD,OAAO,KAAK,OAAO,EAAE,MAAM,CAAC,QAAQ,KAAK,GAAG,CAAC;AAEjD;","names":["KEYS"]}