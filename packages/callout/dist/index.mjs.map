{"version":3,"sources":["../src/lib/BaseCalloutPlugin.ts","../src/lib/transforms/insertCallout.ts"],"sourcesContent":["import { bindFirst, createSlatePlugin, KEYS } from 'platejs';\n\nimport { insertCallout } from './transforms';\n\nexport const BaseCalloutPlugin = createSlatePlugin({\n  key: KEYS.callout,\n  node: {\n    isElement: true,\n  },\n  rules: {\n    break: {\n      default: 'lineBreak',\n      empty: 'reset',\n      emptyLineEnd: 'deleteExit',\n    },\n    delete: {\n      start: 'reset',\n    },\n  },\n}).extendEditorTransforms(({ editor }) => ({\n  insert: { callout: bindFirst(insertCallout, editor) },\n}));\n","import type { InsertNodesOptions, SlateEditor, TCalloutElement } from 'platejs';\n\nimport { KEYS } from 'platejs';\n\nexport const CALLOUT_STORAGE_KEY = `plate-storage-callout`;\n\nexport const insertCallout = (\n  editor: SlateEditor,\n  {\n    icon,\n    variant,\n    ...options\n  }: InsertNodesOptions & {\n    icon?: string;\n    variant?: (string & {}) | TCalloutElement['variant'];\n  } = {}\n) => {\n  editor.tf.insertNodes<TCalloutElement>(\n    {\n      children: [{ text: '' }],\n      icon: icon ?? localStorage.getItem(CALLOUT_STORAGE_KEY) ?? 'ðŸ’¡',\n      type: editor.getType(KEYS.callout),\n      variant,\n    },\n    options as any\n  );\n};\n"],"mappings":";AAAA,SAAS,WAAW,mBAAmB,QAAAA,aAAY;;;ACEnD,SAAS,YAAY;AAEd,IAAM,sBAAsB;AAE5B,IAAM,gBAAgB,CAC3B,QACA;AAAA,EACE;AAAA,EACA;AAAA,EACA,GAAG;AACL,IAGI,CAAC,MACF;AACH,SAAO,GAAG;AAAA,IACR;AAAA,MACE,UAAU,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,MACvB,MAAM,QAAQ,aAAa,QAAQ,mBAAmB,KAAK;AAAA,MAC3D,MAAM,OAAO,QAAQ,KAAK,OAAO;AAAA,MACjC;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;;;ADtBO,IAAM,oBAAoB,kBAAkB;AAAA,EACjD,KAAKC,MAAK;AAAA,EACV,MAAM;AAAA,IACJ,WAAW;AAAA,EACb;AAAA,EACA,OAAO;AAAA,IACL,OAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO;AAAA,MACP,cAAc;AAAA,IAChB;AAAA,IACA,QAAQ;AAAA,MACN,OAAO;AAAA,IACT;AAAA,EACF;AACF,CAAC,EAAE,uBAAuB,CAAC,EAAE,OAAO,OAAO;AAAA,EACzC,QAAQ,EAAE,SAAS,UAAU,eAAe,MAAM,EAAE;AACtD,EAAE;","names":["KEYS","KEYS"]}