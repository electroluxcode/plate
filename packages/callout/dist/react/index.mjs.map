{"version":3,"sources":["../../src/react/CalloutPlugin.tsx","../../src/lib/BaseCalloutPlugin.ts","../../src/lib/transforms/insertCallout.ts","../../src/react/hooks/useCalloutEmojiPicker.ts"],"sourcesContent":["import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseCalloutPlugin } from '../lib';\n\nexport const CalloutPlugin = toPlatePlugin(BaseCalloutPlugin);\n","import { bindFirst, createSlatePlugin, KEYS } from 'platejs';\n\nimport { insertCallout } from './transforms';\n\nexport const BaseCalloutPlugin = createSlatePlugin({\n  key: KEYS.callout,\n  node: {\n    isElement: true,\n  },\n  rules: {\n    break: {\n      default: 'lineBreak',\n      empty: 'reset',\n      emptyLineEnd: 'deleteExit',\n    },\n    delete: {\n      start: 'reset',\n    },\n  },\n}).extendEditorTransforms(({ editor }) => ({\n  insert: { callout: bindFirst(insertCallout, editor) },\n}));\n","import type { InsertNodesOptions, SlateEditor, TCalloutElement } from 'platejs';\n\nimport { KEYS } from 'platejs';\n\nexport const CALLOUT_STORAGE_KEY = `plate-storage-callout`;\n\nexport const insertCallout = (\n  editor: SlateEditor,\n  {\n    icon,\n    variant,\n    ...options\n  }: InsertNodesOptions & {\n    icon?: string;\n    variant?: (string & {}) | TCalloutElement['variant'];\n  } = {}\n) => {\n  editor.tf.insertNodes<TCalloutElement>(\n    {\n      children: [{ text: '' }],\n      icon: icon ?? localStorage.getItem(CALLOUT_STORAGE_KEY) ?? 'ðŸ’¡',\n      type: editor.getType(KEYS.callout),\n      variant,\n    },\n    options as any\n  );\n};\n","import type { TCalloutElement } from 'platejs';\n\nimport { useEditorReadOnly, useEditorRef, useElement } from 'platejs/react';\n\nimport { CALLOUT_STORAGE_KEY } from '../../lib';\n\nexport interface UseCalloutEmojiPickerOptions {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n}\n\nexport const useCalloutEmojiPicker = ({\n  isOpen,\n  setIsOpen,\n}: UseCalloutEmojiPickerOptions) => {\n  const editor = useEditorRef();\n  const readOnly = useEditorReadOnly();\n  const element = useElement<TCalloutElement>();\n\n  return {\n    emojiToolbarDropdownProps: {\n      isOpen,\n      setIsOpen: (v: boolean) => {\n        if (readOnly) return;\n\n        setIsOpen(v);\n      },\n    },\n    props: {\n      isOpen,\n      setIsOpen,\n      onSelectEmoji: (emojiValue: any) => {\n        const icon = emojiValue.skins?.[0]?.native ?? emojiValue.icon;\n\n        editor.tf.setNodes<TCalloutElement>(\n          {\n            icon,\n          },\n          { at: element }\n        );\n\n        localStorage.setItem(CALLOUT_STORAGE_KEY, icon);\n        setIsOpen(false);\n      },\n    },\n  };\n};\n"],"mappings":";AAAA,SAAS,qBAAqB;;;ACA9B,SAAS,WAAW,mBAAmB,QAAAA,aAAY;;;ACEnD,SAAS,YAAY;AAEd,IAAM,sBAAsB;AAE5B,IAAM,gBAAgB,CAC3B,QACA;AAAA,EACE;AAAA,EACA;AAAA,EACA,GAAG;AACL,IAGI,CAAC,MACF;AACH,SAAO,GAAG;AAAA,IACR;AAAA,MACE,UAAU,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,MACvB,MAAM,QAAQ,aAAa,QAAQ,mBAAmB,KAAK;AAAA,MAC3D,MAAM,OAAO,QAAQ,KAAK,OAAO;AAAA,MACjC;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF;;;ADtBO,IAAM,oBAAoB,kBAAkB;AAAA,EACjD,KAAKC,MAAK;AAAA,EACV,MAAM;AAAA,IACJ,WAAW;AAAA,EACb;AAAA,EACA,OAAO;AAAA,IACL,OAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO;AAAA,MACP,cAAc;AAAA,IAChB;AAAA,IACA,QAAQ;AAAA,MACN,OAAO;AAAA,IACT;AAAA,EACF;AACF,CAAC,EAAE,uBAAuB,CAAC,EAAE,OAAO,OAAO;AAAA,EACzC,QAAQ,EAAE,SAAS,UAAU,eAAe,MAAM,EAAE;AACtD,EAAE;;;ADjBK,IAAM,gBAAgB,cAAc,iBAAiB;;;AGF5D,SAAS,mBAAmB,cAAc,kBAAkB;AASrD,IAAM,wBAAwB,CAAC;AAAA,EACpC;AAAA,EACA;AACF,MAAoC;AAClC,QAAM,SAAS,aAAa;AAC5B,QAAM,WAAW,kBAAkB;AACnC,QAAM,UAAU,WAA4B;AAE5C,SAAO;AAAA,IACL,2BAA2B;AAAA,MACzB;AAAA,MACA,WAAW,CAAC,MAAe;AACzB,YAAI,SAAU;AAEd,kBAAU,CAAC;AAAA,MACb;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,eAAe,CAAC,eAAoB;AAClC,cAAM,OAAO,WAAW,QAAQ,CAAC,GAAG,UAAU,WAAW;AAEzD,eAAO,GAAG;AAAA,UACR;AAAA,YACE;AAAA,UACF;AAAA,UACA,EAAE,IAAI,QAAQ;AAAA,QAChB;AAEA,qBAAa,QAAQ,qBAAqB,IAAI;AAC9C,kBAAU,KAAK;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AACF;","names":["KEYS","KEYS"]}