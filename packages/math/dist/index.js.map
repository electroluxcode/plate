{"version":3,"sources":["../src/index.ts","../src/lib/BaseEquationPlugin.ts","../src/lib/transforms/insertEquation.ts","../src/lib/transforms/insertInlineEquation.ts","../src/lib/BaseInlineEquationPlugin.ts","../src/lib/utils/getEquationHtml.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './lib/index';\n","import { bindFirst, createSlatePlugin, KEYS } from 'platejs';\n\nimport { insertEquation } from './transforms';\n\nimport 'katex/dist/katex.min.css';\n\nexport const BaseEquationPlugin = createSlatePlugin({\n  key: KEYS.equation,\n  node: { isElement: true, isVoid: true },\n}).extendEditorTransforms(({ editor }) => ({\n  insert: {\n    equation: bindFirst(insertEquation, editor),\n  },\n}));\n","import type {\n  InsertNodesOptions,\n  SlateEditor,\n  TEquationElement,\n} from 'platejs';\n\nimport { KEYS } from 'platejs';\n\nexport const insertEquation = (\n  editor: SlateEditor,\n  options?: InsertNodesOptions\n) => {\n  editor.tf.insertNodes<TEquationElement>(\n    {\n      children: [{ text: '' }],\n      texExpression: '',\n      type: editor.getType(KEYS.equation),\n    },\n    options as any\n  );\n};\n","import type {\n  InsertNodesOptions,\n  SlateEditor,\n  TEquationElement,\n} from 'platejs';\n\nimport { KEYS } from 'platejs';\n\nexport const insertInlineEquation = (\n  editor: SlateEditor,\n  texExpression?: string,\n  options?: InsertNodesOptions\n) => {\n  editor.tf.insertNodes<TEquationElement>(\n    {\n      children: [{ text: '' }],\n      texExpression: texExpression ?? editor.api.string(editor.selection),\n      type: editor.getType(KEYS.inlineEquation),\n    },\n    options as any\n  );\n};\n","import { bindFirst, createSlatePlugin, KEYS } from 'platejs';\n\nimport { insertInlineEquation } from './transforms';\n\nexport const BaseInlineEquationPlugin = createSlatePlugin({\n  key: KEYS.inlineEquation,\n  node: { isElement: true, isInline: true, isVoid: true },\n}).extendEditorTransforms(({ editor }) => ({\n  insert: {\n    inlineEquation: bindFirst(insertInlineEquation, editor),\n  },\n}));\n","import type { TEquationElement } from 'platejs';\n\nimport katex, { type KatexOptions } from 'katex';\n\nexport const getEquationHtml = ({\n  element,\n  options,\n}: {\n  element: TEquationElement;\n  options?: KatexOptions;\n}) => katex.renderToString(element.texExpression, options);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,kBAAmD;;;ACMnD,qBAAqB;AAEd,IAAM,iBAAiB,CAC5B,QACA,YACG;AACH,SAAO,GAAG;AAAA,IACR;AAAA,MACE,UAAU,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,MACvB,eAAe;AAAA,MACf,MAAM,OAAO,QAAQ,oBAAK,QAAQ;AAAA,IACpC;AAAA,IACA;AAAA,EACF;AACF;;;ACdA,IAAAC,kBAAqB;AAEd,IAAM,uBAAuB,CAClC,QACA,eACA,YACG;AACH,SAAO,GAAG;AAAA,IACR;AAAA,MACE,UAAU,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,MACvB,eAAe,iBAAiB,OAAO,IAAI,OAAO,OAAO,SAAS;AAAA,MAClE,MAAM,OAAO,QAAQ,qBAAK,cAAc;AAAA,IAC1C;AAAA,IACA;AAAA,EACF;AACF;;;AFjBA,uBAAO;AAEA,IAAM,yBAAqB,mCAAkB;AAAA,EAClD,KAAK,qBAAK;AAAA,EACV,MAAM,EAAE,WAAW,MAAM,QAAQ,KAAK;AACxC,CAAC,EAAE,uBAAuB,CAAC,EAAE,OAAO,OAAO;AAAA,EACzC,QAAQ;AAAA,IACN,cAAU,2BAAU,gBAAgB,MAAM;AAAA,EAC5C;AACF,EAAE;;;AGbF,IAAAC,kBAAmD;AAI5C,IAAM,+BAA2B,mCAAkB;AAAA,EACxD,KAAK,qBAAK;AAAA,EACV,MAAM,EAAE,WAAW,MAAM,UAAU,MAAM,QAAQ,KAAK;AACxD,CAAC,EAAE,uBAAuB,CAAC,EAAE,OAAO,OAAO;AAAA,EACzC,QAAQ;AAAA,IACN,oBAAgB,2BAAU,sBAAsB,MAAM;AAAA,EACxD;AACF,EAAE;;;ACTF,mBAAyC;AAElC,IAAM,kBAAkB,CAAC;AAAA,EAC9B;AAAA,EACA;AACF,MAGM,aAAAC,QAAM,eAAe,QAAQ,eAAe,OAAO;","names":["import_platejs","import_platejs","import_platejs","katex"]}