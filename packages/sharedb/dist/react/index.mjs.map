{"version":3,"sources":["../../src/react/ShareDBPlugin.ts","../../src/lib/BaseOtPlugin.ts","../../src/lib/util.ts","../../src/lib/withPlateOt.ts"],"sourcesContent":["import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseOtPlugin } from '../lib/BaseOtPlugin';\n\n/** \n * 启用 ShareDB 实时协作编辑支持的 sharedb 插件 \n */\nexport const ShareDBPlugin = toPlatePlugin(BaseOtPlugin); ","import type { Operation } from 'slate';\n\nimport {\n  createTSlatePlugin,\n} from 'platejs';\nimport { Transforms } from \"slate\"\n\nimport type { OtConfig, OtInitOptions, OtOptions, OtStatus } from './types';\n\nimport { castArray } from './util';\nimport { withPlateOt } from './withPlateOt';\n\nexport const BaseOtPlugin = createTSlatePlugin<OtConfig>({\n  key: 'sharedb',\n  priority: 1000, // 设置较低优先级，确保在 NodeId 插件之后加载\n  extendEditor: withPlateOt,\n  options: {\n    _connection: null,\n    _doc: null,\n    _operationQueue: [],\n    _presence: null,\n    _processingQueue: false,\n    _socket: null,\n    _status: 'disconnected' as OtStatus,\n    debug: false,\n    enablePresence: false,\n  } as unknown as OtOptions & {\n    _connection: any;\n    _doc: any;\n    _operationQueue: (() => Promise<void> | void)[];\n    _presence: any;\n    _processingQueue: boolean;\n    _socket: any;\n    _status: OtStatus;\n  },\n}).extendApi((ctx) => ({\n  /**\n   * 应用远程操作\n   */\n  applyRemoteOperation: (operations: Operation[]) => {\n    const { editor, getOptions } = ctx;\n    const options = getOptions();\n    \n    try {\n      // 使用专用的远程操作应用方法，避免循环\n      if ((editor as any).applyRemoteOperations) {\n        (editor as any).applyRemoteOperations(operations);\n      }\n    } catch (error) {\n      if (options.debug) {\n        console.error('💥 sharedb: Failed to apply remote operation:', error);\n      }\n      options.onError?.(error);\n    }\n  },\n  /**\n   * @description 应用远程操作-不经过editor.apply\n   * @param operations \n   */\n  applyRemoteOperationWithoutEditor: (operations: Operation[]) => {\n    const { editor } = ctx as any;\n    const updateOp = () => {\n      const opsQueue = castArray(operations)\n      opsQueue.forEach(op => {\n        Transforms.transform(editor as any, op)\n      })\n      editor.onChange()  \n    }\n    updateOp()\n  },\n\n  /**\n   * 连接到 ShareDB 服务器\n   */\n  connect: async () => {\n    const { editor, getOptions, setOption } = ctx;\n    const options = getOptions();\n\n    if (options._status === 'connected' || options._status === 'connecting') {\n      console.warn('Already connected or connecting');\n      return;\n    }\n\n    if (!options.sharedb) {\n      throw new Error('ShareDB configuration not found. Please call init() first.');\n    }\n\n    try {\n      setOption('_status', 'connecting');\n      options.onStatusChange?.('connecting');\n\n      if (options.debug) {\n        console.log('📡 sharedb: Connecting to ShareDB server...');\n      }\n\n      // 动态导入 ShareDB 相关模块\n      const [{ default: ShareDB }, { default: ReconnectingWebSocket }] = await Promise.all([\n        import('sharedb-client-browser/dist/sharedb-client-umd.cjs'),\n        import('reconnecting-websocket'),\n      ]);\n\n      // 注册 sharedb 类型\n      if (!ShareDB.types.map.slate) {\n        const { default: ottype } = await import('ottype-slate-test');\n        ShareDB.types.register(ottype.type);\n        \n        if (options.debug) {\n          console.log('📋 sharedb: Registered slate sharedb type');\n        }\n      }\n\n      // 创建 WebSocket 连接\n      const socket = new ReconnectingWebSocket(options.sharedb.url, [], {\n        connectionTimeout: 5000,\n        debug: options.debug,\n        maxRetries: options.sharedb.reconnection?.maxRetries || 5,\n      });\n\n      // 创建 ShareDB 连接\n      const connection = new ShareDB.Connection(socket as any);\n      const doc = connection.get(options.sharedb.collection || 'documents', options.sharedb.documentId);\n  const presence = connection.getDocPresence(options.sharedb.collection || 'documents', options.sharedb.documentId)\n      // 设置连接引用\n      setOption('_presence', presence);\n      setOption('_socket', socket);\n      setOption('_connection', connection);\n      setOption('_doc', doc);\n\n      // 订阅文档\n      await new Promise<void>((resolve, reject) => {\n        doc.subscribe((error: any) => {\n          if (error) {\n            console.error('ShareDB subscription error:', error);\n            setOption('_status', 'error');\n            options.onError?.(error);\n            reject(error as Error);\n            return;\n          }\n\n          setOption('_status', 'connected');\n          options.onStatusChange?.('connected');\n\n          if (options.debug) {\n            console.log('✅ sharedb: Connected to ShareDB server');\n            console.log('📄 sharedb: Document data:', doc.data);\n          }\n\n          // 设置初始值\n          const initialValue = doc.data?.children || [{\n            children: [{\n              text: 'hello world',\n            }],\n            type: 'paragraph',\n          }];\n          editor.children = initialValue;\n          options.onConnect?.();\n\n          resolve();\n        });\n      });\n\n      // 监听远程操作\n      doc.on('op', (ops: any[], source: any) => {\n        // 忽略本地操作的回显（source 为 false 表示是本地操作）\n        if (source) {\n          if (options.debug) {\n            console.log('🔄 sharedb: Ignoring local operation echo');\n          }\n          return;\n        }\n\n        if (options.debug) {\n          console.log('📨 sharedb: Received remote operations:', ops, 'from source:', source);\n        }\n\n        (ctx.api as any).sharedb.applyRemoteOperationWithoutEditor(ops);\n      });\n\n      // 监听连接状态\n      socket.addEventListener('open', () => {\n        if (options.debug) {\n          console.log('🌐 sharedb: WebSocket connected');\n        }\n      });\n\n      socket.addEventListener('close', () => {\n        setOption('_status', 'disconnected');\n        options.onStatusChange?.('disconnected');\n        options.onDisconnect?.();\n        \n        if (options.debug) {\n          console.log('❌ sharedb: WebSocket disconnected');\n        }\n      });\n\n      socket.addEventListener('error', (event) => {\n        setOption('_status', 'error');\n        options.onStatusChange?.('error');\n        options.onError?.(event);\n        \n        if (options.debug) {\n          console.error('🚨 sharedb: WebSocket error:', event);\n        }\n      });\n\n    } catch (error) {\n      setOption('_status', 'error');\n      options.onStatusChange?.('error');\n      options.onError?.(error);\n      \n      if (options.debug) {\n        console.error('💥 sharedb: Connection failed:', error);\n      }\n      \n      throw error;\n    }\n  },\n\n  /**\n   * 断开连接\n   */\n  disconnect: () => {\n    const { getOptions, setOption } = ctx;\n    const options = getOptions();\n\n    if (options._socket) {\n      options._socket.close();\n      setOption('_socket', null);\n    }\n\n    if (options._connection) {\n      options._connection.close();\n      setOption('_connection', null);\n    }\n\n    setOption('_doc', null);\n    setOption('_status', 'disconnected');\n    options.onStatusChange?.('disconnected');\n    options.onDisconnect?.();\n\n    if (options.debug) {\n      console.log('🔌 sharedb: Disconnected from ShareDB');\n    }\n  },\n\n  getCtx: () => ctx,\n\n  /**\n   * 获取当前连接状态\n   */\n  getStatus: (): OtStatus => {\n    const { getOptions } = ctx;\n    return getOptions()._status;\n  },\n\n  /**\n   * 初始化 sharedb 连接和文档状态\n   */\n  init: async ({\n    id,\n    autoConnect = true,\n    collection = 'documents',\n    reconnection,\n    url = 'ws://localhost:8111',\n    value,\n  }: OtInitOptions = {}) => {\n    const { editor, getOptions, setOption } = ctx;\n    const options = getOptions();\n\n    // 使用 editor.id 作为默认文档 ID\n    const documentId = id ?? editor.id;\n\n    // 设置 ShareDB 配置\n    const sharedbConfig = {\n      collection,\n      documentId,\n      reconnection: {\n        enabled: true,\n        interval: 3000,\n        maxRetries: 5,\n        ...reconnection,\n      },\n      url,\n    };\n\n    // 更新插件配置\n    setOption('sharedb', sharedbConfig);\n\n    if (options.debug) {\n      console.log('🔧 sharedb: Initializing with config:', sharedbConfig);\n    }\n\n    // 如果提供了初始值，先设置到编辑器\n    if (value !== null && value !== undefined) {\n      let initialNodes = value as any;\n      \n      if (typeof value === 'string') {\n        initialNodes = editor.api.html.deserialize({\n          element: value,\n        }) as any;\n      } else if (typeof value === 'function') {\n        initialNodes = await value(editor);\n      } else if (value) {\n        initialNodes = value;\n      }\n      \n      if (!initialNodes || initialNodes?.length === 0) {\n        initialNodes = editor.api.create.value();\n      }\n\n    }\n\n    // 自动连接\n    if (autoConnect) {\n      await (ctx.api as any).sharedb.connect();\n    }\n  },\n\n})); ","export const castArray = (value: any) => {\n  if (Array.isArray(value)) {\n    return value;\n  }\n  return [value];\n};","import type { ExtendEditor } from 'platejs';\nimport type { Operation } from 'slate';\n\nimport type { OtConfig } from './types';\nimport { castArray } from './util';\n\n/**\n * 扩展编辑器以支持 sharedb 功能\n */\nexport const withPlateOt: ExtendEditor<OtConfig> = ({ editor, getOptions }) => {\n  const originalApply = editor.apply as (operation: Operation) => void;\n\n  // 保存真正的原始 apply 方法供远程操作使用\n  (editor as any).originalApply = originalApply;\n  \n  // 用于标记是否正在应用远程操作\n  // 重写 apply 方法来拦截本地操作\n  editor.apply = async(operation: Operation, ) => {\n    const options = getOptions();\n    \n    // 先应用操作到编辑器\n    originalApply(operation);\n\n    if (options.debug) {\n      console.log('🔄 sharedb: Applying remote operation:', operation);\n    }\n    \n    // 如果连接已建立，提交操作到 ShareDB\n    if (options._status === 'connected' && options._doc) {\n      // 过滤选择操作（ShareDB 不需要处理选择变化）\n      if (operation.type === 'set_selection') {\n        return;\n      }\n\n      const opFormat = castArray(operation);\n      \n      if (options.debug) {\n        console.log('📝 sharedb: Submitting local operation:', opFormat);\n      }\n      \n      // 异步提交操作，不阻塞编辑器\n      submitOpToShareDB(options._doc, opFormat, options.debug).catch((error: any) => {\n        if (options.debug) {\n          console.error('❌ sharedb: Failed to submit operation:', error);\n        }\n        options.onError?.(error);\n      });\n    }\n  };\n\n  // 为远程操作提供专用的应用方法\n  (editor as any).applyRemoteOperations = (operations: Operation[]) => {\n    const options = getOptions();\n    \n    if (options.debug) {\n      console.log('📨 sharedb: Applying remote operations:', operations);\n    }\n    \n    try {\n      operations.forEach(op => {\n        originalApply(op);\n      });\n    } catch (error) {\n      if (options.debug) {\n        console.error('💥 sharedb: Failed to apply remote operation:', error);\n      }\n      throw error;\n    } \n  };\n\n  return editor;\n};\n\n/**\n * 提交操作到 ShareDB 的辅助函数\n */\nasync function submitOpToShareDB(doc: any, operations: Operation[], debug?: boolean): Promise<void> {\n  if (!doc) return;\n\n  try {\n    await new Promise<void>((resolve, reject) => {\n      const filteredOps = operations.filter(op => op && op.type !== 'set_selection');\n      \n      if (filteredOps.length === 0) {\n        resolve();\n        return;\n      }\n\n      if (debug) {\n        console.log('📤 sharedb: Submitting operations to ShareDB:', filteredOps);\n      }\n\n      // 使用 source: false 标识这是本地操作\n      doc.submitOp(filteredOps, { source: false }, (error: any) => {\n        if (error) {\n          if (debug) {\n            console.error('❌ sharedb: ShareDB operation submit failed:', error);\n          }\n          reject(error);\n        } else {\n          if (debug) {\n            console.log('✅ sharedb: Operation submitted to ShareDB successfully');\n          }\n          resolve();\n        }\n      });\n    });\n  } catch (error) {\n    if (debug) {\n      console.error('💥 sharedb: Submit operation error:', error);\n    }\n    throw error;\n  }\n} "],"mappings":"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","names":[]}