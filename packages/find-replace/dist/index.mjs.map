{"version":3,"sources":["../src/lib/FindReplacePlugin.ts","../src/lib/decorateFindReplace.ts"],"sourcesContent":["import { type PluginConfig, createTSlatePlugin, KEYS } from 'platejs';\n\nimport { decorateFindReplace } from './decorateFindReplace';\n\nexport type FindReplaceConfig = PluginConfig<\n  'search_highlight',\n  {\n    /** Searching text to highlight */\n    search?: string;\n  }\n>;\n\nexport const FindReplacePlugin = createTSlatePlugin<FindReplaceConfig>({\n  key: KEYS.searchHighlight,\n  decorate: decorateFindReplace,\n  node: { isLeaf: true },\n  options: { search: '' },\n});\n","import type { Decorate, TRange } from 'platejs';\n\nimport { ElementApi, TextApi } from 'platejs';\n\nimport type { FindReplaceConfig } from './FindReplacePlugin';\n\nexport const decorateFindReplace: Decorate<FindReplaceConfig> = ({\n  entry: [node, path],\n  getOptions,\n  type,\n}) => {\n  const { search } = getOptions();\n\n  if (\n    !(\n      search &&\n      ElementApi.isElement(node) &&\n      node.children.every(TextApi.isText)\n    )\n  ) {\n    return [];\n  }\n\n  const texts = node.children.map((it) => it.text);\n  const str = texts.join('').toLowerCase();\n  const searchLower = search.toLowerCase();\n\n  let start = 0;\n  const matches: number[] = [];\n\n  while ((start = str.indexOf(searchLower, start)) !== -1) {\n    matches.push(start);\n    start += searchLower.length;\n  }\n\n  if (matches.length === 0) {\n    return [];\n  }\n\n  const ranges: SearchRange[] = [];\n  let cumulativePosition = 0;\n  let matchIndex = 0; // index in the matches array\n\n  for (const [textIndex, text] of texts.entries()) {\n    const textStart = cumulativePosition;\n    const textEnd = textStart + text.length;\n\n    // Process matches that overlap with the current text node\n    while (matchIndex < matches.length && matches[matchIndex] < textEnd) {\n      const matchStart = matches[matchIndex];\n      const matchEnd = matchStart + search.length;\n\n      // If the match ends before the start of the current text, move to the next match\n      if (matchEnd <= textStart) {\n        matchIndex++;\n\n        continue;\n      }\n\n      // Calculate overlap between the text and the current match\n      const overlapStart = Math.max(matchStart, textStart);\n      const overlapEnd = Math.min(matchEnd, textEnd);\n\n      if (overlapStart < overlapEnd) {\n        const anchorOffset = overlapStart - textStart;\n        const focusOffset = overlapEnd - textStart;\n\n        // Corresponding offsets within the search string\n        const searchOverlapStart = overlapStart - matchStart;\n        const searchOverlapEnd = overlapEnd - matchStart;\n\n        const textNodePath = [...path, textIndex];\n\n        ranges.push({\n          anchor: {\n            offset: anchorOffset,\n            path: textNodePath,\n          },\n          focus: {\n            offset: focusOffset,\n            path: textNodePath,\n          },\n          search: search.slice(searchOverlapStart, searchOverlapEnd),\n          [type]: true,\n        });\n      }\n      // If the match ends within the current text, move to the next match\n      if (matchEnd <= textEnd) {\n        matchIndex++;\n      } else {\n        // The match continues in the next text node\n        break;\n      }\n    }\n\n    cumulativePosition = textEnd;\n  }\n\n  return ranges;\n};\n\ntype SearchRange = {\n  search: string;\n} & TRange;\n"],"mappings":";AAAA,SAA4B,oBAAoB,YAAY;;;ACE5D,SAAS,YAAY,eAAe;AAI7B,IAAM,sBAAmD,CAAC;AAAA,EAC/D,OAAO,CAAC,MAAM,IAAI;AAAA,EAClB;AAAA,EACA;AACF,MAAM;AACJ,QAAM,EAAE,OAAO,IAAI,WAAW;AAE9B,MACE,EACE,UACA,WAAW,UAAU,IAAI,KACzB,KAAK,SAAS,MAAM,QAAQ,MAAM,IAEpC;AACA,WAAO,CAAC;AAAA,EACV;AAEA,QAAM,QAAQ,KAAK,SAAS,IAAI,CAAC,OAAO,GAAG,IAAI;AAC/C,QAAM,MAAM,MAAM,KAAK,EAAE,EAAE,YAAY;AACvC,QAAM,cAAc,OAAO,YAAY;AAEvC,MAAI,QAAQ;AACZ,QAAM,UAAoB,CAAC;AAE3B,UAAQ,QAAQ,IAAI,QAAQ,aAAa,KAAK,OAAO,IAAI;AACvD,YAAQ,KAAK,KAAK;AAClB,aAAS,YAAY;AAAA,EACvB;AAEA,MAAI,QAAQ,WAAW,GAAG;AACxB,WAAO,CAAC;AAAA,EACV;AAEA,QAAM,SAAwB,CAAC;AAC/B,MAAI,qBAAqB;AACzB,MAAI,aAAa;AAEjB,aAAW,CAAC,WAAW,IAAI,KAAK,MAAM,QAAQ,GAAG;AAC/C,UAAM,YAAY;AAClB,UAAM,UAAU,YAAY,KAAK;AAGjC,WAAO,aAAa,QAAQ,UAAU,QAAQ,UAAU,IAAI,SAAS;AACnE,YAAM,aAAa,QAAQ,UAAU;AACrC,YAAM,WAAW,aAAa,OAAO;AAGrC,UAAI,YAAY,WAAW;AACzB;AAEA;AAAA,MACF;AAGA,YAAM,eAAe,KAAK,IAAI,YAAY,SAAS;AACnD,YAAM,aAAa,KAAK,IAAI,UAAU,OAAO;AAE7C,UAAI,eAAe,YAAY;AAC7B,cAAM,eAAe,eAAe;AACpC,cAAM,cAAc,aAAa;AAGjC,cAAM,qBAAqB,eAAe;AAC1C,cAAM,mBAAmB,aAAa;AAEtC,cAAM,eAAe,CAAC,GAAG,MAAM,SAAS;AAExC,eAAO,KAAK;AAAA,UACV,QAAQ;AAAA,YACN,QAAQ;AAAA,YACR,MAAM;AAAA,UACR;AAAA,UACA,OAAO;AAAA,YACL,QAAQ;AAAA,YACR,MAAM;AAAA,UACR;AAAA,UACA,QAAQ,OAAO,MAAM,oBAAoB,gBAAgB;AAAA,UACzD,CAAC,IAAI,GAAG;AAAA,QACV,CAAC;AAAA,MACH;AAEA,UAAI,YAAY,SAAS;AACvB;AAAA,MACF,OAAO;AAEL;AAAA,MACF;AAAA,IACF;AAEA,yBAAqB;AAAA,EACvB;AAEA,SAAO;AACT;;;ADvFO,IAAM,oBAAoB,mBAAsC;AAAA,EACrE,KAAK,KAAK;AAAA,EACV,UAAU;AAAA,EACV,MAAM,EAAE,QAAQ,KAAK;AAAA,EACrB,SAAS,EAAE,QAAQ,GAAG;AACxB,CAAC;","names":[]}