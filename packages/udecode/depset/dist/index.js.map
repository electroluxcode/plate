{"version":3,"sources":["../src/utils/logger.ts","../src/utils/handle-error.ts","../src/utils/spinner.ts","../src/utils/get-package-manager.ts","../package.json","../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEO,IAAM,WAAc,GAAA;AAAA,EACzB,KAAO,EAAA,GAAA;AAAA,EACP,IAAM,EAAA,IAAA;AAAA,EACN,OAAS,EAAA,KAAA;AAAA,EACT,IAAM,EAAA;AACR,CAAA;AAEO,IAAM,MAAS,GAAA;AAAA,EACpB,KAAQ,GAAA;AACN,IAAA,OAAA,CAAQ,IAAI,EAAE,CAAA;AAAA,GAChB;AAAA,EACA,SAAS,IAAiB,EAAA;AACxB,IAAA,OAAA,CAAQ,IAAI,WAAY,CAAA,KAAA,CAAM,KAAK,IAAK,CAAA,GAAG,CAAC,CAAC,CAAA;AAAA,GAC/C;AAAA,EACA,QAAQ,IAAiB,EAAA;AACvB,IAAA,OAAA,CAAQ,IAAI,WAAY,CAAA,IAAA,CAAK,KAAK,IAAK,CAAA,GAAG,CAAC,CAAC,CAAA;AAAA,GAC9C;AAAA,EACA,OAAO,IAAiB,EAAA;AACtB,IAAA,OAAA,CAAQ,GAAI,CAAA,IAAA,CAAK,IAAK,CAAA,GAAG,CAAC,CAAA;AAAA,GAC5B;AAAA,EACA,WAAW,IAAiB,EAAA;AAC1B,IAAA,OAAA,CAAQ,IAAI,WAAY,CAAA,OAAA,CAAQ,KAAK,IAAK,CAAA,GAAG,CAAC,CAAC,CAAA;AAAA,GACjD;AAAA,EACA,QAAQ,IAAiB,EAAA;AACvB,IAAA,OAAA,CAAQ,IAAI,WAAY,CAAA,IAAA,CAAK,KAAK,IAAK,CAAA,GAAG,CAAC,CAAC,CAAA;AAAA;AAEhD,CAAA;ACxBO,SAAS,YAAY,KAAsB,EAAA;AAChD,EAAO,MAAA,CAAA,KAAA;AAAA,IACL;AAAA,GACF;AAEA,EAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,IAAA,MAAA,CAAO,MAAM,KAAK,CAAA;AAAA,GACpB,MAAA,IAAW,iBAAiB,QAAU,EAAA;AACpC,IAAA,MAAA,CAAO,MAAM,oBAAoB,CAAA;AACjC,IAAW,KAAA,MAAA,CAAC,GAAK,EAAA,KAAK,CAAK,IAAA,MAAA,CAAO,QAAQ,KAAM,CAAA,OAAA,EAAU,CAAA,WAAW,CAAG,EAAA;AACtE,MAAO,MAAA,CAAA,KAAA;AAAA,QACL,CAAA,EAAA,EAAK,YAAY,IAAK,CAAA,GAAG,CAAC,CAAM,EAAA,EAAA,KAAA,CAAmB,IAAK,CAAA,IAAI,CAAC,CAAA;AAAA,OAC/D;AAAA;AACF,GACF,MAAA,IAAW,iBAAiB,KAAO,EAAA;AACjC,IAAO,MAAA,CAAA,KAAA,CAAM,MAAM,OAAO,CAAA;AAAA;AAG5B,EAAA,MAAA,CAAO,KAAM,EAAA;AACb,EAAA,OAAA,CAAQ,KAAK,CAAC,CAAA;AAChB;ACtBO,SAAS,OAAA,CACd,MACA,OAGA,EAAA;AACA,EAAA,OAAO,GAAI,CAAA;AAAA,IACT,UAAU,OAAS,EAAA,MAAA;AAAA,IACnB;AAAA,GACD,CAAA;AACH;ACRA,eAAsB,kBACpB,SACA,EAAA;AAAA,EACE,YAAe,GAAA,IAAA;AAAA;AAAA,EACf,YAAe,GAAA;AACjB,CAAA,GAAwD,EAC/B,EAAA;AACzB,EAAA,MAAM,WAAW,MAAM,MAAA,CAAO,EAAE,GAAK,EAAA,SAAA,EAAW,cAAc,CAAA;AAE9D,EAAA,IAAI,QAAU,EAAA;AACZ,IAAA,IAAI,QAAS,CAAA,UAAA,CAAW,MAAM,CAAA,EAAU,OAAA,MAAA;AACxC,IAAA,IAAI,QAAS,CAAA,UAAA,CAAW,MAAM,CAAA,EAAU,OAAA,MAAA;AACxC,IAAI,IAAA,QAAA,KAAa,OAAc,OAAA,KAAA;AAC/B,IAAI,IAAA,QAAA,KAAa,OAAc,OAAA,KAAA;AAAA;AAGjC,EAAA,IAAI,YAAc,EAAA;AAEhB,IAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,GAAA,CAAI,qBAAyB,IAAA,EAAA;AAEvD,IAAI,IAAA,SAAA,CAAU,UAAW,CAAA,MAAM,CAAG,EAAA;AAChC,MAAO,OAAA,MAAA;AAAA;AAET,IAAI,IAAA,SAAA,CAAU,UAAW,CAAA,MAAM,CAAG,EAAA;AAChC,MAAO,OAAA,MAAA;AAAA;AAET,IAAI,IAAA,SAAA,CAAU,UAAW,CAAA,KAAK,CAAG,EAAA;AAC/B,MAAO,OAAA,KAAA;AAAA;AACT;AAGF,EAAO,OAAA,KAAA;AACT;;;ACpCA,IAAA,eAAA,GAAA;AAAA,EAEE,OAAW,EAAA,OAyDb,CAAA;;;ACzCA,OAAA,CAAQ,GAAG,QAAU,EAAA,MAAM,OAAQ,CAAA,IAAA,CAAK,CAAC,CAAC,CAAA;AAC1C,OAAA,CAAQ,GAAG,SAAW,EAAA,MAAM,OAAQ,CAAA,IAAA,CAAK,CAAC,CAAC,CAAA;AAE3C,IAAM,WAAA,GAAc,UAAU,IAAI,CAAA;AAElC,IAAM,oBAAA,GAAuB,EAAE,MAAO,CAAA;AAAA,EACpC,kBAAkB,CACf,CAAA,MAAA,EACA,CAAA,GAAA,CAAI,GAAG,gCAAgC,CAAA;AAAA,EAC1C,aAAe,EAAA,CAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EACnC,OAAS,EAAA,CAAA,CAAE,OAAQ,EAAA,CAAE,QAAQ,KAAK,CAAA;AAAA,EAClC,GAAK,EAAA,CAAA,CAAE,OAAQ,EAAA,CAAE,QAAQ,KAAK,CAAA;AAAA,EAC9B,KAAK,CAAE,CAAA,MAAA,GAAS,OAAQ,CAAA,OAAA,CAAQ,KAAK,CAAA;AAAA,EACrC,MAAQ,EAAA,CAAA,CAAE,OAAQ,EAAA,CAAE,QAAQ,KAAK,CAAA;AAAA;AAAA,EACjC,MAAQ,EAAA,CAAA,CAAE,OAAQ,EAAA,CAAE,QAAS;AAAA;AAC/B,CAAC,CAAA;AAID,eAAe,cAAA,CAAe,KAAa,OAAuD,EAAA;AAChG,EAAA,MAAM,UAAa,GAAA,IAAA,CAAK,IAAK,CAAA,GAAA,EAAK,gBAAgB,CAAA;AAClD,EAAM,MAAA,EAAA,GAAK,OAAc,CAAA,CAAA,0BAAA,EAA6B,UAAU,CAAA,CAAA,EAAI,EAAE,MAAA,EAAQ,OAAQ,CAAA,MAAA,EAAQ,CAAA,EAAG,KAAM,EAAA;AACvG,EAAI,IAAA;AACF,IAAA,MAAM,WAAc,GAAA,MAAM,EAAG,CAAA,QAAA,CAAS,YAAY,MAAM,CAAA;AACxD,IAAA,EAAA,EAAI,QAAQ,CAAgC,8BAAA,CAAA,CAAA;AAC5C,IAAO,OAAA,IAAA,CAAK,MAAM,WAAW,CAAA;AAAA,WACtB,KAAO,EAAA;AACd,IAAI,EAAA,EAAA,IAAA,CAAK,CAAiC,8BAAA,EAAA,UAAU,CAAE,CAAA,CAAA;AACtD,IAAA,WAAA,CAAY,KAAK,CAAA;AACjB,IAAO,OAAA,IAAA;AAAA;AAEX;AAEA,eAAe,mBAAA,CACb,KACA,mBACwB,EAAA;AACxB,EAAI,IAAA;AACF,IAAA,MAAM,mBAAmB,mBACrB,GAAA,CAAA,EAAG,GAAG,CAAA,IAAA,EAAO,mBAAmB,CAChC,CAAA,CAAA,GAAA,GAAA;AACJ,IAAM,MAAA,EAAE,MAAO,EAAA,GAAI,MAAM,WAAA;AAAA,MACvB,YAAY,gBAAgB,CAAA,eAAA;AAAA,KAC9B;AACA,IAAM,MAAA,QAAA,GAAW,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA;AAClC,IAAM,MAAA,qBAAA,GAAwB,MAAM,OAAQ,CAAA,QAAQ,IAChD,QAAS,CAAA,QAAA,CAAS,MAAS,GAAA,CAAC,CAC5B,GAAA,QAAA;AAEJ,IAAA,IAAI,qBAAuB,EAAA;AACzB,MAAA,OAAO,sBAAsB,IAAK,EAAA;AAAA;AAEpC,IAAO,OAAA,IAAA;AAAA,WACA,KAAY,EAAA;AACnB,IAAO,MAAA,CAAA,KAAA,CAAM,MAAM,OAAO,CAAA;AAC1B,IAAO,OAAA,IAAA;AAAA;AAEX;AAEA,eAAe,oBAAA,CACb,eACA,EAAA,kBAAA,EACA,OACmE,EAAA;AACnE,EAAA,MAAM,mBAAmB,OAAQ,CAAA,gBAAA,GAC7B,CAAc,WAAA,EAAA,OAAA,CAAQ,gBAAgB,CACtC,CAAA,CAAA,GAAA,EAAA;AACJ,EAAM,MAAA,eAAA,GAAkB,OAAQ,CAAA,aAAA,GAC5B,CAAmC,gCAAA,EAAA,gBAAgB,WAAW,OAAQ,CAAA,aAAa,CACnF,CAAA,CAAA,GAAA,CAAA,gCAAA,EAAmC,gBAAgB,CAAA,CAAA;AACvD,EAAA,MAAA,CAAO,KAAK,eAAe,CAAA;AAE3B,EAAM,MAAA,EAAA,GAAK,QAAc,0CAA4C,EAAA,EAAE,QAAQ,OAAQ,CAAA,MAAA,EAAQ,CAAA,EAAG,KAAM,EAAA;AAExG,EAAA,MAAM,eAAkB,GAAA,eAAA,CAAgB,GAAI,CAAA,OAAO,GAAQ,KAAA;AACzD,IAAA,MAAM,OAAU,GAAA,MAAM,mBAAoB,CAAA,GAAA,EAAK,QAAQ,aAAa,CAAA;AACpE,IAAA,IAAI,OAAS,EAAA;AACX,MAAA,MAAM,iBACJ,kBAAmB,CAAA,YAAA,GAAe,GAAG,CAAA,EAAG,QAAQ,MAAQ,EAAA,EAAE,CAC1D,IAAA,kBAAA,CAAmB,kBAAkB,GAAG,CAAA,EAAG,OAAQ,CAAA,MAAA,EAAQ,EAAE,CAC7D,IAAA,eAAA;AACF,MAAA,OAAO,CAAC,GAAA,EAAK,EAAE,cAAA,EAAgB,SAAS,CAAA;AAAA;AAE1C,IAAO,OAAA,IAAA;AAAA,GACR,CAAA;AAED,EAAA,MAAM,OAAU,GAAA,MAAM,OAAQ,CAAA,GAAA,CAAI,eAAe,CAAA;AACjD,EAAA,MAAM,aAAa,IAAI,GAAA,CAAyD,OAAQ,CAAA,MAAA,CAAO,OAAO,CAAQ,CAAA;AAC9G,EAAA,EAAA,EAAI,QAAQ,qCAAqC,CAAA;AACjD,EAAO,OAAA,UAAA;AACT;AAEA,eAAe,qBAAA,CACb,oBACA,UAQC,EAAA;AACD,EAAA,MAAM,kBAID,EAAC;AACN,EAAA,MAAM,iBAAiB,IAAK,CAAA,KAAA,CAAM,IAAK,CAAA,SAAA,CAAU,kBAAkB,CAAC,CAAA;AAEpE,EAAW,KAAA,MAAA,CAAC,MAAM,QAAQ,CAAA,IAAK,MAAM,IAAK,CAAA,UAAA,CAAW,OAAQ,EAAC,CAAG,EAAA;AAC/D,IAAA,IAAI,OAAU,GAAA,KAAA;AACd,IAAI,IAAA,cAAA,CAAe,YAAe,GAAA,IAAI,CAAG,EAAA;AACvC,MAAI,IAAA,cAAA,CAAe,aAAa,IAAI,CAAA,CAAE,QAAQ,MAAQ,EAAA,EAAE,CAAM,KAAA,QAAA,CAAS,OAAS,EAAA;AAC9E,QAAe,cAAA,CAAA,YAAA,CAAa,IAAI,CAAA,GAAI,QAAS,CAAA,OAAA;AAC7C,QAAU,OAAA,GAAA,IAAA;AAAA;AACZ;AAEF,IAAI,IAAA,cAAA,CAAe,eAAkB,GAAA,IAAI,CAAG,EAAA;AACvC,MAAI,IAAA,cAAA,CAAe,gBAAgB,IAAI,CAAA,CAAE,QAAQ,MAAQ,EAAA,EAAE,CAAM,KAAA,QAAA,CAAS,OAAS,EAAA;AAChF,QAAe,cAAA,CAAA,eAAA,CAAgB,IAAI,CAAA,GAAI,QAAS,CAAA,OAAA;AAChD,QAAU,OAAA,GAAA,IAAA;AAAA;AACb;AAGL,IAAA,IAAI,OAAS,EAAA;AACT,MAAgB,eAAA,CAAA,IAAA,CAAK,EAAE,IAAM,EAAA,cAAA,EAAgB,SAAS,cAAgB,EAAA,UAAA,EAAY,QAAS,CAAA,OAAA,EAAS,CAAA;AAAA;AACxG;AAEF,EAAO,OAAA;AAAA,IACL,eAAA;AAAA,IACA,oBAAsB,EAAA,IAAA,CAAK,SAAU,CAAA,cAAA,EAAgB,MAAM,CAAC;AAAA,GAC9D;AACF;AAEA,eAAe,QAAQ,OAAyB,EAAA;AAC9C,EAAI,IAAA,WAAA,GAAc,QAAc,wCAA0C,EAAA,EAAE,QAAQ,OAAQ,CAAA,MAAA,EAAQ,CAAA,EAAG,KAAM,EAAA;AAE7G,EAAI,IAAA,eAAA;AACJ,EAAI,IAAA,gBAAA;AAEJ,EAAA,IAAI,OAAQ,CAAA,gBAAA,CAAiB,QAAS,CAAA,GAAG,CAAG,EAAA;AAC1C,IAAA,MAAM,MAAS,GAAA,OAAA,CAAQ,gBAAiB,CAAA,KAAA,CAAM,GAAG,EAAE,CAAA;AACnD,IAAA,eAAA,GAAkB,CAAC,OAAA,KAAY,OAAQ,CAAA,UAAA,CAAW,MAAM,CAAA;AACxD,IAAA,gBAAA,GAAmB,2BAA2B,MAAM,CAAA,CAAA,CAAA;AAAA,GACtD,MAAA,IACE,OAAQ,CAAA,gBAAA,CAAiB,UAAW,CAAA,GAAG,CACvC,IAAA,CAAC,OAAQ,CAAA,gBAAA,CAAiB,QAAS,CAAA,GAAG,CACtC,EAAA;AACA,IAAA,MAAM,eAAe,OAAQ,CAAA,gBAAA;AAC7B,IAAM,MAAA,aAAA,GAAgB,QAAQ,gBAAmB,GAAA,GAAA;AACjD,IAAA,eAAA,GAAkB,CAAC,OACjB,KAAA,OAAA,CAAQ,UAAW,CAAA,aAAa,KAAK,OAAY,KAAA,YAAA;AACnD,IAAmB,gBAAA,GAAA,CAAA,mBAAA,EAAsB,QAAQ,gBAAgB,CAAA,CAAA,CAAA;AAAA,GAC5D,MAAA;AACL,IAAkB,eAAA,GAAA,CAAC,OAAY,KAAA,OAAA,KAAY,OAAQ,CAAA,gBAAA;AACnD,IAAmB,gBAAA,GAAA,CAAA,SAAA,EAAY,QAAQ,gBAAgB,CAAA,CAAA,CAAA;AAAA;AAGzD,EAAA,MAAA,CAAO,IAAK,CAAA;AAAA,cAAA,EAAmB,gBAAgB,CAAE,CAAA,CAAA;AACjD,EAAA,IAAI,QAAQ,aAAe,EAAA;AACzB,IAAA,MAAA,CAAO,IAAK,CAAA,CAAA,mBAAA,EAAsB,OAAQ,CAAA,aAAa,CAAE,CAAA,CAAA;AAAA;AAE3D,EAAA,MAAA,CAAO,IAAK,CAAA,CAAA,mBAAA,EAAsB,OAAQ,CAAA,GAAG,CAAE,CAAA,CAAA;AAE/C,EAAI,IAAA,CAAC,QAAQ,GAAK,EAAA;AAChB,IAAA,WAAA,CAAY,IAAK,EAAA;AACjB,IAAA,WAAA,CAAY,KAAM,EAAA;AAClB,IAAc,WAAA,GAAA,OAAA,CAAc,0BAA0B,EAAE,MAAA,EAAQ,QAAQ,MAAO,EAAC,GAAG,KAAM,EAAA;AAAA;AAG3F,EAAA,MAAM,kBAAqB,GAAA,MAAM,cAAe,CAAA,OAAA,CAAQ,KAAK,OAAO,CAAA;AACpE,EAAA,IAAI,CAAC,kBAAoB,EAAA;AAEzB,EAAA,MAAM,eAAkB,GAAA;AAAA,IACpB,GAAI,kBAAmB,CAAA,YAAA,IAAgB,EAAC;AAAA,IACxC,GAAI,kBAAmB,CAAA,eAAA,IAAmB;AAAC,GAC/C;AAEA,EAAA,MAAM,kBAAkB,MAAO,CAAA,IAAA,CAAK,eAAe,CAAA,CAAE,OAAO,eAAe,CAAA;AAE3E,EAAI,IAAA,eAAA,CAAgB,WAAW,CAAG,EAAA;AAChC,IAAY,WAAA,CAAA,IAAA,CAAK,CAAyC,sCAAA,EAAA,gBAAgB,CAAG,CAAA,CAAA,CAAA;AAC7E,IAAA,IAAI,OAAQ,CAAA,gBAAA,IAAoB,CAAC,OAAA,CAAQ,gBAAiB,CAAA,QAAA,CAAS,GAAG,CAAA,IAAK,CAAC,OAAA,CAAQ,gBAAiB,CAAA,QAAA,CAAS,GAAG,CAAG,EAAA;AAChH,MAAA,MAAA,CAAO,KAAK,CAAiB,cAAA,EAAA,OAAA,CAAQ,gBAAgB,CAAsC,mCAAA,EAAA,OAAA,CAAQ,gBAAgB,CAAiB,eAAA,CAAA,CAAA;AAAA;AAExI,IAAA;AAAA;AAEF,EAAA,MAAA,CAAO,IAAK,CAAA,CAAA,MAAA,EAAS,eAAgB,CAAA,MAAM,WAAW,eAAgB,CAAA,MAAA,KAAW,CAAI,GAAA,EAAA,GAAK,GAAG,CAAc,WAAA,EAAA,eAAA,CAAgB,IAAK,CAAA,IAAI,CAAC,CAAE,CAAA,CAAA;AAEvI,EAAA,MAAM,aAAa,MAAM,oBAAA;AAAA,IACvB,eAAA;AAAA,IACA,kBAAA;AAAA,IACA;AAAA,GACF;AAEA,EAAA,IAAI,UAAW,CAAA,IAAA,KAAS,CAAK,IAAA,eAAA,CAAgB,SAAS,CAAG,EAAA;AACvD,IAAA,WAAA,CAAY,KAAK,4DAA4D,CAAA;AAC7E,IAAA;AAAA;AAEF,EAAA,IAAI,UAAW,CAAA,IAAA,KAAS,CAAK,IAAA,eAAA,CAAgB,WAAW,CAAG,EAAA;AAEzD,IAAA,WAAA,CAAY,KAAK,oCAAoC,CAAA;AACrD,IAAA;AAAA;AAGF,EAAA,MAAM,EAAE,eAAA,EAAiB,oBAAqB,EAAA,GAAI,MAAM,qBAAA;AAAA,IACtD,kBAAA;AAAA,IACA;AAAA,GACF;AACA,EAAA,WAAA,CAAY,QAAQ,4BAA4B,CAAA;AAEhD,EAAI,IAAA,eAAA,CAAgB,SAAS,CAAG,EAAA;AAC9B,IAAA,MAAA,CAAO,KAAK,yCAAyC,CAAA;AACrD,IAAA,eAAA,CAAgB,QAAQ,CAAC,EAAE,IAAM,EAAA,cAAA,EAAgB,YAAiB,KAAA;AAChE,MAAA,MAAA,CAAO,IAAI,CAAK,EAAA,EAAA,IAAI,KAAK,cAAc,CAAA,IAAA,EAAO,UAAU,CAAE,CAAA,CAAA;AAAA,KAC3D,CAAA;AACD,IAAA,MAAA,CAAO,KAAM,EAAA;AAEb,IAAA,IAAI,UAAU,OAAQ,CAAA,GAAA;AACtB,IAAI,IAAA,CAAC,QAAQ,GAAK,EAAA;AAChB,MAAA,MAAM,EAAE,aAAA,EAAkB,GAAA,MAAM,OAAQ,CAAA;AAAA,QACtC,IAAM,EAAA,SAAA;AAAA,QACN,IAAM,EAAA,eAAA;AAAA,QACN,OAAS,EAAA,sCAAA;AAAA,QACT,OAAS,EAAA;AAAA,OACV,CAAA;AACD,MAAU,OAAA,GAAA,aAAA;AAAA;AAGZ,IAAA,IAAI,OAAS,EAAA;AACX,MAAI,IAAA,YAAA,GAAe,QAAc,0BAA4B,EAAA,EAAE,QAAQ,OAAQ,CAAA,MAAA,EAAQ,CAAA,EAAG,KAAM,EAAA;AAChG,MAAI,IAAA;AACF,QAAM,MAAA,EAAA,CAAG,UAAU,IAAK,CAAA,IAAA,CAAK,QAAQ,GAAK,EAAA,gBAAgB,GAAG,oBAAoB,CAAA;AACjF,QAAA,YAAA,EAAc,QAAQ,oCAAoC,CAAA;AAAA,eACnD,KAAO,EAAA;AACd,QAAA,YAAA,EAAc,KAAK,gCAAgC,CAAA;AACnD,QAAA,WAAA,CAAY,KAAK,CAAA;AACjB,QAAA;AAAA;AAIF,MAAA,IAAI,gBAAmB,GAAA,KAAA;AACvB,MAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,QAAmB,gBAAA,GAAA,IAAA;AAAA,OACd,MAAA;AACL,QAAI,IAAA,CAAC,QAAQ,GAAK,EAAA;AAChB,UAAA,MAAM,EAAE,cAAA,EAAmB,GAAA,MAAM,OAAQ,CAAA;AAAA,YACvC,IAAM,EAAA,SAAA;AAAA,YACN,IAAM,EAAA,gBAAA;AAAA,YACN,OAAS,EAAA,6DAAA;AAAA,YACT,OAAS,EAAA;AAAA,WACV,CAAA;AACD,UAAmB,gBAAA,GAAA,cAAA;AAAA,SACd,MAAA;AACL,UAAmB,gBAAA,GAAA,IAAA;AAAA;AACrB;AAGF,MAAA,IAAI,gBAAkB,EAAA;AACpB,QAAA,MAAM,EAAK,GAAA,MAAM,iBAAkB,CAAA,OAAA,CAAQ,GAAG,CAAA;AAC9C,QAAM,MAAA,cAAA,GAAiB,GAAG,EAAE,CAAA,QAAA,CAAA;AAC5B,QAAM,MAAA,cAAA,GAAiB,OAAc,CAAA,CAAA,UAAA,EAAa,cAAc,CAAA,KAAA,CAAA,EAAS,EAAE,MAAA,EAAQ,OAAQ,CAAA,MAAA,EAAQ,CAAA,EAAG,KAAM,EAAA;AAC5G,QAAI,IAAA;AACF,UAAS,QAAA,CAAA,cAAA,EAAgB,EAAE,GAAA,EAAK,OAAQ,CAAA,GAAA,EAAK,OAAO,OAAQ,CAAA,MAAA,GAAS,MAAS,GAAA,SAAA,EAAW,CAAA;AACzF,UAAgB,cAAA,EAAA,OAAA,CAAQ,CAAsB,mBAAA,EAAA,cAAc,CAAI,EAAA,CAAA,CAAA;AAAA,iBACzD,KAAO,EAAA;AACd,UAAgB,cAAA,EAAA,IAAA,CAAK,CAAmB,gBAAA,EAAA,cAAc,CAAI,EAAA,CAAA,CAAA;AAC1D,UAAA,WAAA,CAAY,KAAK,CAAA;AACjB,UAAA;AAAA;AACF,OACF,MAAA,IAAW,gBAAgB,MAAS,GAAA,CAAA,IAAK,CAAC,OAAQ,CAAA,OAAA,IAAW,QAAQ,GAAK,EAAA;AACxE,QAAA,MAAA,CAAO,KAAK,yEAAyE,CAAA;AAAA,OAC5E,MAAA,IAAA,eAAA,CAAgB,MAAS,GAAA,CAAA,IAAK,CAAC,gBAAkB,EAAA;AAC1D,QAAA,MAAA,CAAO,KAAK,gCAAgC,CAAA;AAAA;AAC9C,KAEK,MAAA;AACL,MAAA,MAAA,CAAO,KAAK,mDAAmD,CAAA;AAAA;AACjE,GACK,MAAA;AACL,IAAA,MAAA,CAAO,QAAQ,gDAAgD,CAAA;AAAA;AAGjE,EAAA,MAAA,CAAO,KAAM,EAAA;AACf;AAEA,eAAe,IAAO,GAAA;AACpB,EAAM,MAAA,OAAA,GAAU,IAAI,OAAQ,EAAA;AAC5B,EACG,OAAA,CAAA,IAAA,CAAK,QAAQ,CACb,CAAA,WAAA;AAAA,IACC;AAAA,GAED,CAAA,OAAA;AAAA,IACC,gBAAY,OAAW;AAAA,IACvB,eAAA;AAAA,IACA;AAAA,GAED,CAAA,QAAA;AAAA,IACC,qBAAA;AAAA,IACA;AAAA,GAED,CAAA,QAAA;AAAA,IACC,kBAAA;AAAA,IACA;AAAA,GAED,CAAA,MAAA;AAAA,IACC,eAAA;AAAA,IACA,uDAAA;AAAA,IACA;AAAA,GAED,CAAA,MAAA,CAAO,WAAa,EAAA,+BAAA,EAAiC,KAAK,CAC1D,CAAA,MAAA;AAAA,IACC,kBAAA;AAAA,IACA,mCAAA;AAAA,IACA,QAAQ,GAAI;AAAA,GAEb,CAAA,MAAA,CAAO,cAAgB,EAAA,sCAAA,EAAwC,KAAK,CACpE,CAAA,MAAA,CAAO,cAAgB,EAAA,6CAAA,EAA+C,KAAK,CAC3E,CAAA,MAAA,CAAO,OAAO,mBAAA,EAAqB,kBAAkB,OAAY,KAAA;AAChE,IAAI,IAAA;AACF,MAAA,IAAI,OAAU,GAAA,mBAAA;AACd,MAAA,IAAI,SAAY,GAAA,gBAAA;AAEhB,MAAA,IAAI,CAAC,OAAA,IAAW,CAAC,OAAA,CAAQ,GAAK,EAAA;AAC5B,QAAM,MAAA,QAAA,GAAW,MAAM,OAAQ,CAAA;AAAA,UAC7B,IAAM,EAAA,MAAA;AAAA,UACN,IAAM,EAAA,kBAAA;AAAA,UACN,OAAS,EAAA,mDAAA;AAAA,UACT,QAAA,EAAU,WAAS,KAAS,IAAA,KAAA,CAAM,MAAO,CAAA,MAAA,GAAS,IAAI,IAAO,GAAA;AAAA,SAC9D,CAAA;AACD,QAAI,IAAA,CAAC,SAAS,gBAAkB,EAAA;AAC9B,UAAA,MAAA,CAAO,KAAK,yCAAyC,CAAA;AACrD,UAAA;AAAA;AAEF,QAAA,OAAA,GAAU,QAAS,CAAA,gBAAA;AAAA,OACV,MAAA,IAAA,CAAC,OAAW,IAAA,OAAA,CAAQ,GAAK,EAAA;AAClC,QAAA,MAAA,CAAO,MAAM,uCAAuC,CAAA;AACpD,QAAA,OAAA,CAAQ,KAAK,CAAC,CAAA;AAAA;AAGhB,MAAA,IAAI,CAAC,SAAa,IAAA,CAAC,QAAQ,GAAO,IAAA,CAAC,QAAQ,MAAQ,EAAA;AAC/C,QAAM,MAAA,eAAA,GAAkB,MAAM,OAAQ,CAAA;AAAA,UAClC,IAAM,EAAA,MAAA;AAAA,UACN,IAAM,EAAA,eAAA;AAAA,UACN,OAAS,EAAA;AAAA,SACZ,CAAA;AACD,QAAA,SAAA,GAAY,gBAAgB,aAAiB,IAAA,KAAA,CAAA;AAAA,OACjD,MAAA,IAAW,QAAQ,MAAQ,EAAA;AACvB,QAAY,SAAA,GAAA,KAAA,CAAA;AAAA;AAIhB,MAAA,MAAM,UAAa,GAAA;AAAA,QACjB,gBAAkB,EAAA,OAAA;AAAA,QAClB,aAAe,EAAA,SAAA;AAAA,QACf,SAAS,OAAQ,CAAA,OAAA;AAAA,QACjB,KAAK,OAAQ,CAAA,GAAA;AAAA,QACb,KAAK,OAAQ,CAAA,GAAA;AAAA,QACb,QAAQ,OAAQ,CAAA,MAAA;AAAA,QAChB,QAAQ,OAAQ,CAAA;AAAA;AAAA,OAClB;AACA,MAAM,MAAA,OAAA,GAAU,oBAAqB,CAAA,KAAA,CAAM,UAAU,CAAA;AACrD,MAAA,IAAI,QAAQ,MAAQ,EAAA;AAEhB,QAAA,MAAA,CAAO,OAAO,MAAM;AAAA,SAAC;AACrB,QAAA,MAAA,CAAO,UAAU,MAAM;AAAA,SAAC;AACxB,QAAA,MAAA,CAAO,OAAO,MAAM;AAAA,SAAC;AACrB,QAAA,MAAA,CAAO,MAAM,MAAM;AAAA,SAAC;AACpB,QAAA,MAAA,CAAO,QAAQ,MAAM;AAAA,SAAC;AAAA;AAE1B,MAAA,MAAM,QAAQ,OAAO,CAAA;AAAA,aACd,KAAO,EAAA;AAEd,MAAM,MAAA,cAAA,GAAiB,EAAE,GAAG,MAAO,EAAA;AACnC,MAAA,IAAI,QAAQ,MAAQ,EAAA;AAChB,QAAA,MAAA,CAAO,QAAQ,OAAQ,CAAA,KAAA;AACvB,QAAA,MAAA,CAAO,KAAQ,GAAA,MAAM,OAAQ,CAAA,GAAA,CAAI,EAAE,CAAA;AAAA;AAEvC,MAAA,WAAA,CAAY,KAAK,CAAA;AAEjB,MAAA,IAAI,QAAQ,MAAQ,EAAA;AAChB,QAAO,MAAA,CAAA,MAAA,CAAO,QAAQ,cAAc,CAAA;AAAA;AACxC;AACF,GACD,CAAA;AAEH,EAAM,MAAA,OAAA,CAAQ,UAAW,CAAA,OAAA,CAAQ,IAAI,CAAA;AACvC;AAEA,IAAK,EAAA","file":"index.js","sourcesContent":["import { cyan, green, red, yellow } from 'kleur/colors';\n\nexport const highlighter = {\n  error: red,\n  info: cyan,\n  success: green,\n  warn: yellow,\n};\n\nexport const logger = {\n  break() {\n    console.log('');\n  },\n  error(...args: unknown[]) {\n    console.log(highlighter.error(args.join(' ')));\n  },\n  info(...args: unknown[]) {\n    console.log(highlighter.info(args.join(' ')));\n  },\n  log(...args: unknown[]) {\n    console.log(args.join(' '));\n  },\n  success(...args: unknown[]) {\n    console.log(highlighter.success(args.join(' ')));\n  },\n  warn(...args: unknown[]) {\n    console.log(highlighter.warn(args.join(' ')));\n  },\n};\n","import { ZodError } from 'zod';\n\nimport { highlighter, logger } from './logger';\n\nexport function handleError(error: unknown): void {\n  logger.error(\n    'Something went wrong. Please check the error below for more details.'\n  );\n\n  if (typeof error === 'string') {\n    logger.error(error);\n  } else if (error instanceof ZodError) {\n    logger.error('Validation failed:');\n    for (const [key, value] of Object.entries(error.flatten().fieldErrors)) {\n      logger.error(\n        `- ${highlighter.info(key)}: ${(value as string[]).join(', ')}`\n      );\n    }\n  } else if (error instanceof Error) {\n    logger.error(error.message);\n  }\n\n  logger.break();\n  process.exit(1);\n}\n","import ora, { type Options } from 'ora';\n\nexport function spinner(\n  text: Options['text'],\n  options?: {\n    silent?: boolean;\n  }\n) {\n  return ora({\n    isSilent: options?.silent,\n    text,\n  });\n}\n","import { detect } from '@antfu/ni';\n\nexport type PackageManager = 'bun' | 'npm' | 'pnpm' | 'yarn';\n\nexport async function getPackageManager(\n  targetDir: string,\n  {\n    programmatic = true, // ni specific\n    withFallback = true,\n  }: { programmatic?: boolean; withFallback?: boolean } = {}\n): Promise<PackageManager> {\n  const detected = await detect({ cwd: targetDir, programmatic });\n\n  if (detected) {\n    if (detected.startsWith('yarn')) return 'yarn'; // Catches yarn and yarn@berry\n    if (detected.startsWith('pnpm')) return 'pnpm'; // Catches pnpm and pnpm@version\n    if (detected === 'bun') return 'bun';\n    if (detected === 'npm') return 'npm';\n  }\n\n  if (withFallback) {\n    // Fallback to user agent if not detected.\n    const userAgent = process.env.npm_config_user_agent || '';\n\n    if (userAgent.startsWith('yarn')) {\n      return 'yarn';\n    }\n    if (userAgent.startsWith('pnpm')) {\n      return 'pnpm';\n    }\n    if (userAgent.startsWith('bun')) {\n      return 'bun';\n    }\n  }\n\n  return 'npm'; // Default or if no fallback matched\n}\n","{\n  \"name\": \"depset\",\n  \"version\": \"0.1.1\",\n  \"description\": \"Synchronize dependencies in package.json\",\n  \"keywords\": [\n    \"dependencies\",\n    \"package.json\",\n    \"sync\",\n    \"upgrade\",\n    \"version\",\n    \"yarn\",\n    \"pnpm\",\n    \"npm\",\n    \"bun\"\n  ],\n  \"homepage\": \"https://github.com/udecode/plate/packages/udecode/depset/README.md\",\n  \"bugs\": {\n    \"url\": \"https://github.com/udecode/plate/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/udecode/plate.git\",\n    \"directory\": \"packages/udecode/depset\"\n  },\n  \"license\": \"MIT\",\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    }\n  },\n  \"bin\": \"./dist/index.js\",\n  \"files\": [\n    \"dist/**/*\"\n  ],\n  \"scripts\": {\n    \"build\": \"yarn tsup\",\n    \"build:watch\": \"yarn tsup --watch\",\n    \"clean\": \"yarn p:clean\",\n    \"start\": \"node dist/index.js\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@antfu/ni\": \"24.3.0\",\n    \"commander\": \"14.0.0\",\n    \"kleur\": \"4.1.5\",\n    \"ora\": \"8.2.0\",\n    \"prompts\": \"2.4.2\",\n    \"zod\": \"3.25.61\"\n  },\n  \"devDependencies\": {\n    \"@types/prompts\": \"2.4.9\",\n    \"tsup\": \"8.5.0\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n","#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { exec, execSync } from 'child_process';\nimport { promisify } from 'util';\nimport prompts from 'prompts';\n\nimport { logger } from './utils/logger';\nimport { handleError } from './utils/handle-error';\nimport { spinner as createSpinner } from './utils/spinner';\nimport {\n  getPackageManager,\n} from './utils/get-package-manager';\nimport packageJson from \"../package.json\"\n\nprocess.on(\"SIGINT\", () => process.exit(0))\nprocess.on(\"SIGTERM\", () => process.exit(0))\n\nconst execPromise = promisify(exec);\n\nconst DepSyncOptionsSchema = z.object({\n  packageSpecifier: z\n    .string()\n    .min(1, 'Package specifier is required.'),\n  targetVersion: z.string().optional(),\n  install: z.boolean().default(false),\n  yes: z.boolean().default(false),\n  cwd: z.string().default(process.cwd()),\n  silent: z.boolean().default(false), // Added for global silent control\n  latest: z.boolean().optional(), // Added for --latest flag\n});\n\ntype DepSyncOptions = z.infer<typeof DepSyncOptionsSchema>;\n\nasync function getPackageJson(cwd: string, options: Pick<DepSyncOptions, 'silent'>): Promise<any> {\n  const targetPath = path.join(cwd, './package.json');\n  const sp = createSpinner(`Reading package.json from ${targetPath}`, { silent: options.silent })?.start();\n  try {\n    const fileContent = await fs.readFile(targetPath, 'utf8');\n    sp?.succeed(`Successfully read package.json`);\n    return JSON.parse(fileContent);\n  } catch (error) {\n    sp?.fail(`Error reading package.json at ${targetPath}`);\n    handleError(error); // handleError will exit\n    return null; // Should not be reached\n  }\n}\n\nasync function fetchPackageVersion(\n  pkg: string,\n  targetVersionString: string | undefined,\n): Promise<string | null> {\n  try {\n    const versionSpecifier = targetVersionString\n      ? `${pkg}@\"<=${targetVersionString}\"`\n      : pkg;\n    const { stdout } = await execPromise(\n      `npm view ${versionSpecifier} version --json`\n    );\n    const versions = JSON.parse(stdout);\n    const latestMatchingVersion = Array.isArray(versions)\n      ? versions[versions.length - 1]\n      : versions;\n\n    if (latestMatchingVersion) {\n      return latestMatchingVersion.trim();\n    }\n    return null;\n  } catch (error: any) {\n    logger.error(error.message);\n    return null;\n  }\n}\n\nasync function fetchPackageVersions(\n  packagesToFetch: string[],\n  currentPackageJson: any,\n  options: DepSyncOptions\n): Promise<Map<string, { currentVersion: string; version: string }>> {\n  const specifierDisplay = options.packageSpecifier\n    ? ` matching \"${options.packageSpecifier}\"`\n    : '';\n  const fetchingMessage = options.targetVersion\n    ? `Fetching latest package versions${specifierDisplay} (up to ${options.targetVersion})`\n    : `Fetching latest package versions${specifierDisplay}`;\n  logger.info(fetchingMessage);\n\n  const sp = createSpinner('Fetching package versions in parallel...', { silent: options.silent })?.start();\n\n  const versionPromises = packagesToFetch.map(async (pkg) => {\n    const version = await fetchPackageVersion(pkg, options.targetVersion);\n    if (version) {\n      const currentVersion =\n        currentPackageJson.dependencies?.[pkg]?.replace(/^\\D*/, '') ||\n        currentPackageJson.devDependencies?.[pkg]?.replace(/^\\D*/, '') ||\n        'Not installed';\n      return [pkg, { currentVersion, version }];\n    }\n    return null;\n  });\n\n  const results = await Promise.all(versionPromises);\n  const versionMap = new Map<string, { currentVersion: string; version: string }>(results.filter(Boolean) as any);\n  sp?.succeed('Finished fetching package versions.');\n  return versionMap;\n}\n\nasync function preparePackageUpdates(\n  currentPackageJson: any,\n  versionMap: Map<string, { currentVersion: string; version: string }>\n): Promise<{\n  updatedPackages: Array<{\n    name: string;\n    currentVersion: string;\n    newVersion: string;\n  }>;\n  newPackageJsonString: string;\n}> {\n  const updatedPackages: Array<{\n    name: string;\n    currentVersion: string;\n    newVersion: string;\n  }> = [];\n  const newPackageJson = JSON.parse(JSON.stringify(currentPackageJson)); // Deep clone\n\n  for (const [name, versions] of Array.from(versionMap.entries())) {\n    let changed = false;\n    if (newPackageJson.dependencies?.[name]) {\n      if (newPackageJson.dependencies[name].replace(/^\\D*/, '') !== versions.version) {\n        newPackageJson.dependencies[name] = versions.version; // Or keep prefix if present: `^${versions.version}`\n        changed = true;\n      }\n    }\n    if (newPackageJson.devDependencies?.[name]) {\n         if (newPackageJson.devDependencies[name].replace(/^\\D*/, '') !== versions.version) {\n            newPackageJson.devDependencies[name] = versions.version;\n            changed = true;\n         }\n    }\n\n    if (changed) {\n        updatedPackages.push({ name, currentVersion: versions.currentVersion, newVersion: versions.version });\n    }\n  }\n  return {\n    updatedPackages,\n    newPackageJsonString: JSON.stringify(newPackageJson, null, 2),\n  };\n}\n\nasync function runSync(options: DepSyncOptions) {\n  let mainSpinner = createSpinner('Starting dependency synchronization...', { silent: options.silent })?.start();\n\n  let packageFilterFn: (pkgName: string) => boolean;\n  let matchDescription: string;\n\n  if (options.packageSpecifier.endsWith('*')) {\n    const prefix = options.packageSpecifier.slice(0, -1);\n    packageFilterFn = (pkgName) => pkgName.startsWith(prefix);\n    matchDescription = `packages starting with \"${prefix}\"`;\n  } else if (\n    options.packageSpecifier.startsWith('@') &&\n    !options.packageSpecifier.includes('/')\n  ) {\n    const scopeAsExact = options.packageSpecifier;\n    const scopeAsPrefix = options.packageSpecifier + '/';\n    packageFilterFn = (pkgName) =>\n      pkgName.startsWith(scopeAsPrefix) || pkgName === scopeAsExact;\n    matchDescription = `packages in scope \"${options.packageSpecifier}\"`;\n  } else {\n    packageFilterFn = (pkgName) => pkgName === options.packageSpecifier;\n    matchDescription = `package \"${options.packageSpecifier}\"`;\n  }\n\n  logger.info(`\\nSynchronizing ${matchDescription}`);\n  if (options.targetVersion) {\n    logger.info(`Targeting version: ${options.targetVersion}`);\n  }\n  logger.info(`Working directory: ${options.cwd}`);\n\n  if (!options.yes) {\n    mainSpinner.stop();\n    mainSpinner.clear();\n    mainSpinner = createSpinner('Processing packages...', { silent: options.silent })?.start();\n  }\n\n  const currentPackageJson = await getPackageJson(options.cwd, options);\n  if (!currentPackageJson) return; // Error handled in getPackageJson\n\n  const allDependencies = {\n      ...(currentPackageJson.dependencies || {}),\n      ...(currentPackageJson.devDependencies || {}),\n  };\n\n  const packagesToFetch = Object.keys(allDependencies).filter(packageFilterFn);\n\n  if (packagesToFetch.length === 0) {\n    mainSpinner.warn(`No packages found in dependencies for ${matchDescription}.`);\n    if (options.packageSpecifier && !options.packageSpecifier.endsWith('*') && !options.packageSpecifier.includes('/')) {\n        logger.info(`Did you mean '${options.packageSpecifier}/*' or an exact package name like '${options.packageSpecifier}/some-package'?`);\n    }\n    return;\n  }\n  logger.info(`Found ${packagesToFetch.length} package${packagesToFetch.length === 1 ? '' : 's'} to check: ${packagesToFetch.join(', ')}`);\n\n  const versionMap = await fetchPackageVersions(\n    packagesToFetch,\n    currentPackageJson,\n    options\n  );\n\n  if (versionMap.size === 0 && packagesToFetch.length > 0) {\n    mainSpinner.warn('Could not fetch versions for any of the targeted packages.');\n    return;\n  }\n  if (versionMap.size === 0 && packagesToFetch.length === 0) {\n    // This case is already handled by the packagesToFetch.length === 0 check above, but good for clarity\n    mainSpinner.info('No packages matched the specifier.');\n    return;\n  }\n\n  const { updatedPackages, newPackageJsonString } = await preparePackageUpdates(\n    currentPackageJson,\n    versionMap\n  );\n  mainSpinner.succeed('Package analysis complete.');\n\n  if (updatedPackages.length > 0) {\n    logger.info('The following packages will be updated:');\n    updatedPackages.forEach(({ name, currentVersion, newVersion }) => {\n      logger.log(`  ${name}: ${currentVersion} -> ${newVersion}`);\n    });\n    logger.break();\n\n    let proceed = options.yes;\n    if (!options.yes) {\n      const { confirmUpdate } = await prompts({\n        type: 'confirm',\n        name: 'confirmUpdate',\n        message: 'Apply these changes to package.json?',\n        initial: true,\n      });\n      proceed = confirmUpdate;\n    }\n\n    if (proceed) {\n      let writeSpinner = createSpinner('Updating package.json...', { silent: options.silent })?.start();\n      try {\n        await fs.writeFile(path.join(options.cwd, './package.json'), newPackageJsonString);\n        writeSpinner?.succeed('package.json updated successfully.');\n      } catch (error) {\n        writeSpinner?.fail('Error writing to package.json.');\n        handleError(error);\n        return;\n      }\n\n      // Decide whether to run install\n      let shouldRunInstall = false;\n      if (options.install) { // --install flag IS present\n        shouldRunInstall = true;\n      } else { // --install flag IS NOT present\n        if (!options.yes) { // --install is NOT present, --yes is NOT present\n          const { confirmInstall } = await prompts({\n            type: 'confirm',\n            name: 'confirmInstall',\n            message: 'Run package manager install command to apply these changes?',\n            initial: true,\n          });\n          shouldRunInstall = confirmInstall;\n        } else {\n          shouldRunInstall = true;\n        }\n      }\n\n      if (shouldRunInstall) {\n        const pm = await getPackageManager(options.cwd);\n        const installCommand = `${pm} install`;\n        const installSpinner = createSpinner(`Running \\`${installCommand}\\`...`, { silent: options.silent })?.start();\n        try {\n          execSync(installCommand, { cwd: options.cwd, stdio: options.silent ? 'pipe' : 'inherit' });\n          installSpinner?.succeed(`Successfully ran \\`${installCommand}\\``);\n        } catch (error) {\n          installSpinner?.fail(`Error running \\`${installCommand}\\``);\n          handleError(error); // Will exit\n          return;\n        }\n      } else if (updatedPackages.length > 0 && !options.install && options.yes) {\n        logger.info('Skipping package installation as --install was not provided with --yes.');\n      } else if (updatedPackages.length > 0 && !shouldRunInstall) {\n        logger.info('Skipping package installation.');\n      }\n\n    } else {\n      logger.info('Changes to package.json were not applied by user.');\n    }\n  } else {\n    logger.success('All specified packages are already up to date.');\n    // Removed redundant logging here as installation prompting is handled above or not applicable\n  }\n  logger.break();\n}\n\nasync function main() {\n  const program = new Command();\n  program\n    .name('depset')\n    .description(\n      'Synchronize package dependencies to their latest or a specific version.'\n    )\n    .version(\n      packageJson.version || '0.1.0',\n      \"-v, --version\",\n      \"display the version number\"\n    )\n    .argument(\n      '[package-specifier]',\n      'Package name or pattern (e.g., \"@scope/foo*\", \"my-package\", \"@myorg\")'\n    )\n    .argument(\n      '[target-version]',\n      'Target version (e.g., \"1.2.3\") - defaults to latest if omitted'\n    )\n    .option(\n      '-i, --install',\n      'Automatically run install after updating package.json',\n      false\n    )\n    .option('-y, --yes', 'Skip all confirmation prompts', false)\n    .option(\n      '-c, --cwd <path>',\n      'Set the current working directory',\n      process.cwd()\n    )\n    .option('-s, --silent', 'Silence all output except for errors', false)\n    .option('-L, --latest', 'Use the latest version, skip version prompt', false) // Added --latest option\n    .action(async (packageSpecifierArg, targetVersionArg, cliOpts) => {\n      try {\n        let pkgSpec = packageSpecifierArg;\n        let targetVer = targetVersionArg;\n\n        if (!pkgSpec && !cliOpts.yes) {\n          const response = await prompts({\n            type: 'text',\n            name: 'packageSpecifier',\n            message: 'Enter the package name or pattern to synchronize:',\n            validate: value => value && value.trim().length > 0 ? true : 'Package specifier cannot be empty.'\n          });\n          if (!response.packageSpecifier) {\n            logger.warn('Package specifier is required. Exiting.');\n            return;\n          }\n          pkgSpec = response.packageSpecifier;\n        } else if (!pkgSpec && cliOpts.yes) {\n          logger.error('Error: package-specifier is required.');\n          process.exit(1);\n        }\n\n        if (!targetVer && !cliOpts.yes && !cliOpts.latest) { // Skip if --latest is used\n            const versionResponse = await prompts({\n                type: 'text',\n                name: 'targetVersion',\n                message: 'Enter the target version (e.g., \"1.2.3\", or leave blank for latest):'\n            });\n            targetVer = versionResponse.targetVersion || undefined;\n        } else if (cliOpts.latest) {\n            targetVer = undefined; // Ensure targetVer is undefined if --latest is used\n        }\n\n        // Merge CLI options with defaults from schema for parsing\n        const rawOptions = {\n          packageSpecifier: pkgSpec,\n          targetVersion: targetVer,\n          install: cliOpts.install,\n          yes: cliOpts.yes,\n          cwd: cliOpts.cwd,\n          silent: cliOpts.silent,\n          latest: cliOpts.latest, // Added latest to rawOptions\n        };\n        const options = DepSyncOptionsSchema.parse(rawOptions);\n        if (options.silent) {\n            // Suppress non-error console logs if silent is true\n            logger.info = () => {};\n            logger.success = () => {};\n            logger.warn = () => {};\n            logger.log = () => {};\n            logger.break = () => {};\n        }\n        await runSync(options);\n      } catch (error) {\n        // Ensure logger still works for handleError even if silenced\n        const originalLogger = { ...logger }; \n        if (cliOpts.silent) {\n            logger.error = console.error; // Fallback for errors\n            logger.break = () => console.log('');\n        }\n        handleError(error);\n        // Restore logger if it was modified\n        if (cliOpts.silent) {\n            Object.assign(logger, originalLogger);\n        }\n      }\n    });\n\n  await program.parseAsync(process.argv);\n}\n\nmain()\n\n"]}