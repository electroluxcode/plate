{"version":3,"sources":["../src/lib/BaseCaptionPlugin.ts","../src/lib/withCaption.ts"],"sourcesContent":["import {\n  type Path,\n  type PluginConfig,\n  createTSlatePlugin,\n  KEYS,\n} from 'platejs';\n\nimport { withCaption } from './withCaption';\n\nexport type CaptionConfig = PluginConfig<\n  'caption',\n  {\n    /** When defined, focus end of caption textarea with the same path. */\n    focusEndPath: Path | null;\n    /** When defined, focus start of caption textarea with the same path. */\n    focusStartPath: Path | null;\n    // isVisible?: (elementId: string) => boolean;\n    query: {\n      /** Plugin keys to enable caption. */\n      allow: string[];\n    };\n    visibleId: string | null;\n  },\n  {},\n  {},\n  {\n    isVisible?: (elementId: string) => boolean;\n  }\n>;\n\n/** Enables support for caption. */\nexport const BaseCaptionPlugin = createTSlatePlugin<CaptionConfig>({\n  key: KEYS.caption,\n  options: {\n    focusEndPath: null,\n    focusStartPath: null,\n    query: { allow: [] },\n    visibleId: null,\n  },\n})\n  .extendSelectors<CaptionConfig['selectors']>(({ getOptions }) => ({\n    isVisible: (elementId) => getOptions().visibleId === elementId,\n  }))\n  .overrideEditor(withCaption);\n","import {\n  type OverrideEditor,\n  type TRange,\n  getPluginTypes,\n  isHotkey,\n  NodeApi,\n  RangeApi,\n} from 'platejs';\n\nimport { type CaptionConfig, BaseCaptionPlugin } from './BaseCaptionPlugin';\n\n/** TODO: tests https://github.com/udecode/editor-protocol/issues/79 */\n\n/**\n * Selection table:\n *\n * - If anchor is in table, focus in a block before: set focus to start of table\n * - If anchor is in table, focus in a block after: set focus to end of table\n * - If focus is in table, anchor in a block before: set focus to end of table\n * - If focus is in table, anchor in a block after: set focus to the point before\n *   start of table\n */\nexport const withCaption: OverrideEditor<CaptionConfig> = ({\n  editor,\n  getOptions,\n  tf: { apply, moveLine },\n}) => {\n  return {\n    transforms: {\n      apply(operation) {\n        const { query } = getOptions();\n\n        if (operation.type === 'set_selection') {\n          const newSelection = {\n            ...editor.selection,\n            ...operation.newProperties,\n          } as TRange | null;\n\n          if (\n            editor.dom.currentKeyboardEvent &&\n            isHotkey('up', editor.dom.currentKeyboardEvent) &&\n            newSelection &&\n            RangeApi.isCollapsed(newSelection)\n          ) {\n            const types = getPluginTypes(editor, query.allow);\n\n            const entry = editor.api.above({\n              at: newSelection,\n              match: { type: types },\n            });\n\n            if (entry) {\n              const [node] = entry;\n\n              if (\n                node.caption &&\n                NodeApi.string({ children: node.caption } as any).length > 0\n              ) {\n                setTimeout(() => {\n                  editor.setOption(BaseCaptionPlugin, 'focusEndPath', entry[1]);\n                }, 0);\n              }\n            }\n          }\n        }\n\n        apply(operation);\n      },\n      moveLine: (options) => {\n        const apply = () => {\n          // focus caption from image on down arrow\n          if (!options.reverse) {\n            const types = getPluginTypes(editor, getOptions().query.allow);\n\n            const entry = editor.api.block({\n              match: { type: types },\n            });\n\n            if (!entry) return;\n\n            editor.setOption(BaseCaptionPlugin, 'focusEndPath', entry[1]);\n\n            return true;\n          }\n        };\n\n        if (apply()) return true;\n\n        return moveLine(options);\n      },\n    },\n  };\n};\n"],"mappings":";AAAA;AAAA,EAGE;AAAA,EACA;AAAA,OACK;;;ACLP;AAAA,EAGE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAeA,IAAM,cAA6C,CAAC;AAAA,EACzD;AAAA,EACA;AAAA,EACA,IAAI,EAAE,OAAO,SAAS;AACxB,MAAM;AACJ,SAAO;AAAA,IACL,YAAY;AAAA,MACV,MAAM,WAAW;AACf,cAAM,EAAE,MAAM,IAAI,WAAW;AAE7B,YAAI,UAAU,SAAS,iBAAiB;AACtC,gBAAM,eAAe;AAAA,YACnB,GAAG,OAAO;AAAA,YACV,GAAG,UAAU;AAAA,UACf;AAEA,cACE,OAAO,IAAI,wBACX,SAAS,MAAM,OAAO,IAAI,oBAAoB,KAC9C,gBACA,SAAS,YAAY,YAAY,GACjC;AACA,kBAAM,QAAQ,eAAe,QAAQ,MAAM,KAAK;AAEhD,kBAAM,QAAQ,OAAO,IAAI,MAAM;AAAA,cAC7B,IAAI;AAAA,cACJ,OAAO,EAAE,MAAM,MAAM;AAAA,YACvB,CAAC;AAED,gBAAI,OAAO;AACT,oBAAM,CAAC,IAAI,IAAI;AAEf,kBACE,KAAK,WACL,QAAQ,OAAO,EAAE,UAAU,KAAK,QAAQ,CAAQ,EAAE,SAAS,GAC3D;AACA,2BAAW,MAAM;AACf,yBAAO,UAAU,mBAAmB,gBAAgB,MAAM,CAAC,CAAC;AAAA,gBAC9D,GAAG,CAAC;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,cAAM,SAAS;AAAA,MACjB;AAAA,MACA,UAAU,CAAC,YAAY;AACrB,cAAMA,SAAQ,MAAM;AAElB,cAAI,CAAC,QAAQ,SAAS;AACpB,kBAAM,QAAQ,eAAe,QAAQ,WAAW,EAAE,MAAM,KAAK;AAE7D,kBAAM,QAAQ,OAAO,IAAI,MAAM;AAAA,cAC7B,OAAO,EAAE,MAAM,MAAM;AAAA,YACvB,CAAC;AAED,gBAAI,CAAC,MAAO;AAEZ,mBAAO,UAAU,mBAAmB,gBAAgB,MAAM,CAAC,CAAC;AAE5D,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,YAAIA,OAAM,EAAG,QAAO;AAEpB,eAAO,SAAS,OAAO;AAAA,MACzB;AAAA,IACF;AAAA,EACF;AACF;;;AD7DO,IAAM,oBAAoB,mBAAkC;AAAA,EACjE,KAAK,KAAK;AAAA,EACV,SAAS;AAAA,IACP,cAAc;AAAA,IACd,gBAAgB;AAAA,IAChB,OAAO,EAAE,OAAO,CAAC,EAAE;AAAA,IACnB,WAAW;AAAA,EACb;AACF,CAAC,EACE,gBAA4C,CAAC,EAAE,WAAW,OAAO;AAAA,EAChE,WAAW,CAAC,cAAc,WAAW,EAAE,cAAc;AACvD,EAAE,EACD,eAAe,WAAW;","names":["apply"]}