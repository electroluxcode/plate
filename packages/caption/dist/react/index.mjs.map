{"version":3,"sources":["../../src/react/CaptionPlugin.tsx","../../src/lib/BaseCaptionPlugin.ts","../../src/lib/withCaption.ts","../../src/react/components/Caption.tsx","../../src/react/hooks/useCaptionString.ts","../../src/react/components/CaptionButton.tsx","../../src/react/components/CaptionTextarea.tsx","../../src/react/components/TextareaAutosize.tsx","../../src/react/utils/showCaption.ts"],"sourcesContent":["import { toPlatePlugin } from 'platejs/react';\n\nimport { BaseCaptionPlugin } from '../lib/BaseCaptionPlugin';\n\nexport const CaptionPlugin = toPlatePlugin(BaseCaptionPlugin);\n","import {\n  type Path,\n  type PluginConfig,\n  createTSlatePlugin,\n  KEYS,\n} from 'platejs';\n\nimport { withCaption } from './withCaption';\n\nexport type CaptionConfig = PluginConfig<\n  'caption',\n  {\n    /** When defined, focus end of caption textarea with the same path. */\n    focusEndPath: Path | null;\n    /** When defined, focus start of caption textarea with the same path. */\n    focusStartPath: Path | null;\n    // isVisible?: (elementId: string) => boolean;\n    query: {\n      /** Plugin keys to enable caption. */\n      allow: string[];\n    };\n    visibleId: string | null;\n  },\n  {},\n  {},\n  {\n    isVisible?: (elementId: string) => boolean;\n  }\n>;\n\n/** Enables support for caption. */\nexport const BaseCaptionPlugin = createTSlatePlugin<CaptionConfig>({\n  key: KEYS.caption,\n  options: {\n    focusEndPath: null,\n    focusStartPath: null,\n    query: { allow: [] },\n    visibleId: null,\n  },\n})\n  .extendSelectors<CaptionConfig['selectors']>(({ getOptions }) => ({\n    isVisible: (elementId) => getOptions().visibleId === elementId,\n  }))\n  .overrideEditor(withCaption);\n","import {\n  type OverrideEditor,\n  type TRange,\n  getPluginTypes,\n  isHotkey,\n  NodeApi,\n  RangeApi,\n} from 'platejs';\n\nimport { type CaptionConfig, BaseCaptionPlugin } from './BaseCaptionPlugin';\n\n/** TODO: tests https://github.com/udecode/editor-protocol/issues/79 */\n\n/**\n * Selection table:\n *\n * - If anchor is in table, focus in a block before: set focus to start of table\n * - If anchor is in table, focus in a block after: set focus to end of table\n * - If focus is in table, anchor in a block before: set focus to end of table\n * - If focus is in table, anchor in a block after: set focus to the point before\n *   start of table\n */\nexport const withCaption: OverrideEditor<CaptionConfig> = ({\n  editor,\n  getOptions,\n  tf: { apply, moveLine },\n}) => {\n  return {\n    transforms: {\n      apply(operation) {\n        const { query } = getOptions();\n\n        if (operation.type === 'set_selection') {\n          const newSelection = {\n            ...editor.selection,\n            ...operation.newProperties,\n          } as TRange | null;\n\n          if (\n            editor.dom.currentKeyboardEvent &&\n            isHotkey('up', editor.dom.currentKeyboardEvent) &&\n            newSelection &&\n            RangeApi.isCollapsed(newSelection)\n          ) {\n            const types = getPluginTypes(editor, query.allow);\n\n            const entry = editor.api.above({\n              at: newSelection,\n              match: { type: types },\n            });\n\n            if (entry) {\n              const [node] = entry;\n\n              if (\n                node.caption &&\n                NodeApi.string({ children: node.caption } as any).length > 0\n              ) {\n                setTimeout(() => {\n                  editor.setOption(BaseCaptionPlugin, 'focusEndPath', entry[1]);\n                }, 0);\n              }\n            }\n          }\n        }\n\n        apply(operation);\n      },\n      moveLine: (options) => {\n        const apply = () => {\n          // focus caption from image on down arrow\n          if (!options.reverse) {\n            const types = getPluginTypes(editor, getOptions().query.allow);\n\n            const entry = editor.api.block({\n              match: { type: types },\n            });\n\n            if (!entry) return;\n\n            editor.setOption(BaseCaptionPlugin, 'focusEndPath', entry[1]);\n\n            return true;\n          }\n        };\n\n        if (apply()) return true;\n\n        return moveLine(options);\n      },\n    },\n  };\n};\n","import type React from 'react';\n\nimport {\n  createPrimitiveComponent,\n  useElement,\n  usePluginOption,\n  useReadOnly,\n  useSelected,\n} from 'platejs/react';\n\nimport { CaptionPlugin } from '../CaptionPlugin';\nimport { useCaptionString } from '../hooks/useCaptionString';\n\nexport interface CaptionOptions {\n  readOnly?: boolean;\n}\n\nexport interface CaptionProps\n  extends React.ComponentPropsWithoutRef<'figcaption'> {\n  options?: CaptionOptions;\n}\n\nexport const useCaptionState = (options: CaptionOptions = {}) => {\n  const element = useElement();\n  const captionString = useCaptionString();\n\n  const showCaption = usePluginOption(\n    CaptionPlugin,\n    'isVisible',\n    element.id as string\n  );\n\n  const selected = useSelected();\n  const _readOnly = useReadOnly();\n  const readOnly = options.readOnly || _readOnly;\n\n  const hidden = !showCaption && captionString.length === 0;\n\n  return {\n    captionString,\n    hidden,\n    readOnly,\n    selected,\n  };\n};\n\nexport const useCaption = (state: ReturnType<typeof useCaptionState>) => {\n  return {\n    hidden: state.hidden,\n  };\n};\n\nexport const Caption = createPrimitiveComponent<'figcaption', CaptionProps>(\n  'figcaption'\n)({\n  propsHook: useCaption,\n  stateHook: useCaptionState,\n});\n","import React from 'react';\n\nimport type { TCaptionElement } from 'platejs';\n\nimport { NodeApi } from 'platejs';\nimport { useElement } from 'platejs/react';\n\nexport const useCaptionString = () => {\n  const { caption: nodeCaption = [{ children: [{ text: '' }] }] } =\n    useElement<TCaptionElement>();\n\n  return React.useMemo(() => {\n    return NodeApi.string(nodeCaption[0] as any) || '';\n  }, [nodeCaption]);\n};\n","import { useEditorRef, useElement } from 'platejs/react';\n\nimport { BaseCaptionPlugin } from '../../lib';\n\nexport const useCaptionButtonState = () => {\n  const editor = useEditorRef();\n  const element = useElement();\n\n  return { editor, element };\n};\n\nexport const useCaptionButton = ({\n  editor,\n  element,\n}: ReturnType<typeof useCaptionButtonState>) => {\n  return {\n    props: {\n      onClick: () => {\n        const path = editor.api.findPath(element);\n        editor.setOption(BaseCaptionPlugin, 'visibleId', element.id as string);\n        setTimeout(() => {\n          path && editor.setOption(BaseCaptionPlugin, 'focusEndPath', path);\n        }, 0);\n      },\n    },\n  };\n};\n","import React, { useCallback, useState } from 'react';\n\nimport type { TextareaAutosizeProps } from 'react-textarea-autosize';\n\nimport {\n  type TCaptionElement,\n  type TElement,\n  isHotkey,\n  NodeApi,\n  PathApi,\n} from 'platejs';\nimport {\n  createPrimitiveComponent,\n  useEditorRef,\n  useElement,\n  usePluginOption,\n  useReadOnly,\n} from 'platejs/react';\n\nimport { CaptionPlugin } from '../CaptionPlugin';\nimport { TextareaAutosize } from './TextareaAutosize';\n\n/** Focus textareaRef when focusCaptionPath is set to the image path. */\nexport const useCaptionTextareaFocus = (\n  textareaRef: React.RefObject<HTMLTextAreaElement | null>\n) => {\n  const editor = useEditorRef();\n  const element = useElement<TCaptionElement>();\n\n  const focusCaptionPath = usePluginOption(CaptionPlugin, 'focusEndPath');\n\n  React.useEffect(() => {\n    if (focusCaptionPath && textareaRef.current) {\n      const path = editor.api.findPath(element);\n\n      if (path && PathApi.equals(path, focusCaptionPath)) {\n        textareaRef.current.focus();\n        editor.setOption(CaptionPlugin, 'focusEndPath', null);\n      }\n    }\n  }, [editor, element, focusCaptionPath, textareaRef]);\n};\n\nexport const useCaptionTextareaState = () => {\n  const element = useElement<TCaptionElement>();\n  const editor = useEditorRef();\n\n  const [isComposing, setIsComposing] = useState(false);\n\n  const [captionValue, setCaptionValue] = useState<\n    TextareaAutosizeProps['value']\n  >(() => {\n    const nodeCaption =\n      element.caption ?? ([{ children: [{ text: '' }] }] as [TElement]);\n\n    return NodeApi.string(nodeCaption[0]);\n  });\n\n  const updateEditorCaptionValue = useCallback(\n    (newValue: string) => {\n      editor.tf.setNodes<TCaptionElement>(\n        { caption: [{ text: newValue }] },\n        { at: element }\n      );\n    },\n    [editor, element]\n  );\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const newValue = e.target.value;\n      setCaptionValue(newValue);\n\n      if (!isComposing) {\n        updateEditorCaptionValue(newValue);\n      }\n    },\n    [isComposing, updateEditorCaptionValue]\n  );\n\n  const handleCompositionStart = useCallback(() => {\n    setIsComposing(true);\n  }, []);\n\n  const handleCompositionEnd = useCallback(\n    (e: React.CompositionEvent<HTMLTextAreaElement>) => {\n      setIsComposing(false);\n      const newValue = e.currentTarget.value;\n      setCaptionValue(newValue);\n      updateEditorCaptionValue(newValue);\n    },\n    [updateEditorCaptionValue]\n  );\n\n  const readOnly = useReadOnly();\n\n  const textareaRef = React.useRef<HTMLTextAreaElement>(null);\n\n  useCaptionTextareaFocus(textareaRef);\n\n  return {\n    captionValue,\n    element,\n    readOnly,\n    textareaRef,\n    handleChange,\n    handleCompositionEnd,\n    handleCompositionStart,\n  };\n};\n\nexport const useCaptionTextarea = ({\n  captionValue,\n  element,\n  readOnly,\n  textareaRef,\n  handleChange,\n  handleCompositionEnd,\n  handleCompositionStart,\n}: ReturnType<typeof useCaptionTextareaState>) => {\n  const editor = useEditorRef();\n\n  const onKeyDown: TextareaAutosizeProps['onKeyDown'] = (e) => {\n    // select image\n    if (isHotkey('up', e)) {\n      const path = editor.api.findPath(element);\n\n      if (!path) return;\n\n      e.preventDefault();\n\n      editor.tf.focus({ at: path });\n    }\n    // select next block\n    if (isHotkey('down', e)) {\n      const path = editor.api.findPath(element);\n\n      if (!path) return;\n\n      const nextNodePath = editor.api.after(path);\n\n      if (!nextNodePath) return;\n\n      e.preventDefault();\n\n      editor.tf.focus({ at: nextNodePath });\n    }\n  };\n\n  const onBlur: TextareaAutosizeProps['onBlur'] = (e) => {\n    const currentValue = e.target.value;\n\n    if (currentValue.length === 0) {\n      editor.setOption(CaptionPlugin, 'visibleId', null);\n    }\n  };\n\n  return {\n    props: {\n      readOnly,\n      value: captionValue,\n      onBlur,\n      onChange: handleChange,\n      onCompositionEnd: handleCompositionEnd,\n      onCompositionStart: handleCompositionStart,\n      onKeyDown,\n    },\n    ref: textareaRef,\n  };\n};\n\nexport const CaptionTextarea = createPrimitiveComponent(TextareaAutosize)({\n  propsHook: useCaptionTextarea,\n  stateHook: useCaptionTextareaState,\n});\n","import React from 'react';\nimport ReactTextareaAutosize, {\n  type TextareaAutosizeProps,\n} from 'react-textarea-autosize';\n\nimport { useIsomorphicLayoutEffect } from 'platejs/react';\n\n/**\n * `<textarea />` component for React which grows with content.\n *\n * @see https://github.com/Andarist/react-textarea-autosize\n * @see https://github.com/Andarist/react-textarea-autosize/issues/337\n */\nconst TextareaAutosize = React.forwardRef<\n  HTMLTextAreaElement,\n  TextareaAutosizeProps\n>((props, ref) => {\n  const [isRerendered, setIsRerendered] = React.useState(false);\n\n  useIsomorphicLayoutEffect(() => setIsRerendered(true), []);\n\n  return isRerendered ? <ReactTextareaAutosize {...props} ref={ref} /> : null;\n});\nTextareaAutosize.displayName = 'TextareaAutosize';\n\nexport { TextareaAutosize };\n","import type { SlateEditor, TElement } from 'platejs';\n\nimport { CaptionPlugin } from '../CaptionPlugin';\n\nexport const showCaption = (editor: SlateEditor, element: TElement) => {\n  const path = editor.api.findPath(element);\n  editor.setOption(CaptionPlugin, 'visibleId', element.id as string);\n\n  setTimeout(() => {\n    path && editor.setOption(CaptionPlugin, 'focusEndPath', path);\n  }, 0);\n};\n"],"mappings":"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","names":["apply","useElement","NodeApi","useElement","showCaption","useElement","useElement","React","isHotkey","NodeApi","createPrimitiveComponent","useEditorRef","useElement","usePluginOption","useReadOnly","React","useEditorRef","useElement","usePluginOption","React","NodeApi","useReadOnly","isHotkey","createPrimitiveComponent"]}