{"version":3,"sources":["../../src/react/LinkPlugin.tsx","../../src/lib/BaseLinkPlugin.ts","../../src/lib/utils/createLinkNode.ts","../../src/lib/utils/encodeUrlIfNeeded.ts","../../src/lib/utils/getLinkAttributes.ts","../../src/lib/utils/safeDecodeUrl.ts","../../src/lib/utils/validateUrl.ts","../../src/lib/withLink.ts","../../src/lib/transforms/insertLink.ts","../../src/lib/transforms/unwrapLink.ts","../../src/lib/transforms/upsertLink.ts","../../src/lib/transforms/upsertLinkText.ts","../../src/lib/transforms/wrapLink.ts","../../src/react/components/useLink.ts","../../src/react/components/useLinkToolbarButton.ts","../../src/react/components/FloatingLink/FloatingLinkNewTabInput.tsx","../../src/react/components/FloatingLink/FloatingLinkUrlInput.tsx","../../src/react/components/FloatingLink/LinkOpenButton.tsx","../../src/react/components/FloatingLink/useFloatingLinkEdit.ts","../../src/react/utils/triggerFloatingLinkEdit.ts","../../src/react/components/FloatingLink/useFloatingLinkEnter.ts","../../src/react/transforms/submitFloatingLink.ts","../../src/react/components/FloatingLink/useFloatingLinkEscape.ts","../../src/react/components/FloatingLink/useVirtualFloatingLink.ts","../../src/react/components/FloatingLink/useFloatingLinkInsert.ts","../../src/react/utils/triggerFloatingLinkInsert.ts","../../src/react/utils/triggerFloatingLink.ts"],"sourcesContent":["import { type ExtendConfig, type OmitFirst, bindFirst } from 'platejs';\nimport { toTPlatePlugin } from 'platejs/react';\n\nimport { type BaseLinkConfig, BaseLinkPlugin } from '../lib';\nimport { getLinkAttributes } from '../lib/utils';\n\nexport type FloatingLinkMode = '' | 'edit' | 'insert';\n\nexport type LinkConfig = ExtendConfig<\n  BaseLinkConfig,\n  {\n    isEditing: boolean;\n    mode: FloatingLinkMode;\n    mouseDown: boolean;\n    newTab: boolean;\n    openEditorId: string | null;\n    text: string;\n    updated: boolean;\n    url: string;\n    /**\n     * Default HTML attributes for link elements.\n     *\n     * @default { }\n     */\n    triggerFloatingLinkHotkeys?: string;\n  },\n  {\n    floatingLink: {\n      hide: () => void;\n      reset: () => void;\n      show: (mode: FloatingLinkMode, editorId: string) => void;\n    };\n    link: {\n      getAttributes: OmitFirst<typeof getLinkAttributes>;\n    };\n  },\n  {},\n  {\n    isOpen?: (editorId: string) => boolean;\n  }\n>;\n\n/** Enables support for hyperlinks. */\nexport const LinkPlugin = toTPlatePlugin<LinkConfig>(BaseLinkPlugin, {\n  options: {\n    isEditing: false,\n    mode: '' as FloatingLinkMode,\n    mouseDown: false,\n    newTab: false,\n    openEditorId: null,\n    text: '',\n    triggerFloatingLinkHotkeys: 'meta+k, ctrl+k',\n    updated: false,\n    url: '',\n  },\n})\n  .extendEditorApi<Partial<LinkConfig['api']>>(({ editor }) => ({\n    link: {\n      getAttributes: bindFirst(getLinkAttributes, editor),\n    },\n  }))\n  .extendEditorApi<Partial<LinkConfig['api']>>(({ setOptions }) => ({\n    floatingLink: {\n      hide: () => {\n        setOptions({\n          isEditing: false,\n          mode: '' as FloatingLinkMode,\n          mouseDown: false,\n          newTab: false,\n          openEditorId: null,\n          text: '',\n          updated: false,\n          url: '',\n        });\n      },\n      reset: () => {\n        setOptions({\n          isEditing: false,\n          mode: '' as FloatingLinkMode,\n          mouseDown: false,\n          newTab: false,\n          text: '',\n          updated: false,\n          url: '',\n        });\n      },\n      show: (mode: FloatingLinkMode, editorId: string) => {\n        setOptions({\n          isEditing: false,\n          mode,\n          openEditorId: editorId,\n        });\n      },\n    },\n  }))\n  .extendSelectors<LinkConfig['selectors']>(({ getOptions }) => ({\n    isOpen: (editorId) => getOptions().openEditorId === editorId,\n  }));\n","import {\n  type EditorBeforeOptions,\n  type PluginConfig,\n  type TLinkElement,\n  createTSlatePlugin,\n  isUrl,\n  KEYS,\n} from 'platejs';\n\nimport { getLinkAttributes, validateUrl } from './utils/index';\nimport { withLink } from './withLink';\n\nexport type BaseLinkConfig = PluginConfig<\n  'a',\n  {\n    /**\n     * List of allowed URL schemes.\n     *\n     * @default ['http', 'https', 'mailto', 'tel']\n     */\n    allowedSchemes?: string[];\n    /**\n     * Skips sanitation of links.\n     *\n     * @default false\n     */\n    dangerouslySkipSanitization?: boolean;\n    defaultLinkAttributes?: React.AnchorHTMLAttributes<HTMLAnchorElement>;\n    forceSubmit?: boolean;\n    /**\n     * Keeps selected text on pasting links by default.\n     *\n     * @default true\n     */\n    keepSelectedTextOnPaste?: boolean;\n    /**\n     * Allow custom config for rangeBeforeOptions.\n     *\n     * @example\n     *   {\n     *     \"matchString\": \" \",\n     *     \"skipInvalid\": true,\n     *     \"afterMatch\": true\n     *   }\n     */\n    rangeBeforeOptions?: EditorBeforeOptions;\n    /**\n     * Hotkeys to trigger floating link.\n     *\n     * @default 'meta+k, ctrl+k'\n     */\n    triggerFloatingLinkHotkeys?: string[] | string;\n    /**\n     * On keyboard shortcut or toolbar mousedown, get the link url by calling\n     * this promise. The default behavior is to use the browser's native\n     * `prompt`.\n     */\n    getLinkUrl?: (prevUrl: string | null) => Promise<string | null>;\n    /**\n     * Callback to optionally get the href for a url\n     *\n     * @returns Href: an optional link to be used that is different from the\n     *   text content (example https://google.com for google.com)\n     */\n    getUrlHref?: (url: string) => string | undefined;\n    /**\n     * Callback to validate an url.\n     *\n     * @default isUrl\n     */\n    isUrl?: (text: string) => boolean;\n    /**\n     * Transform the content of the URL input before validating it. Useful for\n     * adding a protocol to a URL. E.g. `google.com` -> `https://google.com`\n     *\n     * Similar to `getUrlHref` but is used on URL inputs. Whereas that is used\n     * on any entered text.\n     *\n     * @returns The transformed URL.\n     */\n    transformInput?: (url: string) => string | undefined;\n  }\n>;\n\n/** Enables support for hyperlinks. */\nexport const BaseLinkPlugin = createTSlatePlugin<BaseLinkConfig>({\n  key: KEYS.link,\n  node: {\n    dangerouslyAllowAttributes: ['target'],\n    isElement: true,\n    isInline: true,\n    props: ({ editor, element }) =>\n      getLinkAttributes(editor, element as TLinkElement),\n  },\n  options: {\n    allowedSchemes: ['http', 'https', 'mailto', 'tel'],\n    dangerouslySkipSanitization: false,\n    defaultLinkAttributes: {},\n    isUrl,\n    keepSelectedTextOnPaste: true,\n    rangeBeforeOptions: {\n      afterMatch: true,\n      matchBlockStart: true,\n      matchString: ' ',\n      skipInvalid: true,\n    },\n  },\n  parsers: {\n    html: {\n      deserializer: {\n        rules: [\n          {\n            validNodeName: 'A',\n          },\n        ],\n        parse: ({ editor, element, type }) => {\n          const url = element.getAttribute('href');\n\n          if (url && validateUrl(editor, url)) {\n            return {\n              target: element.getAttribute('target') || '_blank',\n              type,\n              url,\n            };\n          }\n        },\n      },\n    },\n  },\n  rules: {\n    normalize: { removeEmpty: true },\n    selection: { affinity: 'directional' },\n  },\n}).overrideEditor(withLink);\n","import type { SlateEditor, TLinkElement, TText } from 'platejs';\n\nimport { KEYS } from 'platejs';\n\nexport interface CreateLinkNodeOptions {\n  url: string;\n  children?: TText[];\n  target?: string;\n  text?: string;\n}\n\nexport const createLinkNode = (\n  editor: SlateEditor,\n  { children, target, text = '', url }: CreateLinkNodeOptions\n): TLinkElement => {\n  const type = editor.getType(KEYS.link);\n\n  return {\n    children: children ?? [{ text }],\n    target,\n    type,\n    url,\n  };\n};\n","/**\n * If a URL has not already been encoded and contains characters that require\n * encoding, encode the URL.\n *\n * @param url URL to encode\n */\nexport const encodeUrlIfNeeded = (url: string) => {\n  try {\n    const isEncoded = url !== decodeURIComponent(url);\n\n    return isEncoded ? url : encodeURI(url);\n  } catch (error) {\n    if (error instanceof URIError) {\n      return url;\n    }\n\n    throw error;\n  }\n};\n","import type React from 'react';\n\nimport {\n  type SlateEditor,\n  type TLinkElement,\n  type UnknownObject,\n  KEYS,\n  sanitizeUrl,\n} from 'platejs';\n\nimport type { BaseLinkConfig } from '../BaseLinkPlugin';\n\nexport const getLinkAttributes = (editor: SlateEditor, link: TLinkElement) => {\n  const { allowedSchemes, dangerouslySkipSanitization, defaultLinkAttributes } =\n    editor.getOptions<BaseLinkConfig>({ key: KEYS.link });\n\n  const attributes = { ...defaultLinkAttributes };\n\n  const href = dangerouslySkipSanitization\n    ? link.url\n    : sanitizeUrl(link.url, { allowedSchemes }) || undefined;\n\n  // Avoid passing `undefined` for href or target\n  if (href !== undefined) {\n    attributes.href = href;\n  }\n  if ('target' in link && link.target !== undefined) {\n    attributes.target = link.target;\n  }\n\n  return attributes as Pick<\n    React.AnchorHTMLAttributes<HTMLAnchorElement>,\n    'href' | 'target'\n  > &\n    UnknownObject;\n};\n","export const safeDecodeUrl = (url: string) => {\n  try {\n    return decodeURI(url);\n  } catch (error) {\n    if (error instanceof URIError) {\n      return url;\n    }\n\n    throw error;\n  }\n};\n","import { type SlateEditor, sanitizeUrl } from 'platejs';\n\nimport { BaseLinkPlugin } from '../BaseLinkPlugin';\n\nexport const validateUrl = (editor: SlateEditor, url: string): boolean => {\n  const { allowedSchemes, dangerouslySkipSanitization, isUrl } =\n    editor.getOptions(BaseLinkPlugin);\n\n  // Allow internal links starting with /\n  if (url.startsWith('/')) {\n    return true;\n  }\n\n  // For strings starting with #, check if it's a markdown heading\n  if (url.startsWith('#')) {\n    // Markdown headings have a space after the # symbols\n    const markdownHeadingPattern = /^#{1,6}\\s+/;\n    if (markdownHeadingPattern.test(url)) {\n      return false; // This is a markdown heading, not a valid link\n    }\n    return true; // This is an anchor link\n  }\n\n  // Check custom validator first if provided\n  if (isUrl && !isUrl(url)) {\n    return false;\n  }\n\n  // Always sanitize unless explicitly skipped\n  if (\n    !dangerouslySkipSanitization &&\n    !sanitizeUrl(url, {\n      allowedSchemes,\n      permitInvalid: true,\n    })\n  ) {\n    return false;\n  }\n\n  return true;\n};\n","import { type OverrideEditor, PathApi } from 'platejs';\n\nimport type { BaseLinkConfig } from './BaseLinkPlugin';\n\nimport { upsertLink } from './transforms/index';\n\n/**\n * Insert space after a url to wrap a link. Lookup from the block start to the\n * cursor to check if there is an url. If not found, lookup before the cursor\n * for a space character to check the url.\n *\n * On insert data: Paste a string inside a link element will edit its children\n * text but not its url.\n */\nexport const withLink: OverrideEditor<BaseLinkConfig> = ({\n  editor,\n  getOptions,\n  tf: { insertBreak, insertData, insertText, normalizeNode },\n  type,\n}) => {\n  const wrapLink = () => {\n    const { getUrlHref, isUrl, rangeBeforeOptions } = getOptions();\n\n    editor.tf.withoutNormalizing(() => {\n      const selection = editor.selection!;\n\n      // get the range from first space before the cursor\n      let beforeWordRange = editor.api.range('before', selection, {\n        before: rangeBeforeOptions,\n      });\n\n      // if no space found before, get the range from block start\n      if (!beforeWordRange) {\n        beforeWordRange = editor.api.range('start', editor.selection);\n      }\n      // if no word found before the cursor, exit\n      if (!beforeWordRange) return;\n\n      const hasLink = editor.api.some({\n        at: beforeWordRange,\n        match: { type },\n      });\n\n      // if word before the cursor has a link, exit\n      if (hasLink) return;\n\n      let beforeWordText = editor.api.string(beforeWordRange);\n      beforeWordText = getUrlHref?.(beforeWordText) ?? beforeWordText;\n\n      // if word before is not an url, exit\n      if (!isUrl!(beforeWordText)) return;\n\n      // select the word to wrap link\n      editor.tf.select(beforeWordRange);\n\n      // wrap link\n      upsertLink(editor, {\n        url: beforeWordText,\n      });\n\n      // collapse selection\n      editor.tf.collapse({ edge: 'end' });\n    });\n  };\n\n  return {\n    transforms: {\n      insertBreak() {\n        if (!editor.api.isCollapsed()) return insertBreak();\n\n        wrapLink();\n        insertBreak();\n      },\n\n      insertData(data) {\n        const { getUrlHref, keepSelectedTextOnPaste } = getOptions();\n\n        const text = data.getData('text/plain');\n        const textHref = getUrlHref?.(text);\n\n        if (text) {\n          const value = textHref || text;\n          const inserted = upsertLink(editor, {\n            insertTextInLink: true,\n            text: keepSelectedTextOnPaste ? undefined : value,\n            url: value,\n          });\n\n          if (inserted) return;\n        }\n\n        insertData(data);\n      },\n\n      insertText(text, options) {\n        if (text === ' ' && editor.api.isCollapsed()) {\n          wrapLink();\n        }\n\n        insertText(text, options);\n      },\n      normalizeNode([node, path]) {\n        if (node.type === type) {\n          const range = editor.selection;\n\n          if (\n            range &&\n            editor.api.isCollapsed() &&\n            editor.api.isEnd(range.focus, path)\n          ) {\n            const nextPoint = editor.api.start(path, { next: true });\n\n            // select next text node if any\n            if (!nextPoint) {\n              const nextPath = PathApi.next(path);\n              editor.tf.insertNodes({ text: '' } as any, { at: nextPath });\n              editor.tf.select(nextPath);\n            }\n          }\n        }\n\n        normalizeNode([node, path]);\n      },\n    },\n  };\n};\n","import type {\n  InsertNodesOptions,\n  SlateEditor,\n  TLinkElement,\n  TText,\n} from 'platejs';\n\nimport { type CreateLinkNodeOptions, createLinkNode } from '../utils';\n\n/** Insert a link node. */\nexport const insertLink = (\n  editor: SlateEditor,\n  createLinkNodeOptions: CreateLinkNodeOptions,\n  options?: InsertNodesOptions\n) => {\n  editor.tf.insertNodes<TLinkElement | TText>(\n    [createLinkNode(editor, createLinkNodeOptions)],\n    options as any\n  );\n};\n","import { type SlateEditor, type UnwrapNodesOptions, ElementApi } from 'platejs';\nimport { KEYS } from 'platejs';\n\n/** Unwrap link node. */\nexport const unwrapLink = (\n  editor: SlateEditor,\n  options?: {\n    split?: boolean;\n  } & UnwrapNodesOptions\n) => {\n  return editor.tf.withoutNormalizing(() => {\n    if (options?.split) {\n      const linkAboveAnchor = editor.api.above({\n        at: editor.selection?.anchor,\n        match: { type: editor.getType(KEYS.link) },\n      });\n\n      // anchor in link\n      if (linkAboveAnchor) {\n        editor.tf.splitNodes({\n          at: editor.selection?.anchor,\n          match: (n) =>\n            ElementApi.isElement(n) && n.type === editor.getType(KEYS.link),\n        });\n        unwrapLink(editor, {\n          at: editor.selection?.anchor,\n        });\n\n        return true;\n      }\n\n      const linkAboveFocus = editor.api.above({\n        at: editor.selection?.focus,\n        match: { type: editor.getType(KEYS.link) },\n      });\n\n      // focus in link\n      if (linkAboveFocus) {\n        editor.tf.splitNodes({\n          at: editor.selection?.focus,\n          match: (n) =>\n            ElementApi.isElement(n) && n.type === editor.getType(KEYS.link),\n        });\n        unwrapLink(editor, {\n          at: editor.selection?.focus,\n        });\n\n        return true;\n      }\n    }\n\n    editor.tf.unwrapNodes({\n      match: { type: editor.getType(KEYS.link) },\n      ...options,\n    });\n  });\n};\n","import {\n  type InsertNodesOptions,\n  type SlateEditor,\n  type TLinkElement,\n  type UnwrapNodesOptions,\n  type WrapNodesOptions,\n  isDefined,\n  NodeApi,\n  RangeApi,\n} from 'platejs';\nimport { KEYS } from 'platejs';\n\nimport { type CreateLinkNodeOptions, validateUrl } from '../utils';\nimport { insertLink } from './insertLink';\nimport { unwrapLink } from './unwrapLink';\nimport { upsertLinkText } from './upsertLinkText';\nimport { wrapLink } from './wrapLink';\n\nexport type UpsertLinkOptions = {\n  insertNodesOptions?: InsertNodesOptions;\n  /** If true, insert text when selection is in url. */\n  insertTextInLink?: boolean;\n  skipValidation?: boolean;\n  unwrapNodesOptions?: UnwrapNodesOptions;\n  wrapNodesOptions?: WrapNodesOptions;\n} & CreateLinkNodeOptions;\n\n/**\n * If selection in a link or is not url:\n *\n * - Insert text with url, exit If selection is expanded or `update` in a link:\n * - Remove link node, get link text Then:\n * - Insert link node\n */\nexport const upsertLink = (\n  editor: SlateEditor,\n  {\n    insertNodesOptions,\n    insertTextInLink,\n    skipValidation = false,\n    target,\n    text,\n    url,\n  }: UpsertLinkOptions\n) => {\n  const at = editor.selection;\n\n  if (!at) return;\n\n  const linkAbove = editor.api.above<TLinkElement>({\n    at,\n    match: { type: editor.getType(KEYS.link) },\n  });\n\n  // anchor and focus in link -> insert text\n  if (insertTextInLink && linkAbove) {\n    // we don't want to insert marks in links\n    editor.tf.insertText(url);\n\n    return true;\n  }\n  if (!skipValidation && !validateUrl(editor, url)) return;\n  if (isDefined(text) && text.length === 0) {\n    text = url;\n  }\n  // edit the link url and/or target\n  if (linkAbove) {\n    if (url !== linkAbove[0]?.url || target !== linkAbove[0]?.target) {\n      editor.tf.setNodes<TLinkElement>(\n        { target, url },\n        {\n          at: linkAbove[1],\n        }\n      );\n    }\n\n    upsertLinkText(editor, { target, text, url });\n\n    return true;\n  }\n\n  // selection contains at one edge edge or between the edges\n  const linkEntry = editor.api.node<TLinkElement>({\n    at,\n    match: { type: editor.getType(KEYS.link) },\n  });\n\n  const [linkNode, linkPath] = linkEntry ?? [];\n\n  let shouldReplaceText = false;\n\n  if (linkPath && text?.length) {\n    const linkText = editor.api.string(linkPath);\n\n    if (text !== linkText) {\n      shouldReplaceText = true;\n    }\n  }\n  if (RangeApi.isExpanded(at)) {\n    // anchor and focus in link\n    if (linkAbove) {\n      unwrapLink(editor, {\n        at: linkAbove[1],\n      });\n    } else {\n      unwrapLink(editor, {\n        split: true,\n      });\n    }\n\n    wrapLink(editor, {\n      target,\n      url,\n    });\n\n    upsertLinkText(editor, { target, text, url });\n\n    return true;\n  }\n  if (shouldReplaceText) {\n    editor.tf.removeNodes({\n      at: linkPath,\n    });\n  }\n\n  const props = NodeApi.extractProps(linkNode ?? ({} as any));\n\n  const path = editor.selection?.focus.path;\n\n  if (!path) return;\n\n  // link text should have the focused leaf marks\n  const leaf = NodeApi.leaf(editor, path);\n\n  // if text is empty, text is url\n  if (!text?.length) {\n    text = url;\n  }\n\n  insertLink(\n    editor,\n    {\n      ...props,\n      children: [\n        {\n          ...leaf,\n          text,\n        },\n      ],\n      target,\n      url,\n    },\n    insertNodesOptions\n  );\n\n  return true;\n};\n","import type { SlateEditor, TLinkElement, TText } from 'platejs';\n\nimport { KEYS } from 'platejs';\n\nimport type { UpsertLinkOptions } from './upsertLink';\n\n/**\n * If the text is different than the link above text, replace link children by a\n * new text. The new text has the same marks than the first text replaced.\n */\nexport const upsertLinkText = (\n  editor: SlateEditor,\n  { text }: UpsertLinkOptions\n) => {\n  const newLink = editor.api.above<TLinkElement>({\n    match: { type: editor.getType(KEYS.link) },\n  });\n\n  if (newLink) {\n    const [newLinkNode, newLinkPath] = newLink;\n\n    if (text?.length && text !== editor.api.string(newLinkPath)) {\n      const firstText = newLinkNode.children[0];\n\n      // remove link children\n      editor.tf.replaceNodes<TText>(\n        { ...firstText, text },\n        {\n          at: newLinkPath,\n          children: true,\n          select: true,\n        }\n      );\n    }\n  }\n};\n","import type { SlateEditor, TLinkElement, WrapNodesOptions } from 'platejs';\n\nimport { KEYS } from 'platejs';\n\nexport interface WrapLinkOptions extends WrapNodesOptions {\n  url: string;\n  target?: string;\n}\n\n/** Wrap a link node with split. */\nexport const wrapLink = (\n  editor: SlateEditor,\n  { target, url, ...options }: WrapLinkOptions\n) => {\n  editor.tf.wrapNodes<TLinkElement>(\n    {\n      children: [],\n      target,\n      type: editor.getType(KEYS.link),\n      url,\n    },\n    { split: true, ...options } as any\n  );\n};\n","import type { TLinkElement } from 'platejs';\n\nimport { useEditorRef } from 'platejs/react';\n\nimport { getLinkAttributes } from '../../lib';\n\nexport const useLink = ({ element }: { element: TLinkElement }) => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      ...getLinkAttributes(editor, element),\n      // quick fix: hovering <a> with href loses the editor focus\n      onMouseOver: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.stopPropagation();\n      },\n    },\n  };\n};\n","import { KEYS } from 'platejs';\nimport { useEditorRef, useEditorSelector } from 'platejs/react';\n\nimport { triggerFloatingLink } from '../index';\n\nexport const useLinkToolbarButtonState = () => {\n  const pressed = useEditorSelector(\n    (editor) =>\n      !!editor?.selection &&\n      editor.api.some({\n        match: { type: editor.getType(KEYS.link) },\n      }),\n    []\n  );\n\n  return {\n    pressed,\n  };\n};\n\nexport const useLinkToolbarButton = (\n  state: ReturnType<typeof useLinkToolbarButtonState>\n) => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      pressed: state.pressed,\n      onClick: () => {\n        editor.tf.focus();\n        triggerFloatingLink(editor, { focused: true });\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n","import React from 'react';\n\nimport {\n  createPrimitiveComponent,\n  useEditorPlugin,\n  usePluginOption,\n} from 'platejs/react';\n\nimport { LinkPlugin } from '../../LinkPlugin';\n\nexport const useFloatingLinkNewTabInputState = () => {\n  const { getOptions } = useEditorPlugin(LinkPlugin);\n  const updated = usePluginOption(LinkPlugin, 'updated');\n  const ref = React.useRef<HTMLInputElement>(null);\n  const [checked, setChecked] = React.useState<boolean>(getOptions().newTab);\n\n  React.useEffect(() => {\n    if (ref.current && updated) {\n      setTimeout(() => {\n        ref.current?.focus();\n      }, 0);\n    }\n  }, [updated]);\n\n  return {\n    checked,\n    ref,\n    setChecked,\n  };\n};\n\nexport const useFloatingLinkNewTabInput = ({\n  checked,\n  ref,\n  setChecked,\n}: ReturnType<typeof useFloatingLinkNewTabInputState>) => {\n  const { setOption } = useEditorPlugin(LinkPlugin);\n\n  const onChange: React.ChangeEventHandler<HTMLInputElement> =\n    React.useCallback(\n      (e) => {\n        setChecked(e.target.checked);\n        setOption('newTab', e.target.checked);\n      },\n      [setOption, setChecked]\n    );\n\n  return {\n    props: {\n      checked,\n      type: 'checkbox',\n      onChange,\n    },\n    ref,\n  };\n};\n\nexport const FloatingLinkNewTabInput = createPrimitiveComponent('input')({\n  propsHook: useFloatingLinkNewTabInput,\n  stateHook: useFloatingLinkNewTabInputState,\n});\n","import React from 'react';\n\nimport {\n  createPrimitiveComponent,\n  useEditorPlugin,\n  usePluginOption,\n} from 'platejs/react';\n\nimport { encodeUrlIfNeeded, safeDecodeUrl } from '../../../lib';\nimport { LinkPlugin } from '../../LinkPlugin';\n\nexport const useFloatingLinkUrlInputState = () => {\n  const { getOptions } = useEditorPlugin(LinkPlugin);\n  const updated = usePluginOption(LinkPlugin, 'updated');\n  const ref = React.useRef<HTMLInputElement>(null);\n  const focused = React.useRef(false);\n\n  React.useEffect(() => {\n    if (ref.current && updated) {\n      setTimeout(() => {\n        const input = ref.current;\n\n        if (!input) return;\n        if (focused.current) return;\n\n        focused.current = true;\n\n        const url = getOptions().url;\n        input.focus();\n        input.value = url ? safeDecodeUrl(url) : '';\n      }, 0);\n    }\n  }, [getOptions, updated]);\n\n  return {\n    ref,\n  };\n};\n\nexport const useFloatingLinkUrlInput = (\n  state: ReturnType<typeof useFloatingLinkUrlInputState>\n) => {\n  const { getOptions, setOption } = useEditorPlugin(LinkPlugin);\n\n  const onChange: React.ChangeEventHandler<HTMLInputElement> =\n    React.useCallback(\n      (e) => {\n        const url = encodeUrlIfNeeded(e.target.value);\n        setOption('url', url);\n      },\n      [setOption]\n    );\n\n  return {\n    props: {\n      defaultValue: getOptions().url,\n      onChange,\n    },\n    ref: state.ref,\n  };\n};\n\nexport const FloatingLinkUrlInput = createPrimitiveComponent('input')({\n  propsHook: useFloatingLinkUrlInput,\n  stateHook: useFloatingLinkUrlInputState,\n});\n","import React from 'react';\n\nimport { type TLinkElement, KEYS } from 'platejs';\nimport {\n  createPrimitiveComponent,\n  useEditorRef,\n  useEditorSelection,\n} from 'platejs/react';\n\nimport { getLinkAttributes } from '../../../lib/utils/getLinkAttributes';\n\n// @deprecated\nexport const useLinkOpenButtonState = () => {\n  const editor = useEditorRef();\n  const selection = useEditorSelection();\n\n  const entry = React.useMemo(\n    () =>\n      editor.api.node<TLinkElement>({\n        match: { type: editor.getType(KEYS.link) },\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [editor, selection]\n  );\n\n  if (!entry) {\n    return {};\n  }\n\n  const [element] = entry;\n\n  return {\n    element,\n  };\n};\n\n// @deprecated\nexport const useLinkOpenButton = ({ element }: { element?: TLinkElement }) => {\n  const editor = useEditorRef();\n\n  if (!element) {\n    return {\n      props: {},\n    };\n  }\n\n  const linkAttributes = getLinkAttributes(editor, element);\n\n  return {\n    props: {\n      ...linkAttributes,\n      'aria-label': 'Open link in a new tab',\n      target: '_blank',\n      onMouseOver: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.stopPropagation();\n      },\n    },\n  };\n};\n\nexport const LinkOpenButton = createPrimitiveComponent('a')({\n  propsHook: useLinkOpenButton,\n  stateHook: useLinkOpenButtonState,\n});\n","import React from 'react';\n\nimport {\n  getDOMSelectionBoundingClientRect,\n  getRangeBoundingClientRect,\n} from '@platejs/floating';\nimport { KEYS } from 'platejs';\nimport {\n  useComposedRef,\n  useEditorPlugin,\n  useEditorReadOnly,\n  useEditorVersion,\n  useHotkeys,\n  useOnClickOutside,\n  usePluginOption,\n} from 'platejs/react';\n\nimport type { LinkFloatingToolbarState } from './useFloatingLinkInsert';\n\nimport { unwrapLink } from '../../../lib';\nimport { LinkPlugin } from '../../LinkPlugin';\nimport { triggerFloatingLinkEdit } from '../../utils/triggerFloatingLinkEdit';\nimport { useFloatingLinkEnter } from './useFloatingLinkEnter';\nimport { useFloatingLinkEscape } from './useFloatingLinkEscape';\nimport { useVirtualFloatingLink } from './useVirtualFloatingLink';\n\nexport const useFloatingLinkEditState = ({\n  floatingOptions,\n}: LinkFloatingToolbarState = {}) => {\n  const { editor, getOptions, type } = useEditorPlugin(LinkPlugin);\n\n  const { triggerFloatingLinkHotkeys } = getOptions();\n  const readOnly = useEditorReadOnly();\n  const isEditing = usePluginOption(LinkPlugin, 'isEditing');\n  const version = useEditorVersion();\n  const mode = usePluginOption(LinkPlugin, 'mode');\n  const open = usePluginOption(LinkPlugin, 'isOpen', editor.id);\n\n  const getBoundingClientRect = React.useCallback(() => {\n    const entry = editor.api.above({\n      match: { type },\n    });\n\n    if (entry) {\n      const [, path] = entry;\n\n      return getRangeBoundingClientRect(editor, {\n        anchor: editor.api.start(path)!,\n        focus: editor.api.end(path)!,\n      });\n    }\n\n    return getDOMSelectionBoundingClientRect();\n  }, [editor, type]);\n\n  const isOpen = open && mode === 'edit';\n\n  const floating = useVirtualFloatingLink({\n    editorId: editor.id,\n    getBoundingClientRect,\n    open: isOpen,\n    ...floatingOptions,\n  });\n\n  return {\n    editor,\n    floating,\n    isEditing,\n    isOpen,\n    readOnly,\n    triggerFloatingLinkHotkeys,\n    versionEditor: version,\n  };\n};\n\nexport const useFloatingLinkEdit = ({\n  editor,\n  floating,\n  triggerFloatingLinkHotkeys,\n  versionEditor,\n}: ReturnType<typeof useFloatingLinkEditState>) => {\n  const { api, getOptions } = useEditorPlugin(LinkPlugin);\n\n  React.useEffect(() => {\n    if (\n      editor.selection &&\n      editor.api.some({\n        match: { type: editor.getType(KEYS.link) },\n      })\n    ) {\n      api.floatingLink.show('edit', editor.id);\n      floating.update();\n\n      return;\n    }\n    if (getOptions().mode === 'edit') {\n      api.floatingLink.hide();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor, versionEditor, floating.update]);\n\n  useHotkeys(\n    triggerFloatingLinkHotkeys!,\n    (e) => {\n      if (getOptions().mode === 'edit' && triggerFloatingLinkEdit(editor)) {\n        e.preventDefault();\n      }\n    },\n    {\n      enableOnContentEditable: true,\n    },\n    []\n  );\n\n  useFloatingLinkEnter();\n\n  useFloatingLinkEscape();\n\n  const clickOutsideRef = useOnClickOutside(() => {\n    if (!getOptions().isEditing) return;\n\n    api.floatingLink.hide();\n  });\n\n  return {\n    editButtonProps: {\n      onClick: () => {\n        triggerFloatingLinkEdit(editor);\n      },\n    },\n    props: {\n      style: {\n        ...floating.style,\n        zIndex: 50,\n      },\n    },\n    ref: useComposedRef<HTMLElement | null>(\n      floating.refs.setFloating,\n      clickOutsideRef\n    ),\n    unlinkButtonProps: {\n      onClick: () => {\n        unwrapLink(editor);\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n","import {\n  type SlateEditor,\n  type TLinkElement,\n  getEditorPlugin,\n  KEYS,\n} from 'platejs';\n\nimport { LinkPlugin } from '../LinkPlugin';\n\nexport const triggerFloatingLinkEdit = (editor: SlateEditor) => {\n  const { setOption } = getEditorPlugin(editor, LinkPlugin);\n\n  const entry = editor.api.node<TLinkElement>({\n    match: { type: editor.getType(KEYS.link) },\n  });\n\n  if (!entry) return;\n\n  const [link, path] = entry;\n\n  let text = editor.api.string(path);\n\n  setOption('url', link.url);\n  setOption('newTab', link.target === '_blank');\n\n  if (text === link.url) {\n    text = '';\n  }\n\n  setOption('text', text);\n  setOption('isEditing', true);\n\n  return true;\n};\n","import { useEditorRef, useHotkeys, usePluginOption } from 'platejs/react';\n\nimport { LinkPlugin } from '../../LinkPlugin';\nimport { submitFloatingLink } from '../../transforms/submitFloatingLink';\n\nexport const useFloatingLinkEnter = () => {\n  const editor = useEditorRef();\n\n  const open = usePluginOption(LinkPlugin, 'isOpen', editor.id);\n\n  useHotkeys(\n    '*',\n    (e) => {\n      if (e.key !== 'Enter') return;\n      if (submitFloatingLink(editor)) {\n        e.preventDefault();\n      }\n    },\n    {\n      enabled: open,\n      enableOnFormTags: ['INPUT'],\n    },\n    []\n  );\n};\n","import { type SlateEditor, getEditorPlugin } from 'platejs';\n\nimport { upsertLink, validateUrl } from '../../lib';\nimport { LinkPlugin } from '../LinkPlugin';\n\n/**\n * Insert link if url is valid. Text is url if empty. Close floating link. Focus\n * editor.\n */\nexport const submitFloatingLink = (editor: SlateEditor) => {\n  if (!editor.selection) return;\n\n  const { api, getOptions } = getEditorPlugin(editor, LinkPlugin);\n\n  const {\n    forceSubmit,\n    newTab,\n    text,\n    transformInput,\n    url: inputUrl,\n  } = getOptions();\n\n  const url = transformInput ? (transformInput(inputUrl) ?? '') : inputUrl;\n\n  if (!forceSubmit && !validateUrl(editor, url)) return;\n\n  const target = newTab ? '_blank' : undefined;\n\n  api.floatingLink.hide();\n\n  upsertLink(editor, {\n    skipValidation: true,\n    target,\n    text,\n    url,\n  });\n\n  setTimeout(() => {\n    editor.tf.focus({ at: editor.selection! });\n  }, 0);\n\n  return true;\n};\n","import { useEditorPlugin, useHotkeys, usePluginOption } from 'platejs/react';\n\nimport { LinkPlugin } from '../../LinkPlugin';\n\nexport const useFloatingLinkEscape = () => {\n  const { api, editor, getOptions } = useEditorPlugin(LinkPlugin);\n\n  const open = usePluginOption(LinkPlugin, 'isOpen', editor.id);\n\n  useHotkeys(\n    'escape',\n    (e) => {\n      const { isEditing, mode } = getOptions();\n\n      if (!mode) return;\n\n      e.preventDefault();\n\n      if (mode === 'edit' && isEditing) {\n        api.floatingLink.show('edit', editor.id);\n        editor.tf.focus({ at: editor.selection! });\n\n        return;\n      }\n      if (mode === 'insert') {\n        editor.tf.focus({ at: editor.selection! });\n      }\n\n      api.floatingLink.hide();\n    },\n    {\n      enabled: open,\n      enableOnContentEditable: true,\n      enableOnFormTags: ['INPUT'],\n    },\n    []\n  );\n};\n","import {\n  type UseVirtualFloatingOptions,\n  useVirtualFloating,\n} from '@platejs/floating';\nimport { useEditorPlugin } from 'platejs/react';\n\nimport { LinkPlugin } from '../../LinkPlugin';\n\nexport const useVirtualFloatingLink = ({\n  editorId,\n  ...floatingOptions\n}: { editorId: string } & UseVirtualFloatingOptions) => {\n  const { setOption } = useEditorPlugin(LinkPlugin);\n\n  return useVirtualFloating({\n    onOpenChange: (open) => setOption('openEditorId', open ? editorId : null),\n    ...floatingOptions,\n  });\n};\n","import React from 'react';\n\nimport {\n  type UseVirtualFloatingOptions,\n  getDOMSelectionBoundingClientRect,\n} from '@platejs/floating';\nimport {\n  useComposedRef,\n  useEditorPlugin,\n  useEditorReadOnly,\n  useFocused,\n  useHotkeys,\n  useOnClickOutside,\n  usePluginOption,\n} from 'platejs/react';\n\nimport { LinkPlugin } from '../../LinkPlugin';\nimport { triggerFloatingLinkInsert } from '../../utils/triggerFloatingLinkInsert';\nimport { useFloatingLinkEscape } from './useFloatingLinkEscape';\nimport { useVirtualFloatingLink } from './useVirtualFloatingLink';\n\nexport type LinkFloatingToolbarState = {\n  floatingOptions?: UseVirtualFloatingOptions;\n};\n\nexport const useFloatingLinkInsertState = ({\n  floatingOptions,\n}: LinkFloatingToolbarState = {}) => {\n  const { editor, getOptions } = useEditorPlugin(LinkPlugin);\n\n  const { triggerFloatingLinkHotkeys } = getOptions();\n  const readOnly = useEditorReadOnly();\n  const focused = useFocused();\n  const mode = usePluginOption(LinkPlugin, 'mode');\n  const isOpen = usePluginOption(LinkPlugin, 'isOpen', editor.id);\n\n  const floating = useVirtualFloatingLink({\n    editorId: editor.id,\n    getBoundingClientRect: getDOMSelectionBoundingClientRect,\n    open: isOpen && mode === 'insert',\n    whileElementsMounted: () => () => {},\n    ...floatingOptions,\n  });\n\n  return {\n    floating,\n    focused,\n    isOpen,\n    readOnly,\n    triggerFloatingLinkHotkeys,\n  };\n};\n\nexport const useFloatingLinkInsert = ({\n  floating,\n  focused,\n  isOpen,\n  readOnly,\n  triggerFloatingLinkHotkeys,\n}: ReturnType<typeof useFloatingLinkInsertState>) => {\n  const { api, editor, getOptions, setOption } = useEditorPlugin(LinkPlugin);\n\n  const onChange: React.ChangeEventHandler<HTMLInputElement> =\n    React.useCallback(\n      (e) => {\n        setOption('text', e.target.value);\n      },\n      [setOption]\n    );\n\n  const ref = useOnClickOutside(\n    () => {\n      if (getOptions().mode === 'insert') {\n        api.floatingLink.hide();\n        editor.tf.focus({ at: editor.selection! });\n      }\n    },\n    {\n      disabled: !isOpen,\n    }\n  );\n\n  // wait for update before focusing input\n  React.useEffect(() => {\n    if (isOpen) {\n      floating.update();\n      setOption('updated', true);\n    } else {\n      setOption('updated', false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, floating.update]);\n\n  useHotkeys(\n    triggerFloatingLinkHotkeys!,\n    (e) => {\n      if (triggerFloatingLinkInsert(editor, { focused })) {\n        e.preventDefault();\n      }\n    },\n    {\n      enableOnContentEditable: true,\n    },\n    [focused]\n  );\n\n  useFloatingLinkEscape();\n\n  const { text, updated } = getOptions();\n\n  const updatedValue = React.useCallback(\n    (el: HTMLInputElement) => {\n      if (el && updated) {\n        el.value = getOptions().text;\n      }\n    },\n    [getOptions, updated]\n  );\n\n  return {\n    hidden: readOnly || !isOpen,\n    props: {\n      style: {\n        ...floating.style,\n        zIndex: 50,\n      },\n    },\n    ref: useComposedRef<HTMLDivElement>(floating.refs.setFloating, ref),\n    textInputProps: {\n      defaultValue: text,\n      ref: updatedValue,\n      onChange,\n    },\n  };\n};\n","import { type SlateEditor, getEditorPlugin } from 'platejs';\n\nimport { LinkPlugin } from '../LinkPlugin';\n\n/**\n * Trigger floating link.\n *\n * Do not trigger when:\n *\n * - Selection is across blocks\n * - Selection has more than one leaf node\n * - Lowest selection is not text\n * - Selection has a link node\n */\nexport const triggerFloatingLinkInsert = (\n  editor: SlateEditor,\n  {\n    focused,\n  }: {\n    focused?: boolean;\n  } = {}\n) => {\n  const { api, getOptions, setOption, type } = getEditorPlugin(\n    editor,\n    LinkPlugin\n  );\n\n  const { mode } = getOptions();\n\n  if (mode) return;\n  if (!focused) return;\n  if (editor.api.isAt({ blocks: true })) return;\n\n  const hasLink = editor.api.some({\n    match: { type },\n  });\n\n  if (hasLink) return;\n\n  setOption('text', editor.api.string(editor.selection));\n  api.floatingLink.show('insert', editor.id);\n\n  return true;\n};\n","import { type SlateEditor, getEditorPlugin } from 'platejs';\n\nimport { LinkPlugin } from '../LinkPlugin';\nimport { triggerFloatingLinkEdit } from './triggerFloatingLinkEdit';\nimport { triggerFloatingLinkInsert } from './triggerFloatingLinkInsert';\n\nexport const triggerFloatingLink = (\n  editor: SlateEditor,\n  {\n    focused,\n  }: {\n    focused?: boolean;\n  } = {}\n) => {\n  const { getOptions } = getEditorPlugin(editor, LinkPlugin);\n\n  if (getOptions().mode === 'edit') {\n    triggerFloatingLinkEdit(editor);\n\n    return;\n  }\n\n  triggerFloatingLinkInsert(editor, {\n    focused,\n  });\n};\n"],"mappings":"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","names":["KEYS","KEYS","sanitizeUrl","isUrl","sanitizeUrl","KEYS","KEYS","KEYS","KEYS","KEYS","wrapLink","isUrl","KEYS","KEYS","useEditorRef","KEYS","useEditorRef","React","createPrimitiveComponent","useEditorPlugin","usePluginOption","useEditorPlugin","usePluginOption","React","createPrimitiveComponent","React","KEYS","createPrimitiveComponent","useEditorRef","useEditorRef","React","KEYS","createPrimitiveComponent","React","KEYS","useEditorPlugin","useHotkeys","usePluginOption","KEYS","KEYS","useEditorRef","usePluginOption","getEditorPlugin","getEditorPlugin","useEditorRef","usePluginOption","useEditorPlugin","useHotkeys","usePluginOption","useEditorPlugin","usePluginOption","useHotkeys","useEditorPlugin","useEditorPlugin","useEditorPlugin","usePluginOption","React","KEYS","useHotkeys","React","getDOMSelectionBoundingClientRect","useComposedRef","useEditorPlugin","useEditorReadOnly","useHotkeys","useOnClickOutside","usePluginOption","getEditorPlugin","getEditorPlugin","useEditorPlugin","useEditorReadOnly","usePluginOption","getDOMSelectionBoundingClientRect","React","useOnClickOutside","useHotkeys","useComposedRef","getEditorPlugin","getEditorPlugin"]}